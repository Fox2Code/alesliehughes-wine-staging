From f61dfd503382cda1a52458d80953d51231f8ca27 Mon Sep 17 00:00:00 2001
From: Alistair Leslie-Hughes <leslie_alistair@hotmail.com>
Date: Fri, 22 Sep 2017 15:56:52 +1000
Subject: [PATCH 1/3] dpnsvr: Listen for broadcast packets

Signed-off-by: Alistair Leslie-Hughes <leslie_alistair@hotmail.com>
---
 programs/dpnsvr/Makefile.in |   2 +-
 programs/dpnsvr/main.c      | 151 ++++++++++++++++++++++++++++++++++--
 2 files changed, 147 insertions(+), 6 deletions(-)

diff --git a/programs/dpnsvr/Makefile.in b/programs/dpnsvr/Makefile.in
index bced5ca06dd..0aee3d5a442 100644
--- a/programs/dpnsvr/Makefile.in
+++ b/programs/dpnsvr/Makefile.in
@@ -1,5 +1,5 @@
 MODULE    = dpnsvr.exe
-
+IMPORTS   = ws2_32 advapi32 iphlpapi
 EXTRADLLFLAGS = -mconsole -municode -mno-cygwin
 
 C_SRCS = \
diff --git a/programs/dpnsvr/main.c b/programs/dpnsvr/main.c
index cabc8a6c700..16f365aacbb 100644
--- a/programs/dpnsvr/main.c
+++ b/programs/dpnsvr/main.c
@@ -15,19 +15,160 @@
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
  */
+#include <winsock2.h>
+#include <ws2tcpip.h>
+#include <windows.h>
+#include <iphlpapi.h>
+
+#include <dplay8.h>
+#include <dpaddr.h>
 
 #include "wine/debug.h"
 
 WINE_DEFAULT_DEBUG_CHANNEL(dpnsvr);
 
+#define BUF_SIZE 500
+
+SOCKET *socks;
+static int sock_cnt = 0;
+static int sock_max = 10;
+
+static void print_addr(PIP_ADAPTER_UNICAST_ADDRESS ua)
+{
+    char buf[256];
+    int family = ua->Address.lpSockaddr->sa_family;
+
+    memset(buf, 0, sizeof(buf));
+    getnameinfo(ua->Address.lpSockaddr, ua->Address.iSockaddrLength, buf, sizeof(buf), NULL, 0,NI_NUMERICHOST);
+    WINE_TRACE("%d. %s: %s\n", sock_cnt, family == AF_INET ? "IPv4":"IPv6", buf);
+}
+
+static BOOL create_directplay_sockets(void)
+{
+    ULONG block = 1;
+    int broad = 1;
+    DWORD rv, size;
+    PIP_ADAPTER_ADDRESSES adapter_addresses, aa;
+    PIP_ADAPTER_UNICAST_ADDRESS ua;
+
+    socks = HeapAlloc(GetProcessHeap(), 0, sock_max * sizeof(SOCKET));
+    if (!socks)
+    {
+        WINE_ERR("Out of memory.\n");
+        return FALSE;
+    }
+
+    rv = GetAdaptersAddresses(AF_UNSPEC, GAA_FLAG_INCLUDE_PREFIX, NULL, NULL, &size);
+    if (rv != ERROR_BUFFER_OVERFLOW)
+    {
+        WINE_ERR("GetAdaptersAddresses() failed.\n");
+        return FALSE;
+    }
+
+    adapter_addresses = HeapAlloc(GetProcessHeap(), 0, size);
+    if (!adapter_addresses)
+    {
+        WINE_ERR("Out of memory.\n");
+        return FALSE;
+    }
+
+    rv = GetAdaptersAddresses(AF_UNSPEC, GAA_FLAG_INCLUDE_PREFIX, NULL, adapter_addresses, &size);
+    if (rv != ERROR_SUCCESS)
+    {
+        WINE_ERR("GetAdaptersAddresses() failed.\n");
+        free(adapter_addresses);
+        return FALSE;
+    }
+
+    for (aa = adapter_addresses; aa != NULL; aa = aa->Next)
+    {
+        if (aa->IfType == IF_TYPE_ETHERNET_CSMACD)
+        {
+            for (ua = aa->FirstUnicastAddress; ua != NULL; ua = ua->Next)
+            {
+                print_addr(ua);
+
+                socks[sock_cnt] = socket(ua->Address.lpSockaddr->sa_family, SOCK_DGRAM, IPPROTO_UDP);
+                if (socks[sock_cnt] == -1)
+                {
+                    WINE_ERR("Failed to create socket %d.\n", WSAGetLastError());
+                    continue;
+                }
+
+                broad = 1;
+                setsockopt(socks[sock_cnt], SOL_SOCKET, SO_BROADCAST, (char *)&broad, sizeof(broad));
+
+                if(ua->Address.lpSockaddr->sa_family == AF_INET)
+                    ((struct sockaddr_in*)ua->Address.lpSockaddr)->sin_port = htons(DPNA_DPNSVR_PORT);
+                else
+                {
+                    int value = 1;
+
+                    /* Window/Linux have different defaults for binding only to ipv6, always set
+                     *  this value since it can be changed via /proc
+                     */
+                    setsockopt(socks[sock_cnt], IPPROTO_IPV6, IPV6_V6ONLY, (char *)&value, sizeof(value));
+                    ((struct sockaddr_in6*)ua->Address.lpSockaddr)->sin6_port = htons(DPNA_DPNSVR_PORT);
+                }
+
+                if (bind(socks[sock_cnt], ua->Address.lpSockaddr, ua->Address.iSockaddrLength) != 0)
+                {
+                    WINE_ERR("Failed to bind socket %d.\n", WSAGetLastError());
+                    closesocket(socks[sock_cnt]);
+                    continue;
+                }
+
+                ioctlsocket(socks[sock_cnt], FIONBIO, &block);
+                listen(socks[sock_cnt], 10);
+
+                sock_cnt++;
+            }
+        }
+    }
+
+    HeapFree(GetProcessHeap(), 0, adapter_addresses);
+
+    return TRUE;
+}
+
 int __cdecl wmain(int argc, WCHAR *argv[])
 {
-    int i;
+    WSADATA data;
+    int i, loop = 0;
+
+    if (WSAStartup(MAKEWORD(2, 2), &data))
+        return 1;
+
+    create_directplay_sockets();
+
+    while(loop < 30)
+    {
+        for(i=0; i < sock_cnt; i++)
+        {
+            SIZE_T nread = BUF_SIZE;
+            char buf[BUF_SIZE];
+            nread = recv(socks[i], buf, nread, 0);
+            if(nread != -1)
+            {
+                WINE_FIXME("Read data on socket %d bytes %ld\n", i, nread);
+                break;
+            }
+            else if(WSAGetLastError() != WSAEWOULDBLOCK)
+                WINE_ERR("Error %d.\n", WSAGetLastError());
+        }
+
+        WINE_FIXME("Sleeping...\n");
+        Sleep(1000);
+        loop++;
+    }
+
+    for(i=0; i < sock_cnt; i++)
+    {
+        closesocket(socks[i]);
+    }
 
-    WINE_FIXME("stub:");
-    for (i = 0; i < argc; i++)
-        WINE_FIXME(" %s", wine_dbgstr_w(argv[i]));
-    WINE_FIXME("\n");
+    HeapFree(GetProcessHeap(), 0, socks);
 
+    WSACleanup();
     return 0;
 }
-- 
2.30.2

