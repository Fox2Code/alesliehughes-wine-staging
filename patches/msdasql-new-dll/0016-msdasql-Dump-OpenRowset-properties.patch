From 8ccb0b8baccb0f6407856dc22399832bae8d6836 Mon Sep 17 00:00:00 2001
From: Alistair Leslie-Hughes <leslie_alistair@hotmail.com>
Date: Wed, 21 Oct 2020 16:09:36 +1100
Subject: msdasql: Dump OpenRowset properties


diff --git a/dlls/msdasql/session.c b/dlls/msdasql/session.c
index fde335e6ae9..03a7d859309 100644
--- a/dlls/msdasql/session.c
+++ b/dlls/msdasql/session.c
@@ -173,13 +173,63 @@ ULONG WINAPI openrowset_Release(IOpenRowset *iface)
     return IUnknown_Release(&session->session_iface);
 }
 
+static const char *get_property_value(DWORD property)
+{
+    switch(property)
+    {
+#define FMT_TO_STR(property) case property: return #property
+
+        FMT_TO_STR(DBPROP_AUTH_MASK_PASSWORD);
+        FMT_TO_STR(DBPROP_BLOCKINGSTORAGEOBJECTS);
+
+        FMT_TO_STR(DBPROP_IColumnsRowset);
+        FMT_TO_STR(DBPROP_IRowset);
+        FMT_TO_STR(DBPROP_IRowsetCurrentIndex);
+        FMT_TO_STR(DBPROP_IRowsetChange);
+        FMT_TO_STR(DBPROP_IRowsetIndex);
+        FMT_TO_STR(DBPROP_IRowsetUpdate);
+        FMT_TO_STR(DBPROP_ISequentialStream);
+        FMT_TO_STR(DBPROP_OWNUPDATEDELETE);
+        FMT_TO_STR(DBPROP_UPDATABILITY);
+        default:
+            FIXME("Unknown value 0x%08x\n", property);
+            return "Unknown";
+    }
+}
+
 HRESULT WINAPI openrowset_OpenRowset(IOpenRowset *iface, IUnknown *pUnkOuter, DBID *table,
             DBID *index, REFIID riid, ULONG count, DBPROPSET propertysets[], IUnknown **rowset)
 {
     struct msdasql_session *session = impl_from_IOpenRowset( iface );
+    int i, j;
+
     FIXME("%p, %p, %p %p %s, %d %p %p stub\n", session, pUnkOuter, table, index, debugstr_guid(riid),
             count, propertysets, rowset);
 
+    if (table)
+        FIXME("table eKind %d %s %s\n", table->eKind, debugstr_guid(&table->uGuid.guid), debugstr_w(table->uName.pwszName));
+
+    if (index)
+        FIXME("index eKind %d %s %s\n", index->eKind, debugstr_guid(&index->uGuid.guid), debugstr_w(index->uName.pwszName));
+
+    for (j=0; j < count; j++)
+    {
+        for (i=0; i < propertysets[j].cProperties; i++)
+        {
+            FIXME("Property Set %d\n", i);
+            FIXME("  dwPropertyID: %s (%d)\n", get_property_value(propertysets[j].rgProperties[i].dwPropertyID),
+                    V_VT(&propertysets[j].rgProperties[i].vValue));
+            if (V_VT(&propertysets[j].rgProperties[i].vValue) == VT_BSTR)
+                FIXME("  vValue: %s\n", debugstr_w(V_BSTR(&propertysets[j].rgProperties[i].vValue)));
+            else if (V_VT(&propertysets[j].rgProperties[i].vValue) == VT_BOOL)
+                FIXME("  vValue: %s\n", V_BOOL(&propertysets[j].rgProperties[i].vValue) == VARIANT_TRUE ? "True" : "False");
+            else
+                FIXME("  vValue: %d\n", V_I4(&propertysets[j].rgProperties[i].vValue));
+            //FIXME("  cPropertyIDs:  %d\n", rgPropertySets->rgProperties[i].cPropertyIDs);
+            //FIXME("  guidPropertySet: %s\n", rgPropertySets(&rgPropertyIDSets[i].guidPropertySet) );
+        }
+    }
+
     return E_NOTIMPL;
 }
 
