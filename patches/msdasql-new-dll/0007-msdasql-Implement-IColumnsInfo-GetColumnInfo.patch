From f552754d92cd0e4416adda70b9fa025721c531c2 Mon Sep 17 00:00:00 2001
From: Alistair Leslie-Hughes <leslie_alistair@hotmail.com>
Date: Thu, 11 Nov 2021 13:38:12 +1100
Subject: [PATCH] msdasql: Implement IColumnsInfo GetColumnInfo

Signed-off-by: Alistair Leslie-Hughes <leslie_alistair@hotmail.com>
---
 dlls/msdasql/session.c | 232 ++++++++++++++++++++++++++++++++++++++++-
 1 file changed, 230 insertions(+), 2 deletions(-)

diff --git a/dlls/msdasql/session.c b/dlls/msdasql/session.c
index 7424d14c765..4fa6c3afa56 100644
--- a/dlls/msdasql/session.c
+++ b/dlls/msdasql/session.c
@@ -129,6 +129,154 @@ static struct msdasql_prop msdasql_init_props[] =
     { DBPROP_BLOCKINGSTORAGEOBJECTS,          DBPROPFLAGS_DATASOURCEINFO | DBPROPFLAGS_READ | DBPROPFLAGS_WRITE, VT_BOOL, VARIANT_FALSE },
 };
 
+#define SQLTYPE_TO_STR(x) case x: return #x
+
+static const char *debugstr_sqltype(SQLSMALLINT type)
+{
+    switch (type)
+    {
+        SQLTYPE_TO_STR(SQL_DECIMAL);
+        SQLTYPE_TO_STR(SQL_CHAR);
+        SQLTYPE_TO_STR(SQL_VARCHAR);
+        SQLTYPE_TO_STR(SQL_LONGVARCHAR);
+        SQLTYPE_TO_STR(SQL_NUMERIC);
+        SQLTYPE_TO_STR(SQL_GUID);
+        SQLTYPE_TO_STR(SQL_TINYINT);
+        SQLTYPE_TO_STR(SQL_SMALLINT);
+        SQLTYPE_TO_STR(SQL_INTEGER);
+        SQLTYPE_TO_STR(SQL_REAL);
+        SQLTYPE_TO_STR(SQL_FLOAT);
+        SQLTYPE_TO_STR(SQL_DOUBLE);
+        SQLTYPE_TO_STR(SQL_BINARY);
+        SQLTYPE_TO_STR(SQL_VARBINARY);
+        SQLTYPE_TO_STR(SQL_LONGVARBINARY);
+        SQLTYPE_TO_STR(SQL_TYPE_DATE);
+        SQLTYPE_TO_STR(SQL_DATE);
+        SQLTYPE_TO_STR(SQL_TIME);
+        SQLTYPE_TO_STR(SQL_TYPE_TIMESTAMP);
+        SQLTYPE_TO_STR(SQL_TIMESTAMP);
+        SQLTYPE_TO_STR(SQL_TYPE_TIME);
+        SQLTYPE_TO_STR(SQL_BIGINT);
+        SQLTYPE_TO_STR(SQL_C_SBIGINT);
+        SQLTYPE_TO_STR(SQL_C_SLONG);
+        SQLTYPE_TO_STR(SQL_C_ULONG);
+        SQLTYPE_TO_STR(SQL_WLONGVARCHAR);
+        SQLTYPE_TO_STR(SQL_WCHAR);
+        SQLTYPE_TO_STR(SQL_WVARCHAR);
+        default:
+             return "Unknown";
+    }
+}
+
+static const char *debugstr_dbtype(DBTYPE type)
+{
+    switch(type)
+    {
+        SQLTYPE_TO_STR(DBTYPE_NUMERIC);
+        SQLTYPE_TO_STR(DBTYPE_STR);
+        SQLTYPE_TO_STR(DBTYPE_GUID);
+        SQLTYPE_TO_STR(DBTYPE_I1);
+        SQLTYPE_TO_STR(DBTYPE_I2);
+        SQLTYPE_TO_STR(DBTYPE_UI2);
+        SQLTYPE_TO_STR(DBTYPE_I4);
+        SQLTYPE_TO_STR(DBTYPE_I8);
+        SQLTYPE_TO_STR(DBTYPE_UI4);
+        SQLTYPE_TO_STR(DBTYPE_R4);
+        SQLTYPE_TO_STR(DBTYPE_R8);
+        SQLTYPE_TO_STR(DBTYPE_BYTES);
+        SQLTYPE_TO_STR(DBTYPE_DBDATE);
+        SQLTYPE_TO_STR(DBTYPE_DBTIME);
+        SQLTYPE_TO_STR(DBTYPE_DATE);
+        SQLTYPE_TO_STR(DBTYPE_DBTIMESTAMP);
+        SQLTYPE_TO_STR(DBTYPE_WSTR);
+        default:
+             return "Unknown";
+    }
+}
+
+static SQLSMALLINT sqltype_to_bindtype(SQLSMALLINT type, BOOL sign)
+{
+    switch (type)
+    {
+        case SQL_DECIMAL:
+            return DBTYPE_NUMERIC;
+        case SQL_CHAR:
+        case SQL_VARCHAR:
+        case SQL_LONGVARCHAR:
+        case SQL_NUMERIC:
+            return DBTYPE_STR;
+        case SQL_GUID:
+            return DBTYPE_GUID;
+        case SQL_TINYINT:
+            return DBTYPE_I1;
+        case SQL_SMALLINT:
+            return sign ? DBTYPE_I2 : DBTYPE_UI2;
+        case SQL_INTEGER:
+            return sign ? DBTYPE_I4 : DBTYPE_UI4;
+        case SQL_REAL:
+            return DBTYPE_R4;
+        case SQL_FLOAT:
+        case SQL_DOUBLE:
+            return DBTYPE_R8;
+        case SQL_BINARY:
+        case SQL_VARBINARY:
+        case SQL_LONGVARBINARY:
+            return DBTYPE_BYTES;
+        case SQL_TYPE_DATE:
+            return DBTYPE_DBDATE;
+        case SQL_DATE:
+            return DBTYPE_DBTIME;
+        case SQL_TIME:
+            return DBTYPE_DATE;
+        case SQL_TYPE_TIMESTAMP:
+        case SQL_TIMESTAMP:
+            return DBTYPE_DBTIMESTAMP;
+        case SQL_TYPE_TIME:
+            return DBTYPE_DBTIME;
+        case SQL_BIGINT:
+        case SQL_C_SBIGINT:
+            return DBTYPE_I8;
+        case SQL_C_SLONG:
+            return DBTYPE_I4;
+        case SQL_C_ULONG:
+            return DBTYPE_UI4;
+        case SQL_WLONGVARCHAR:
+        case SQL_WCHAR:
+        case SQL_WVARCHAR:
+            return DBTYPE_WSTR;
+        default:
+            FIXME("Unsupported type %i\n", type);
+    }
+
+    return DBTYPE_I4;
+}
+
+static BOOL is_variable_length(SQLSMALLINT type)
+{
+    switch(type)
+    {
+        case SQL_LONGVARCHAR:
+        case SQL_WLONGVARCHAR:
+        case SQL_LONGVARBINARY:
+            return TRUE;
+    }
+    return FALSE;
+}
+
+static BOOL is_fixed_legnth(SQLSMALLINT type)
+{
+    switch(type)
+    {
+        case SQL_LONGVARCHAR:
+        case SQL_WLONGVARCHAR:
+        case SQL_WVARCHAR:
+        case SQL_LONGVARBINARY:
+        case SQL_VARBINARY:
+            return FALSE;
+    }
+    return TRUE;
+}
+
 struct msdasql_session
 {
     IUnknown session_iface;
@@ -817,8 +965,88 @@ static HRESULT WINAPI rowset_colsinfo_GetColumnInfo(IColumnsInfo *iface, DBORDIN
         DBCOLUMNINFO **colinfo, OLECHAR **stringsbuffer)
 {
     struct msdasql_rowset *rowset = rowset_impl_from_IColumnsInfo( iface );
-    FIXME("%p, %p, %p, %p\n", rowset, columns, colinfo, stringsbuffer);
-    return E_NOTIMPL;
+    DBCOLUMNINFO *dbcolumn;
+    RETCODE ret;
+    SQLSMALLINT colcnt;
+    int i;
+    OLECHAR *ptr;
+
+    TRACE("%p, %p, %p, %p\n", rowset, columns, colinfo, stringsbuffer);
+
+    SQLNumResultCols(rowset->hstmt, &colcnt);
+    TRACE("SQLNumResultCols %d\n", colcnt);
+
+    *columns = colcnt;
+
+    ptr = *stringsbuffer = CoTaskMemAlloc(colcnt * 256 * sizeof(WCHAR));
+    dbcolumn = CoTaskMemAlloc(colcnt * sizeof(DBCOLUMNINFO));
+
+    for (i = 0; i < colcnt; i++)
+    {
+        SQLWCHAR      columnname[256];
+        SQLSMALLINT   ColumnNameLen;
+        SQLSMALLINT   ColumnDataType;
+        SQLULEN       ColumnDataSize;
+        SQLSMALLINT   ColumnDataDigits;
+        SQLSMALLINT   ColumnDataNullable;
+
+        ret = SQLDescribeColW(rowset->hstmt, i+1, columnname, 256, &ColumnNameLen, &ColumnDataType,
+                    &ColumnDataSize, &ColumnDataDigits, &ColumnDataNullable);
+        if (SQL_SUCCEEDED(ret))
+        {
+            SQLLEN  length;
+
+            TRACE("%d: Column Name : %s, Column Name Len : %i, SQL Data Type : %i, Data Size : %i, DecimalDigits : %i, Nullable %i\n",
+                 i, debugstr_w(columnname), (int)ColumnNameLen, (int)ColumnDataType, (int)ColumnDataSize, (int)ColumnDataDigits,
+                 (int)ColumnDataNullable);
+            lstrcpyW(ptr, columnname);
+
+            dbcolumn[i].pwszName = ptr;
+            dbcolumn[i].pTypeInfo = NULL;
+            dbcolumn[i].iOrdinal = i+1;
+
+            ret = SQLColAttribute(rowset->hstmt, i+1, SQL_DESC_UNSIGNED, NULL, 0, NULL, &length);
+
+            dbcolumn[i].wType = sqltype_to_bindtype(ColumnDataType, length == SQL_FALSE);
+            TRACE("SQLType %s -> %s\n", debugstr_sqltype(ColumnDataType), debugstr_dbtype(dbcolumn[i].wType));
+
+            /* Since we don't support IRowsetChange:SetData, DBCOLUMNFLAGS_WRITEUNKNOWN must be set */
+            dbcolumn[i].dwFlags = DBCOLUMNFLAGS_WRITEUNKNOWN;
+
+            ret = SQLColAttribute(rowset->hstmt, i+1, SQL_DESC_LENGTH, NULL, 0, NULL, &length);
+            dbcolumn[i].ulColumnSize = length;
+
+            if (dbcolumn[i].ulColumnSize > 1024 && is_variable_length(ColumnDataType))
+                dbcolumn[i].dwFlags |= DBCOLUMNFLAGS_MAYDEFER | DBCOLUMNFLAGS_ISLONG;
+
+            if (ColumnDataNullable)
+                dbcolumn[i].dwFlags |= DBCOLUMNFLAGS_ISNULLABLE | DBCOLUMNFLAGS_MAYBENULL;
+
+            if (is_fixed_legnth(ColumnDataType))
+                dbcolumn[i].dwFlags |= DBCOLUMNFLAGS_ISFIXEDLENGTH;
+
+            ret = SQLColAttribute(rowset->hstmt, i+1, SQL_DESC_SCALE, NULL, 0, NULL, &length);
+            if (length == 0)
+                length = 255;
+            dbcolumn[i].bScale = length;
+
+            ret = SQLColAttribute(rowset->hstmt, i+1, SQL_DESC_PRECISION, NULL, 0, NULL, &length);
+            if (length == 0)
+                length = 255;
+            dbcolumn[i].bPrecision= length;
+
+            dbcolumn[i].columnid.eKind = DBKIND_NAME;
+            dbcolumn[i].columnid.uName.pwszName = ptr;
+
+            ptr += ColumnNameLen + 1;
+        }
+        else
+            ERR("Failed %d\n", ret);
+    }
+
+    *colinfo = dbcolumn;
+
+    return S_OK;
 }
 
 static HRESULT WINAPI rowset_colsinfo_MapColumnIDs(IColumnsInfo *iface, DBORDINAL column_ids,
-- 
2.35.1

