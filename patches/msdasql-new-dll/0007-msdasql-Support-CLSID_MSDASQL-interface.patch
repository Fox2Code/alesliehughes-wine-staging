From 32c82c6d0f5eca3b5fe022909acb7707f9ded87f Mon Sep 17 00:00:00 2001
From: Alistair Leslie-Hughes <leslie_alistair@hotmail.com>
Date: Wed, 18 Mar 2020 15:08:20 +1100
Subject: [PATCH 07/42] msdasql: Support CLSID_MSDASQL interface

---
 dlls/msdasql/msdasql_main.c | 109 ++++++++++++++++++++++++++++++++++++
 1 file changed, 109 insertions(+)

diff --git a/dlls/msdasql/msdasql_main.c b/dlls/msdasql/msdasql_main.c
index 793f96a8580..e48d49375af 100644
--- a/dlls/msdasql/msdasql_main.c
+++ b/dlls/msdasql/msdasql_main.c
@@ -70,6 +70,7 @@ static ULONG WINAPI ClassFactory_Release(IClassFactory *iface)
 }
 
 static HRESULT create_msdasql_provider(REFIID riid, void **ppv);
+static HRESULT create_msdasql_enumerator(REFIID riid, void **ppv);
 
 HRESULT WINAPI ClassFactory_CreateInstance(IClassFactory *iface, IUnknown *outer, REFIID riid, void **ppv)
 {
@@ -92,7 +93,23 @@ static const IClassFactoryVtbl cffactoryVtbl = {
     ClassFactory_LockServer
 };
 
+HRESULT WINAPI enumerationcf_CreateInstance(IClassFactory *iface, IUnknown *outer, REFIID riid, void **ppv)
+{
+    FIXME("(%p %s %p)\n", outer, debugstr_guid(riid), ppv);
+
+    return create_msdasql_enumerator(riid, ppv);
+}
+
+static const IClassFactoryVtbl enumfactoryVtbl = {
+    ClassFactory_QueryInterface,
+    ClassFactory_AddRef,
+    ClassFactory_Release,
+    enumerationcf_CreateInstance,
+    ClassFactory_LockServer
+};
+
 static IClassFactory cffactory = { &cffactoryVtbl };
+static IClassFactory enumfactory = { &enumfactoryVtbl };
 
 HRESULT WINAPI DllGetClassObject( REFCLSID rclsid, REFIID riid, void **ppv )
 {
@@ -100,6 +117,8 @@ HRESULT WINAPI DllGetClassObject( REFCLSID rclsid, REFIID riid, void **ppv )
 
     if (IsEqualGUID(&CLSID_MSDASQL, rclsid))
         return IClassFactory_QueryInterface(&cffactory, riid, ppv);
+    else if (IsEqualGUID(&CLSID_MSDASQL_ENUMERATOR, rclsid))
+        return IClassFactory_QueryInterface(&enumfactory, riid, ppv);
 
     return CLASS_E_CLASSNOTAVAILABLE;
 }
@@ -408,4 +427,94 @@ static HRESULT create_msdasql_provider(REFIID riid, void **ppv)
     return hr;
 }
 
+struct msdasql_enum
+{
+    ISourcesRowset ISourcesRowset_iface;
+    LONG ref;
+};
+
+static inline struct msdasql_enum *msdasql_enum_from_ISourcesRowset(ISourcesRowset *iface)
+{
+    return CONTAINING_RECORD(iface, struct msdasql_enum, ISourcesRowset_iface);
+}
+
+static HRESULT WINAPI msdasql_enum_QueryInterface(ISourcesRowset *iface, REFIID riid, void **out)
+{
+    struct msdasql_enum *enumerator = msdasql_enum_from_ISourcesRowset(iface);
+
+    TRACE("(%p)->(%s %p)\n", enumerator, debugstr_guid(riid), out);
+
+    if(IsEqualGUID(riid, &IID_IUnknown) ||
+        IsEqualGUID(riid, &IID_ISourcesRowset ) )
+    {
+        *out = &enumerator->ISourcesRowset_iface;
+    }
+    else
+    {
+        FIXME("(%s, %p)\n", debugstr_guid(riid), out);
+        *out = NULL;
+        return E_NOINTERFACE;
+    }
+
+    IUnknown_AddRef((IUnknown*)*out);
+    return S_OK;
+}
+
+static ULONG WINAPI msdasql_enum_AddRef(ISourcesRowset *iface)
+{
+    struct msdasql_enum *enumerator = msdasql_enum_from_ISourcesRowset(iface);
+    ULONG ref = InterlockedIncrement(&enumerator->ref);
+
+    TRACE("(%p) ref=%u\n", enumerator, ref);
+
+    return ref;
+}
+
+static ULONG WINAPI msdasql_enum_Release(ISourcesRowset *iface)
+{
+    struct msdasql_enum *enumerator = msdasql_enum_from_ISourcesRowset(iface);
+    ULONG ref = InterlockedDecrement(&enumerator->ref);
+
+    TRACE("(%p) ref=%u\n", enumerator, ref);
+
+    if (!ref)
+    {
+        heap_free(enumerator);
+    }
+
+    return ref;
+}
+
+static HRESULT WINAPI msdasql_enum_GetSourcesRowset(ISourcesRowset *iface, IUnknown *outer, REFIID riid, ULONG sets,
+                DBPROPSET properties[], IUnknown **rowset)
+{
+    struct msdasql_enum *enumerator = msdasql_enum_from_ISourcesRowset(iface);
+    FIXME("(%p) %p, %s, %d, %p, %p\n", enumerator, outer, debugstr_guid(riid), sets, properties, rowset);
+
+    return E_NOTIMPL;
+}
+
+static const ISourcesRowsetVtbl msdsqlenum_vtbl =
+{
+    msdasql_enum_QueryInterface,
+    msdasql_enum_AddRef,
+    msdasql_enum_Release,
+    msdasql_enum_GetSourcesRowset
+};
+
+static HRESULT create_msdasql_enumerator(REFIID riid, void **ppv)
+{
+    struct msdasql_enum *enumerator;
+    HRESULT hr;
+
+    enumerator = heap_alloc(sizeof(struct msdasql));
+    if (!enumerator)
+        return E_OUTOFMEMORY;
+
+    enumerator->ISourcesRowset_iface.lpVtbl = &msdsqlenum_vtbl;
+    enumerator->ref = 1;
 
+    hr = IUnknown_QueryInterface(&enumerator->ISourcesRowset_iface, riid, ppv);
+    IUnknown_Release(&enumerator->ISourcesRowset_iface);
+    return hr;
+}
\ No newline at end of file
-- 
2.30.2

