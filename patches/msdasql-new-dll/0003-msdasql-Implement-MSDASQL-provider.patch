From 52e713f8901407ffdfb3def0264cf46f4b420d95 Mon Sep 17 00:00:00 2001
From: Alistair Leslie-Hughes <leslie_alistair@hotmail.com>
Date: Tue, 17 Dec 2019 15:42:32 +1100
Subject: [PATCH] msdasql: Implement MSDASQL provider

---
 dlls/msdasql/msdasql_main.c | 163 +++++++++++++++++++++++++++++++++++-
 1 file changed, 161 insertions(+), 2 deletions(-)

diff --git a/dlls/msdasql/msdasql_main.c b/dlls/msdasql/msdasql_main.c
index ad662137667..677eb157313 100644
--- a/dlls/msdasql/msdasql_main.c
+++ b/dlls/msdasql/msdasql_main.c
@@ -24,6 +24,7 @@
 #include "winbase.h"
 #include "objbase.h"
 #include "rpcproxy.h"
+#include "wine/heap.h"
 #include "wine/debug.h"
 
 #include "initguid.h"
@@ -104,11 +105,13 @@ static ULONG WINAPI ClassFactory_Release(IClassFactory *iface)
     return 1;
 }
 
+static HRESULT create_msdasql_provider(REFIID riid, void **ppv);
+
 HRESULT WINAPI ClassFactory_CreateInstance(IClassFactory *iface, IUnknown *outer, REFIID riid, void **ppv)
 {
     FIXME("(%p %s %p)\n", outer, debugstr_guid(riid), ppv);
 
-    return CLASS_E_CLASSNOTAVAILABLE;
+    return create_msdasql_provider(riid, ppv);
 }
 
 static HRESULT WINAPI ClassFactory_LockServer(IClassFactory *iface, BOOL fLock)
@@ -130,5 +133,161 @@ static IClassFactory cffactory = { &cffactoryVtbl };
 HRESULT WINAPI DllGetClassObject( REFCLSID rclsid, REFIID riid, void **ppv )
 {
     FIXME("%s %s %p\n", debugstr_guid(rclsid), debugstr_guid(riid), ppv);
-    return IClassFactory_QueryInterface(&cffactory, riid, ppv);
+
+    if (IsEqualGUID(&CLSID_MSDASQL, rclsid))
+        return IClassFactory_QueryInterface(&cffactory, riid, ppv);
+
+    return CLASS_E_CLASSNOTAVAILABLE;
+}
+
+struct msdasql
+{
+    IUnknown         MSDASQL_iface;
+
+/*    IDBCreateSession IDBCreateSession_iface;
+    IDBInitialize    IDBInitialize_iface;
+    IDBProperties    IDBProperties_iface;*/
+
+    LONG     ref;
+};
+
+static inline struct msdasql *impl_from_IUnknown(IUnknown *iface)
+{
+    return CONTAINING_RECORD(iface, struct msdasql, MSDASQL_iface);
+}
+
+static HRESULT WINAPI msdsql_QueryInterface(IUnknown *iface, REFIID riid, void **out)
+{
+    struct msdasql *provider = impl_from_IUnknown(iface);
+
+    TRACE("(%p)->(%s %p)\n", provider, debugstr_guid(riid), out);
+
+    if(IsEqualGUID(riid, &IID_IUnknown) ||
+       IsEqualGUID(riid, &CLSID_MSDASQL))
+    {
+        *out = &provider->MSDASQL_iface;
+    }
+    else
+    {
+        FIXME("(%s, %p)\n", debugstr_guid(riid), out);
+        *out = NULL;
+        return E_NOINTERFACE;
+    }
+
+    IUnknown_AddRef((IUnknown*)*out);
+    return S_OK;
+}
+
+static ULONG WINAPI msdsql_AddRef(IUnknown *iface)
+{
+    struct msdasql *provider = impl_from_IUnknown(iface);
+    ULONG ref = InterlockedIncrement(&provider->ref);
+
+    TRACE("(%p) ref=%u\n", provider, ref);
+
+    return ref;
+}
+
+static ULONG  WINAPI msdsql_Release(IUnknown *iface)
+{
+    struct msdasql *provider = impl_from_IUnknown(iface);
+    ULONG ref = InterlockedDecrement(&provider->ref);
+
+    TRACE("(%p) ref=%u\n", provider, ref);
+
+    if (!ref)
+    {
+        heap_free(provider);
+    }
+
+    return ref;
+}
+
+static const IUnknownVtbl msdsql_vtbl =
+{
+    msdsql_QueryInterface,
+    msdsql_AddRef,
+    msdsql_Release
+};
+
+static HRESULT WINAPI dbprops_QueryInterface(IDBProperties *iface, REFIID riid, void **ppvObject)
+{
+    struct msdasql *provider = impl_from_IDBProperties(iface);
+
+    return IUnknown_QueryInterface(&provider->MSDASQL_iface, riid, ppvObject);
+}
+
+static ULONG WINAPI dbprops_AddRef(IDBProperties *iface)
+{
+    struct msdasql *provider = impl_from_IDBProperties(iface);
+
+    return IUnknown_AddRef(&provider->MSDASQL_iface);
+}
+
+static ULONG WINAPI dbprops_Release(IDBProperties *iface)
+{
+    struct msdasql *provider = impl_from_IDBProperties(iface);
+
+    return IUnknown_Release(&provider->MSDASQL_iface);
+}
+
+static HRESULT WINAPI dbprops_GetProperties(IDBProperties *iface, ULONG cPropertyIDSets,
+            const DBPROPIDSET rgPropertyIDSets[], ULONG *pcPropertySets, DBPROPSET **prgPropertySets)
+{
+    struct msdasql *provider = impl_from_IDBProperties(iface);
+
+    FIXME("(%p)->(%d %p %p %p)\n", provider, cPropertyIDSets, rgPropertyIDSets, pcPropertySets, prgPropertySets);
+
+    return E_NOTIMPL;
 }
+
+static HRESULT WINAPI dbprops_GetPropertyInfo(IDBProperties *iface, ULONG cPropertyIDSets,
+            const DBPROPIDSET rgPropertyIDSets[], ULONG *pcPropertyInfoSets,
+            DBPROPINFOSET **prgPropertyInfoSets, OLECHAR **ppDescBuffer)
+{
+    struct msdasql *provider = impl_from_IDBProperties(iface);
+
+    FIXME("(%p)->(%d %p %p %p %p)\n", provider, cPropertyIDSets, rgPropertyIDSets, pcPropertyInfoSets,
+                prgPropertyInfoSets, ppDescBuffer);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI dbprops_SetProperties(IDBProperties *iface, ULONG cPropertySets,
+            DBPROPSET rgPropertySets[])
+{
+    struct msdasql *provider = impl_from_IDBProperties(iface);
+
+    FIXME("(%p)->(%d %p)\n", provider, cPropertySets, rgPropertySets);
+
+    return E_NOTIMPL;
+}
+
+static const struct IDBPropertiesVtbl dbprops_vtbl =
+{
+    dbprops_QueryInterface,
+    dbprops_AddRef,
+    dbprops_Release,
+    dbprops_GetProperties,
+    dbprops_GetPropertyInfo,
+    dbprops_SetProperties
+};
+
+static HRESULT create_msdasql_provider(REFIID riid, void **ppv)
+{
+    struct msdasql *provider;
+    HRESULT hr;
+
+    provider = heap_alloc(sizeof(struct msdasql));
+    if (!provider)
+        return E_OUTOFMEMORY;
+
+    provider->MSDASQL_iface.lpVtbl = &msdsql_vtbl;
+    provider->ref = 1;
+
+    hr = IUnknown_QueryInterface(&provider->MSDASQL_iface, riid, ppv);
+    IUnknown_Release(&provider->MSDASQL_iface);
+    return hr;
+}
+
+
-- 
2.29.2

