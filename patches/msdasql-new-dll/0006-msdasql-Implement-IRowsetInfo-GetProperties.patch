From 7ebd4291d0ce2d6bcdd1a9967a3457f30ea64167 Mon Sep 17 00:00:00 2001
From: Alistair Leslie-Hughes <leslie_alistair@hotmail.com>
Date: Thu, 11 Nov 2021 14:52:24 +1100
Subject: [PATCH 06/13] msdasql: Implement IRowsetInfo GetProperties

Signed-off-by: Alistair Leslie-Hughes <leslie_alistair@hotmail.com>
---
 dlls/msdasql/session.c | 86 +++++++++++++++++++++++++++++++++++++++++-
 1 file changed, 84 insertions(+), 2 deletions(-)

diff --git a/dlls/msdasql/session.c b/dlls/msdasql/session.c
index 99073564a0d..8889499fd8b 100644
--- a/dlls/msdasql/session.c
+++ b/dlls/msdasql/session.c
@@ -815,8 +815,90 @@ static HRESULT WINAPI rowset_info_GetProperties(IRowsetInfo *iface, const ULONG
         const DBPROPIDSET propertyidsets[], ULONG *out_count, DBPROPSET **propertysets)
 {
     struct msdasql_rowset *rowset = impl_from_IRowsetInfo( iface );
-    FIXME("%p, %d, %p, %p, %p\n", rowset, count, propertyidsets, out_count, propertysets);
-    return E_NOTIMPL;
+    HRESULT hr = S_OK;
+    int i, j;
+    DBPROPSET *propset;
+
+    TRACE("%p, %d, %p, %p, %p\n", rowset, count, propertyidsets, out_count, propertysets);
+
+    propset = CoTaskMemAlloc(count * sizeof(DBPROPSET));
+    if (!propset)
+        return E_OUTOFMEMORY;
+
+    if (IsEqualGUID(&propertyidsets[0].guidPropertySet, &DBPROPSET_DATASOURCEINFO))
+    {
+        TRACE("Propertyset DBPROPSET_DATASOURCEINFO not supported\n");
+        propset->guidPropertySet = propertyidsets[0].guidPropertySet;
+        propset->cProperties = propertyidsets[0].cPropertyIDs;
+
+        propset->rgProperties = CoTaskMemAlloc(propset->cProperties * sizeof(DBPROP));
+
+        for (j=0; j < propset->cProperties; j++)
+        {
+            propset->rgProperties[j].dwPropertyID = propertyidsets[0].rgPropertyIDs[j];
+            propset->rgProperties[j].dwStatus = DBPROPSTATUS_NOTSUPPORTED;
+        }
+
+        *propertysets = propset;
+
+        return DB_E_ERRORSOCCURRED;
+    }
+
+    memset(propset, 0, count * sizeof(DBPROPSET));
+    for (i=0; i < count; i++)
+    {
+        FIXME("Property Set %d\n", i);
+        FIXME("  cPropertyIDs:  %d\n", propertyidsets[i].cPropertyIDs);
+        FIXME("  guidPropertySet: %s\n", debugstr_guid(&propertyidsets[i].guidPropertySet) );
+
+        propset[i].rgProperties = CoTaskMemAlloc(propertyidsets[i].cPropertyIDs * sizeof(DBPROP));
+        memset(propset[i].rgProperties, 0, propertyidsets[i].cPropertyIDs * sizeof(DBPROP));
+
+        propset[i].cProperties = propertyidsets[i].cPropertyIDs;
+        for (j=0; j < propertyidsets[i].cPropertyIDs; j++)
+        {
+            FIXME("  rgPropertyIDs[%d]: 0x%08x\n", j, propertyidsets[i].rgPropertyIDs[j]);
+
+            propset[i].rgProperties[j].dwPropertyID = propertyidsets[i].cPropertyIDs;
+            propset[i].rgProperties[j].dwOptions = DBPROPOPTIONS_OPTIONAL;
+            switch(propertyidsets[i].rgPropertyIDs[j])
+            {
+                case DBPROP_CANHOLDROWS:
+                case DBPROP_CANSCROLLBACKWARDS:
+                    V_VT(&propset[i].rgProperties[j].vValue) = VT_BOOL;
+                    V_BOOL(&propset[i].rgProperties[j].vValue) = VARIANT_FALSE;
+                    break;
+                case DBPROP_UPDATABILITY:
+                    V_VT(&propset[i].rgProperties[j].vValue) = VT_I4;
+                    V_I4(&propset[i].rgProperties[j].vValue) = 0;
+                    break;
+                case DBPROP_IRowsetUpdate:
+                case DBPROP_IRowsetResynch:
+                case DBPROP_IConnectionPointContainer:
+                case DBPROP_BOOKMARKSKIPPED:
+                case DBPROP_REMOVEDELETED:
+                    V_VT(&propset[i].rgProperties[j].vValue) = VT_BOOL;
+                    V_BOOL(&propset[i].rgProperties[j].vValue) = VARIANT_FALSE;
+                    break;
+                case DBPROP_AUTH_INTEGRATED:
+                    V_VT(&propset[i].rgProperties[j].vValue) = VT_I4;
+                    V_I4(&propset[i].rgProperties[j].vValue) = 13;
+                    break;
+
+                default:
+                    FIXME("Unknown Property 0x%08x\n", propertyidsets[i].rgPropertyIDs[j]);
+                case DBPROP_IRowsetCurrentIndex:
+                    V_VT(&propset[i].rgProperties[j].vValue) = VT_EMPTY;
+                    propset[i].rgProperties[j].dwStatus = DBPROPSTATUS_NOTSUPPORTED;
+                    hr = DB_S_ERRORSOCCURRED;
+            }
+        }
+    }
+
+    *propertysets = propset;
+    *out_count = count;
+
+    return hr;
 }
 
 static HRESULT WINAPI rowset_info_GetReferencedRowset(IRowsetInfo *iface, DBORDINAL ordinal,
-- 
2.33.0

