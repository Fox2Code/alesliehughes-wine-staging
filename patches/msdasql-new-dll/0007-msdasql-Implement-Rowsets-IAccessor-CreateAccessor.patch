From e9d839aa5dbe576ca15357b6619d65861bc5f214 Mon Sep 17 00:00:00 2001
From: Alistair Leslie-Hughes <leslie_alistair@hotmail.com>
Date: Sun, 14 Nov 2021 09:43:40 +1100
Subject: [PATCH 07/13] msdasql: Implement Rowsets IAccessor CreateAccessor

Signed-off-by: Alistair Leslie-Hughes <leslie_alistair@hotmail.com>
---
 dlls/msdasql/session.c | 96 ++++++++++++++++++++++++++++++++++++++++--
 1 file changed, 93 insertions(+), 3 deletions(-)

diff --git a/dlls/msdasql/session.c b/dlls/msdasql/session.c
index 8889499fd8b..e84aedd3a73 100644
--- a/dlls/msdasql/session.c
+++ b/dlls/msdasql/session.c
@@ -125,6 +125,26 @@ static const char *debugstr_dbtype(DBTYPE type)
     }
 }
 
+static SQLSMALLINT bindtype_to_sqltype(DBTYPE type)
+{
+    switch (type)
+    {
+        case DBTYPE_NUMERIC:
+            return SQL_DECIMAL;
+        case DBTYPE_I8:
+            return SQL_C_SBIGINT;
+        case DBTYPE_I4:
+            return SQL_C_SLONG;
+        case DBTYPE_WSTR:
+            return SQL_C_WCHAR;
+        case DBTYPE_DBTIMESTAMP:
+            return SQL_TYPE_TIMESTAMP;
+        default:
+            FIXME("Unsupported type %i\n", type);
+    }
+    return SQL_C_SLONG;
+}
+
 static SQLSMALLINT sqltype_to_bindtype(SQLSMALLINT type, BOOL sign)
 {
     switch (type)
@@ -623,6 +643,12 @@ static HRESULT WINAPI command_Cancel(ICommandText *iface)
     return E_NOTIMPL;
 }
 
+struct msdasql_accessor
+{
+    int size;
+    char *data;
+};
+
 struct msdasql_rowset
 {
     IRowset IRowset_iface;
@@ -633,6 +659,9 @@ struct msdasql_rowset
     IUnknown *caller;
     LONG refs;
 
+    DBBINDING *bindings;
+    DBCOUNTITEM bind_cnt;
+
     /* ODBC support */
     SQLHSTMT hstmt;
 };
@@ -1088,8 +1117,55 @@ static HRESULT WINAPI rowset_accessor_CreateAccessor(IAccessor *iface, DBACCESSO
         DBBINDSTATUS status[])
 {
     struct msdasql_rowset *rowset = impl_from_IAccessor( iface );
-    FIXME("%p 0x%08x, %lu, %p, %lu, %p, %p\n", rowset, flags, count, bindings, row_size, accessor, status);
-    return E_NOTIMPL;
+    int i;
+    struct msdasql_accessor *access;
+    char *ptr;
+    SQLSMALLINT type;
+
+    TRACE("%p 0x%08x, %lu, %p, %lu, %p, %p\n", rowset, flags, count, bindings, row_size, accessor, status);
+
+    heap_free(rowset->bindings); // ??? Varify.
+    rowset->bindings = heap_alloc(sizeof(DBBINDING) * count);
+    rowset->bind_cnt = count;
+
+    memcpy(rowset->bindings, bindings, sizeof(DBBINDING) * count);
+
+    access = heap_alloc( sizeof(struct msdasql_accessor));
+    access->size = 0;
+    ptr = access->data = heap_alloc(1024);
+    for ( i=0; i < count; i++)
+    {
+        SQLRETURN ret;
+
+        TRACE("ord %ld. Value %ld, Len %ld, status %ld, typeinfo %p, part %d, Owner %d, io %d,"
+              "Max %ld, flags %08x, type %d,  prec %d, sacle %d\n",
+                bindings[i].iOrdinal, bindings[i].obValue, bindings[i].obLength, bindings[i].obStatus,
+                bindings[i].pTypeInfo, bindings[i].dwPart, bindings[i].dwMemOwner, bindings[i].eParamIO,
+                bindings[i].cbMaxLen, bindings[i].dwFlags, bindings[i].wType, bindings[i].bPrecision,
+                bindings[i].bScale);
+
+        if (bindings[i].pObject)
+            FIXME("DBOBJECT 0x%08x, %s currently not supported\n", bindings[i].pObject->dwFlags,
+                    debugstr_guid(&bindings[i].pObject->iid));
+
+        type = bindtype_to_sqltype(bindings[i].wType);
+        ret = SQLBindCol(rowset->hstmt, bindings[i].iOrdinal, type, &ptr[bindings[i].obValue],
+                            bindings[i].cbMaxLen, (SQLLEN*)&ptr[bindings[i].obLength]);
+        if (ret != SQL_SUCCESS && ret != SQL_SUCCESS_WITH_INFO)
+        {
+            dump_sql_diag_records(SQL_HANDLE_STMT, rowset->hstmt);
+
+            heap_free(access->data);
+            heap_free(access);
+            return E_FAIL;
+        }
+    }
+
+    *accessor = (HACCESSOR)access;
+    if (status)
+         *status = DBBINDSTATUS_OK;
+
+    return S_OK;
 }
 
 static HRESULT WINAPI rowset_accessor_GetBindings(IAccessor *iface, HACCESSOR accessor,
@@ -1103,8 +1179,20 @@ static HRESULT WINAPI rowset_accessor_GetBindings(IAccessor *iface, HACCESSOR ac
 static HRESULT WINAPI rowset_accessor_ReleaseAccessor(IAccessor *iface, HACCESSOR accessor, DBREFCOUNT *count)
 {
     struct msdasql_rowset *rowset = impl_from_IAccessor( iface );
+    struct msdasql_accessor *access =(struct msdasql_accessor *)accessor;
+
     FIXME("%p, %lu, %p\n", rowset, accessor, count);
-    return E_NOTIMPL;
+
+    if (access)
+    {
+        heap_free(access->data);
+        heap_free(access);
+    }
+
+    if (count)
+        *count = 0;
+
+    return S_OK;
 }
 
 struct IAccessorVtbl accessor_vtbl =
@@ -1201,6 +1289,8 @@ static HRESULT WINAPI command_Execute(ICommandText *iface, IUnknown *outer, REFI
         msrowset->refs = 1;
         ICommandText_QueryInterface(iface, &IID_IUnknown, (void**)&msrowset->caller);
         msrowset->hstmt = hstmt;
+        msrowset->bindings = NULL;
+        msrowset->bind_cnt = 0;
     }
 
     if (affected)
-- 
2.33.0

