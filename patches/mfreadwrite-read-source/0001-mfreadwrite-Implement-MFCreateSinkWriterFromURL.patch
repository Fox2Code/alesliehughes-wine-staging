From e91eea56ee093a63ff0033000d345cd54c5b943c Mon Sep 17 00:00:00 2001
From: Alistair Leslie-Hughes <leslie_alistair@hotmail.com>
Date: Fri, 21 Dec 2018 10:39:59 +1100
Subject: [PATCH 1/4] mfreadwrite: Implement MFCreateSinkWriterFromURL

Wine-Bug: https://bugs.winehq.org/show_bug.cgi?id=45862
Wine-Bug: https://bugs.winehq.org/show_bug.cgi?id=48340 (?)

todo: tests
---
 dlls/mfreadwrite/writer.c | 194 +++++++++++++++++++++++++++++++++++++-
 1 file changed, 190 insertions(+), 4 deletions(-)

diff --git a/dlls/mfreadwrite/writer.c b/dlls/mfreadwrite/writer.c
index 6807ee26fbe..bf90acdf821 100644
--- a/dlls/mfreadwrite/writer.c
+++ b/dlls/mfreadwrite/writer.c
@@ -24,6 +24,7 @@
 #include "mfreadwrite.h"
 #include "mf_private.h"
 
+#include "wine/heap.h"
 #include "wine/debug.h"
 
 WINE_DEFAULT_DEBUG_CHANNEL(mfplat);
@@ -224,13 +225,198 @@ HRESULT WINAPI MFCreateSinkWriterFromMediaSink(IMFMediaSink *sink, IMFAttributes
     return create_sink_writer_from_sink(sink, attributes, &IID_IMFSinkWriter, (void **)writer);
 }
 
+struct mfsinkwriter
+{
+    IMFSinkWriterEx IMFSinkWriterEx_iface;
+    LONG ref;
+
+    IMFAttributes *attributes;
+};
+
+static inline struct mfsinkwriter *impl_from_IMFSinkWriterEx(IMFSinkWriterEx *iface)
+{
+    return CONTAINING_RECORD(iface, struct mfsinkwriter, IMFSinkWriterEx_iface);
+}
+
+static HRESULT WINAPI mfsinkwriter_QueryInterface(IMFSinkWriterEx *iface, REFIID riid, void **out)
+{
+    struct mfsinkwriter *This = impl_from_IMFSinkWriterEx(iface);
+
+    TRACE("(%p)->(%s %p)\n", This, debugstr_guid(riid), out);
+
+    if(IsEqualGUID(riid, &IID_IUnknown) ||
+       IsEqualGUID(riid, &IID_IMFSinkWriter) ||
+       IsEqualGUID(riid, &IID_IMFSinkWriterEx))
+    {
+        *out = &This->IMFSinkWriterEx_iface;
+    }
+    else
+    {
+        FIXME("(%s, %p)\n", debugstr_guid(riid), out);
+        *out = NULL;
+        return E_NOINTERFACE;
+    }
+
+    IUnknown_AddRef((IUnknown*)*out);
+    return S_OK;
+}
+
+static ULONG WINAPI mfsinkwriter_AddRef(IMFSinkWriterEx *iface)
+{
+    struct mfsinkwriter *This = impl_from_IMFSinkWriterEx(iface);
+    ULONG ref = InterlockedIncrement(&This->ref);
+
+    TRACE("(%p) ref=%u\n", This, ref);
+
+    return ref;
+}
+
+static ULONG WINAPI mfsinkwriter_Release(IMFSinkWriterEx *iface)
+{
+    struct mfsinkwriter *This = impl_from_IMFSinkWriterEx(iface);
+    ULONG ref = InterlockedDecrement(&This->ref);
+
+    TRACE("(%p) ref=%u\n", This, ref);
+
+    if (!ref)
+    {
+        if (This->attributes)
+            IMFAttributes_Release(This->attributes);
+        HeapFree(GetProcessHeap(), 0, This);
+    }
+
+    return ref;
+}
+
+static HRESULT WINAPI mfsinkwriter_AddStream(IMFSinkWriterEx *iface, IMFMediaType *type, DWORD *index)
+{
+    struct mfsinkwriter *This = impl_from_IMFSinkWriterEx(iface);
+    FIXME("%p, %p, %p\n", This, type, index);
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI mfsinkwriter_SetInputMediaType(IMFSinkWriterEx *iface, DWORD index, IMFMediaType *type, IMFAttributes *parameters)
+{
+    struct mfsinkwriter *This = impl_from_IMFSinkWriterEx(iface);
+    FIXME("%p, %d, %p, %p\n", This, index, type, parameters);
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI mfsinkwriter_BeginWriting(IMFSinkWriterEx *iface)
+{
+    struct mfsinkwriter *This = impl_from_IMFSinkWriterEx(iface);
+    FIXME("%p\n", This);
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI mfsinkwriter_WriteSample(IMFSinkWriterEx *iface, DWORD index, IMFSample *sample)
+{
+    struct mfsinkwriter *This = impl_from_IMFSinkWriterEx(iface);
+    FIXME("%p, %d, %p\n", This, index, sample);
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI mfsinkwriter_SendStreamTick(IMFSinkWriterEx *iface, DWORD index, LONGLONG timestamp)
+{
+    struct mfsinkwriter *This = impl_from_IMFSinkWriterEx(iface);
+    FIXME("%p, %d, %s\n", This, index, wine_dbgstr_longlong(timestamp));
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI mfsinkwriter_PlaceMarker(IMFSinkWriterEx *iface, DWORD index, void *context)
+{
+    struct mfsinkwriter *This = impl_from_IMFSinkWriterEx(iface);
+    FIXME("%p, %d, %p\n", This, index, context);
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI mfsinkwriter_NotifyEndOfSegment(IMFSinkWriterEx *iface, DWORD index)
+{
+    struct mfsinkwriter *This = impl_from_IMFSinkWriterEx(iface);
+    FIXME("%p, %d\n", This, index);
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI mfsinkwriter_Flush(IMFSinkWriterEx *iface, DWORD index)
+{
+    struct mfsinkwriter *This = impl_from_IMFSinkWriterEx(iface);
+    FIXME("%p, %d\n", This, index);
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI mfsinkwriter_Finalize(IMFSinkWriterEx *iface)
+{
+    struct mfsinkwriter *This = impl_from_IMFSinkWriterEx(iface);
+    FIXME("%p\n", This);
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI mfsinkwriter_GetServiceForStream(IMFSinkWriterEx *iface, DWORD index, REFGUID service,
+                    REFIID riid, void **object)
+{
+    struct mfsinkwriter *This = impl_from_IMFSinkWriterEx(iface);
+    FIXME("%p, %d, %s, %s, %p\n", This, index, debugstr_guid(service), debugstr_guid(riid), object);
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI mfsinkwriter_GetStatistics(IMFSinkWriterEx *iface, DWORD index, MF_SINK_WRITER_STATISTICS *stats)
+{
+    struct mfsinkwriter *This = impl_from_IMFSinkWriterEx(iface);
+    FIXME("%p, %d, %p\n", This, index, stats);
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI mfsinkwriter_GetTransformForStream(IMFSinkWriterEx *iface, DWORD index, DWORD tindex,
+                    GUID *category, IMFTransform **transform)
+{
+    struct mfsinkwriter *This = impl_from_IMFSinkWriterEx(iface);
+    FIXME("%p, %d, %d, %p, %p\n", This, index, tindex, category, transform);
+    return E_NOTIMPL;
+}
+
+static const IMFSinkWriterExVtbl mfsinkwriter_vtbl =
+{
+    mfsinkwriter_QueryInterface,
+    mfsinkwriter_AddRef,
+    mfsinkwriter_Release,
+    mfsinkwriter_AddStream,
+    mfsinkwriter_SetInputMediaType,
+    mfsinkwriter_BeginWriting,
+    mfsinkwriter_WriteSample,
+    mfsinkwriter_SendStreamTick,
+    mfsinkwriter_PlaceMarker,
+    mfsinkwriter_NotifyEndOfSegment,
+    mfsinkwriter_Flush,
+    mfsinkwriter_Finalize,
+    mfsinkwriter_GetServiceForStream,
+    mfsinkwriter_GetStatistics,
+    mfsinkwriter_GetTransformForStream
+};
+
 /***********************************************************************
  *      MFCreateSinkWriterFromURL (mfreadwrite.@)
  */
-HRESULT WINAPI MFCreateSinkWriterFromURL(const WCHAR *url, IMFByteStream *bytestream, IMFAttributes *attributes,
-        IMFSinkWriter **writer)
+HRESULT WINAPI MFCreateSinkWriterFromURL(LPCWSTR url, IMFByteStream *bytestream, IMFAttributes *attributes, IMFSinkWriter **writer)
 {
-    FIXME("%s, %p, %p, %p.\n", debugstr_w(url), bytestream, attributes, writer);
+    struct mfsinkwriter *object;
+    HRESULT hr;
 
-    return E_NOTIMPL;
+    TRACE("%s, %p, %p, %p\n", debugstr_w(url), bytestream, attributes, writer);
+
+    object = heap_alloc_zero( sizeof(*object) );
+    if (!object)
+        return E_OUTOFMEMORY;
+
+    object->ref = 1;
+    object->IMFSinkWriterEx_iface.lpVtbl = &mfsinkwriter_vtbl;
+
+    if (attributes)
+    {
+        IMFAttributes_AddRef(attributes);
+        object->attributes = attributes;
+    }
+
+    hr = IMFSinkWriterEx_QueryInterface(&object->IMFSinkWriterEx_iface, &IID_IMFSinkWriter, (void**)writer);
+    IMFSinkWriterEx_Release(&object->IMFSinkWriterEx_iface);
+    return hr;
 }
-- 
2.33.0

