From 970c7533e8017f8d1ef832903ed9375f348fd89b Mon Sep 17 00:00:00 2001
From: Alistair Leslie-Hughes <leslie_alistair@hotmail.com>
Date: Sat, 21 Jan 2017 07:46:12 +1100
Subject: [PATCH 32/42] dpnet: join multiple user data into one + INSTRUCT fix

---
 dlls/dpnet/client.c | 90 +++++++++++++++++++++++++++++++++++++----------------
 1 file changed, 64 insertions(+), 26 deletions(-)

diff --git a/dlls/dpnet/client.c b/dlls/dpnet/client.c
index d69561e..31e0c56 100644
--- a/dlls/dpnet/client.c
+++ b/dlls/dpnet/client.c
@@ -959,7 +959,7 @@ HRESULT dplay_connect(SOCKET sock, void *serveraddr, size_t addrsize, DWORD sess
                     }
                     case DN_MSG_INTERNAL_CONNECT_FAILED:
                     {
-                        struct DN_CONNCET_FAILED *failed = (struct DN_CONNCET_FAILED *)temp;
+                        struct DN_CONNCET_FAILED *failed = (struct DN_CONNCET_FAILED *)&dframe->type;
 
                         WARN("DN_MSG_INTERNAL_CONNECT_FAILED (0x%08x)\n", failed->hres);
 
@@ -990,21 +990,30 @@ HRESULT dplay_connect(SOCKET sock, void *serveraddr, size_t addrsize, DWORD sess
                         }
                         else
                         {
-                            DPNMSG_RECEIVE received;
+                            FIXME("1Command 0x%08x\n", packet->command);
 
-                            WARN("Passing on user data\n");
+                            if(packet->command & PACKET_COMMAND_END_MSG)
+                            {
+                                DPNMSG_RECEIVE received;
 
-                            received.dwSize             = sizeof(received);
-                            received.dpnidSender        = 0;
-                            received.pvPlayerContext    = NULL;
-                            received.pReceiveData       = &dframe->type;
-                            received.dwReceiveDataSize  = n - sizeof(struct DFRAME_PACKET);
-                            received.hBufferHandle      = 0;
-                            received.dwReceiveFlags     = 0;
+                                WARN("1Passing on user data\n");
+
+                                received.dwSize             = sizeof(received);
+                                received.dpnidSender        = 0;
+                                received.pvPlayerContext    = NULL;
+                                received.pReceiveData       = &dframe->type;
+                                received.dwReceiveDataSize  = n - sizeof(struct DFRAME_PACKET);
+                                received.hBufferHandle      = 0;
+                                received.dwReceiveFlags     = 0;
 
-                            hr = msghandler(NULL, DPN_MSGID_RECEIVE, &received);
-                            if(hr != S_OK)
-                                ERR("Message Handle for DPN_MSGID_RECEIVE failed (0x%08x).\n", hr);
+                                hr = msghandler(NULL, DPN_MSGID_RECEIVE, &received);
+                                if(hr != S_OK)
+                                    ERR("Message Handle for DPN_MSGID_RECEIVE failed (0x%08x).\n", hr);
+                            }
+                            else if(packet->command & PACKET_COMMAND_NEW_MSG)
+                            {
+                                WARN("1PACKET_COMMAND_NEW_MSG Only %lu\n", n - sizeof(struct DFRAME_PACKET));
+                            }
                         }
                     }
                 }
@@ -1102,7 +1111,7 @@ static HRESULT dplay_connected(SOCKET sock, void *serveraddr, size_t addrsize, D
                 {
                     case DN_MSG_INTERNAL_INSTRUCT_CONNECT:
                     {
-                        struct DN_INSTRUCT_CONNECT *instruct = (struct DN_INSTRUCT_CONNECT *)temp;
+                        struct DN_INSTRUCT_CONNECT *instruct = (struct DN_INSTRUCT_CONNECT *)&dframe->type;
 
                         FIXME("DN_MSG_INTERNAL_INSTRUCT_CONNECT dpnid 0x%08x, version 0x%08x\n", instruct->dpnid, instruct->version);
                         break;
@@ -1162,21 +1171,50 @@ static HRESULT dplay_connected(SOCKET sock, void *serveraddr, size_t addrsize, D
                             }
                             else
                             {
-                                DPNMSG_RECEIVE received;
+                                static BYTE userdata[4096];
+                                static DWORD userdatasize = 0;
 
-                                TRACE("Passing on user data\n");
+                                FIXME("Command 0x%08x\n", packet->command);
 
-                                received.dwSize             = sizeof(received);
-                                received.dpnidSender        = 0;
-                                received.pvPlayerContext    = NULL;
-                                received.pReceiveData       = &dframe->type;
-                                received.dwReceiveDataSize  = n - sizeof(struct DFRAME_PACKET);
-                                received.hBufferHandle      = 0;
-                                received.dwReceiveFlags     = 0;
+                                if(packet->command & PACKET_COMMAND_NEW_MSG)
+                                {
+                                    WARN("PACKET_COMMAND_NEW_MSG Only %lu\n", n - sizeof(struct DFRAME_PACKET));
+                                    memcpy(userdata, &dframe->type, n - sizeof(struct DFRAME_PACKET));
+                                    userdatasize = n - sizeof(struct DFRAME_PACKET);
+                                }
 
-                                hr = msghandler(NULL, DPN_MSGID_RECEIVE, &received);
-                                if(hr != S_OK)
-                                    ERR("Message Handle for DPNMSG_RECEIVE failed (0x%08x).\n", hr);
+                                if(packet->command & PACKET_COMMAND_END_MSG)
+                                {
+                                    DPNMSG_RECEIVE received;
+
+                                    WARN("PACKET_COMMAND_END_MSG Only %lu\n", n - sizeof(struct DFRAME_PACKET));
+                                    if(!(packet->command & PACKET_COMMAND_NEW_MSG))
+                                    {
+                                        memcpy(userdata + userdatasize, &dframe->type, n - sizeof(struct DFRAME_PACKET));
+                                        userdatasize += (n - sizeof(struct DFRAME_PACKET));
+                                    }
+
+                                    TRACE("Passing on user data %d\n", userdatasize);
+
+                                    received.dwSize             = sizeof(received);
+                                    received.dpnidSender        = 0;
+                                    received.pvPlayerContext    = NULL;
+                                    received.pReceiveData       = userdata;
+                                    received.dwReceiveDataSize  = userdatasize;
+                                    received.hBufferHandle      = 0;
+                                    received.dwReceiveFlags     = 0;
+
+                                    hr = msghandler(NULL, DPN_MSGID_RECEIVE, &received);
+                                    if(hr != S_OK)
+                                        ERR("Message Handle for DPNMSG_RECEIVE failed (0x%08x).\n", hr);
+
+                                    userdatasize = 0;
+                                }
+                                else if(packet->command & PACKET_COMMAND_SEQUENTIAL && !(packet->command & PACKET_COMMAND_NEW_MSG))
+                                {
+                                    WARN("PACKET_COMMAND_SEQUENTIAL Only %lu\n", n - sizeof(struct DFRAME_PACKET));
+
+                                }
                             }
 
                         }
-- 
1.9.1

