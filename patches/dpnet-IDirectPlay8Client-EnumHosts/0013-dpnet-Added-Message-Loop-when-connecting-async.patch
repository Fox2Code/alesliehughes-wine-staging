From 6e65b3c2a8929337e660a15e7b48238c1b9c5efa Mon Sep 17 00:00:00 2001
From: Alistair Leslie-Hughes <leslie_alistair@hotmail.com>
Date: Tue, 13 Dec 2016 12:29:09 +1100
Subject: [PATCH 13/42] dpnet: Added Message Loop when connecting async

Signed-off-by: Alistair Leslie-Hughes <leslie_alistair@hotmail.com>
---
 dlls/dpnet/client.c   | 113 +++++++++++++++++++++++++++++++++++++++++++++++++-
 dlls/dpnet/dppacket.h |  39 +++++++++++++++++
 2 files changed, 151 insertions(+), 1 deletion(-)

diff --git a/dlls/dpnet/client.c b/dlls/dpnet/client.c
index 3c53067..29f8264 100644
--- a/dlls/dpnet/client.c
+++ b/dlls/dpnet/client.c
@@ -831,6 +831,112 @@ static HRESULT dplay_connect(SOCKET sock, struct sockaddr_in *serveraddr, DWORD
     return hr;
 }
 
+static HRESULT dplay_connected(SOCKET sock, struct sockaddr_in *serveraddr, DWORD session,
+        const DPN_APPLICATION_DESC * const app_desc, WCHAR *username, HANDLE cancelevent,
+        PFNDPNMESSAGEHANDLER msghandler)
+{
+    HRESULT hr = DPN_OK;
+    int n;
+    char temp[1024] = {0};
+    DWORD buflen;
+    struct sockaddr_in from;
+    int fromlen = sizeof(from);
+
+    while(hr == DPN_OK)
+    {
+        if(cancelevent)
+        {
+            if(WaitForSingleObject(cancelevent, 0) != WAIT_TIMEOUT)
+            {
+                TRACE("Event Signaled.\n");
+                break;
+            }
+        }
+
+        buflen = sizeof(temp);
+        n = recvfrom(sock, temp, buflen, 0, (struct sockaddr *)&from, &fromlen);
+        if(n >= (int)sizeof(struct DFRAME_PACKET))
+        {
+            struct DFRAME_PACKET *packet = (struct DFRAME_PACKET *)temp;
+
+            /* Is it a DFRAME packet */
+            if(packet->command & PACKET_COMMAND_DATA)
+            {
+                struct DFRAME_PACKET_TYPE *dframe = (struct DFRAME_PACKET_TYPE *)temp;
+
+                FIXME("Processing DFRAME_PACKET(%d)\n", n);
+
+                switch(dframe->type)
+                {
+                    default:
+                        /* System Messages */
+                        if(packet->command & PACKET_COMMAND_USER_1)
+                        {
+                            FIXME("PACKET_COMMAND_USER_1 not support.... command 0x%02x, control 0x%04x, seq 0x%08x, nseq 0x%04x\n", packet->command, packet->control, packet->seq, packet->nseq);
+                        }
+                        else
+                        {
+                            if(packet->control & PACKET_CONTROL_KEEPALIVE_OR_CORRELATE)
+                            {
+                                struct DFRAME_PACKET_KEEPALIVE *keepalive = (struct DFRAME_PACKET_KEEPALIVE *)packet;
+                                struct SACK_PACKET sack;
+                                int err;
+
+                                FIXME("PACKET_CONTROL_KEEPALIVE_OR_CORRELATE\n");
+
+                                sack.command = 0x80;
+                                sack.opcode  = FRAME_EXOPCODE_SACK;
+                                sack.flags   = SACK_FLAGS_RESPONSE;
+                                sack.retry   = FALSE;
+                                sack.nseq    = keepalive->nseq;
+                                sack.nrcv    = keepalive->seq;
+                                sack.padding = 0;
+                                sack.timestamp = GetTickCount();
+
+                                err = sendto(sock, (void *)&sack, sizeof(sack), 0, (struct sockaddr *)serveraddr, sizeof(struct sockaddr_in));
+                                if(err == -1)
+                                    ERR("Sendto failed (%d).\n", WSAGetLastError());
+                                else
+                                    FIXME("sack sent %d\n", err);
+                            }
+                            else
+                            {
+                                FIXME("data not support.... command 0x%02x, control 0x%04x, seq 0x%08x, nseq 0x%04x, type %08x\n", packet->command, packet->control, packet->seq, packet->nseq, dframe->type);
+                            }
+
+                        }
+                }
+            }
+            else if(n >= (int)sizeof(struct CFRAME_PACKET) &&
+                    ((packet->command == PACKET_COMMAND_CFRAME) ||
+                     (packet->command == (PACKET_COMMAND_CFRAME | PACKET_COMMAND_POLL))))
+            {
+                FIXME("Processing CFRAME_PACKET(%d)\n", n);
+
+                if(packet->control == FRAME_EXOPCODE_HARD_DISCONNECT)
+                {
+                    ERR("FRAME_EXOPCODE_HARD_DISCONNECT\n");
+                    hr = DPNERR_USERCANCEL;
+                }
+                else if(packet->control == FRAME_EXOPCODE_SACK)
+                {
+                    ERR("received FRAME_EXOPCODE_SACK\n");
+                }
+                else
+                {
+                    FIXME("CFRAME not support.... command 0x%02x, control 0x%04x, seq 0x%08x, nseq 0x%04x\n", packet->command, packet->control, packet->seq, packet->nseq);
+                }
+            }
+            else
+            {
+                FIXME("Packet not support.... size(%d), command 0x%02x, control 0x%04x, seq 0x%08x, nseq 0x%04x\n", n, packet->command, packet->control, packet->seq, packet->nseq);
+            }
+        }
+    }
+
+    return hr;
+}
+
 struct connect_data
 {
     SOCKET sock;
@@ -848,8 +954,13 @@ static DWORD WINAPI connect_thread(void *threaddata)
 {
     struct connect_data *tdata = (struct connect_data *)threaddata;
 
-    dplay_connect(tdata->sock, &tdata->addr, tdata->session, tdata->app_desc, tdata->username,
+    if(dplay_connect(tdata->sock, &tdata->addr, tdata->session, tdata->app_desc, tdata->username,
+            tdata->cancelevent, tdata->msghandler) == S_OK)
+    {
+        /* Main message loop */
+        dplay_connected(tdata->sock, &tdata->addr, tdata->session, tdata->app_desc, tdata->username,
             tdata->cancelevent, tdata->msghandler);
+    }
 
     heap_free(threaddata);
 
diff --git a/dlls/dpnet/dppacket.h b/dlls/dpnet/dppacket.h
index 3716be9..e4cfa43 100644
--- a/dlls/dpnet/dppacket.h
+++ b/dlls/dpnet/dppacket.h
@@ -149,6 +149,39 @@ struct DN_ACK_CONNECT_INFO
     DWORD type;                   /* DN_MSG_INTERNAL_ACK_CONNECT_INFO */
 };
 
+struct DFRAME_PACKET_KEEPALIVE
+{
+    BYTE command;
+    BYTE control;
+    BYTE seq;
+    BYTE nseq;
+    DWORD session;
+};
+
+struct SACK_PACKET
+{
+    BYTE command;
+    BYTE opcode;
+    BYTE flags;
+    BYTE retry;
+    BYTE nseq;
+    BYTE nrcv;
+    WORD padding;
+    DWORD timestamp;
+};
+
+struct CFRAME_PACKET
+{
+    BYTE command;
+    BYTE opcode;
+    BYTE flags;
+    BYTE retry;
+    BYTE nseq;
+    BYTE nrcv;
+    WORD padding;
+    DWORD timestamp;
+};
+
 #define PACKET_ENUM_QUERY                     0x02
 #define PACKET_ENUM_RESPONSE                  0x03
 
@@ -197,6 +230,12 @@ struct DN_ACK_CONNECT_INFO
 #define DP_OBECT_NET_VER_9_0      0x00000007
 #define DP_OBECT_NET_VER_9_0A     0x00000008
 
+#define SACK_FLAGS_RESPONSE                   0x01
+#define SACK_FLAGS_SACK_MASK1                 0x02
+#define SACK_FLAGS_SACK_MASK2                 0x04
+#define SACK_FLAGS_SEND_MASK1                 0x08
+#define SACK_FLAGS_SEND_MASK2                 0x10
+
 #include "poppack.h"
 
 #endif
-- 
1.9.1

