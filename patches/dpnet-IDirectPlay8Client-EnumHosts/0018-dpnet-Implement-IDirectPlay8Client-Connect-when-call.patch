From b98f8146e245fcf1e4b3757d28fe18bd416410c3 Mon Sep 17 00:00:00 2001
From: Alistair Leslie-Hughes <leslie_alistair@hotmail.com>
Date: Wed, 7 Dec 2016 11:31:52 +1100
Subject: [PATCH 18/28] dpnet: Implement IDirectPlay8Client Connect when called
 synchronously

Signed-off-by: Alistair Leslie-Hughes <leslie_alistair@hotmail.com>
---
 dlls/dpnet/client.c   | 225 ++++++++++++++++++++++++++++++++++++++++++++++++++
 dlls/dpnet/dppacket.h | 114 +++++++++++++++++++++++++
 2 files changed, 339 insertions(+)

diff --git a/dlls/dpnet/client.c b/dlls/dpnet/client.c
index 0d7b3b5208..8642edb80f 100644
--- a/dlls/dpnet/client.c
+++ b/dlls/dpnet/client.c
@@ -159,6 +159,126 @@ static BOOL dpaddress_to_sockaddr(IDirectPlay8Address *host, struct sockaddr_in
     return TRUE;
 }
 
+static int init_packet_connect(SOCKET sock, DWORD session, struct sockaddr_in *addr)
+{
+    struct DN_MESSAGE_CONNECT packet;
+    int err;
+
+    packet.command = PACKET_COMMAND_CFRAME | PACKET_COMMAND_POLL;
+    packet.opcode  = FRAME_EXOPCODE_CONNECT;
+    packet.msgid   = 0;
+    packet.rspid   = 0;
+    packet.protocol = PROTOCOL_VERSION;
+    packet.session  = session;
+    packet.timestamp = GetTickCount();
+
+    err = sendto(sock, (void *)&packet, sizeof(packet), 0, (struct sockaddr *)addr, sizeof(struct sockaddr_in));
+    if(err == -1)
+        ERR("Sendto failed (%d).\n", WSAGetLastError());
+    else
+        TRACE("sent %d\n", err);
+
+    return err;
+}
+
+static int dn_packet_connected(SOCKET sock, DWORD session, DWORD msgid, struct sockaddr_in *addr)
+{
+    struct DN_MESSAGE_CONNECT packet;
+    int err;
+
+    packet.command = PACKET_COMMAND_CFRAME;
+    packet.opcode  = FRAME_EXOPCODE_CONNECTED;
+    packet.msgid   = msgid + 1;
+    packet.rspid   = 0;
+    packet.protocol = PROTOCOL_VERSION;
+    packet.session  = session;
+    packet.timestamp = GetTickCount();
+
+    err = sendto(sock, (void *)&packet, sizeof(packet), 0, (struct sockaddr *)addr, sizeof(struct sockaddr_in));
+    if(err == -1)
+         ERR("Sendto failed (%d).\n", WSAGetLastError());
+    else
+        TRACE("sent %d\n", err);
+
+     return err;
+}
+
+static int dframe_packet_session_ack(SOCKET sock, struct sockaddr_in *addr, DWORD msgid)
+{
+    struct DFRAME_PACKET *packet;
+    struct DN_ACK_CONNECT_INFO *info;
+    int err;
+    int size;
+
+    size = sizeof(struct DFRAME_PACKET) + sizeof(*info);
+    packet = HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, size);
+
+    if(!packet)
+        return -1;
+
+    packet->command =
+        PACKET_COMMAND_DATA | PACKET_COMMAND_RELIABLE | PACKET_COMMAND_SEQUENTIAL | PACKET_COMMAND_POLL |
+        PACKET_COMMAND_NEW_MSG | PACKET_COMMAND_END_MSG | PACKET_COMMAND_USER_1;
+    packet->control  = 0;
+    packet->seq      = msgid;
+    packet->nseq     = msgid;
+
+    info = (struct DN_ACK_CONNECT_INFO *)(((char*)packet) + sizeof(struct DFRAME_PACKET));
+    info->type    = DN_MSG_INTERNAL_ACK_CONNECT_INFO;
+
+    err = sendto(sock, (void *)packet, size, 0, (struct sockaddr *)addr, sizeof(struct sockaddr_in));
+    if(err == -1)
+        ERR("Sendto failed (%d).\n", WSAGetLastError());
+    else
+        TRACE("sent %d\n", err);
+
+    heap_free(packet);
+    return err;
+}
+
+/* 2.2.1.2 DN_INTERNAL_MESSAGE_PLAYER_CONNECT_INFO_EX */
+static int dframe_packet_player_connect_info_ex(SOCKET sock, DWORD session, const DPN_APPLICATION_DESC * const app_desc,
+                            WCHAR *name, struct sockaddr_in *addr)
+{
+    struct DFRAME_PACKET *packet;
+    struct DN_INTERNAL_MESSAGE_PLAYER_CONNECT_INFO_EX *info;
+    int err;
+    int size;
+
+    size = sizeof(struct DFRAME_PACKET) + sizeof(*info) + ((lstrlenW(name)+1) * sizeof(WCHAR));
+    packet = HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, size);
+
+    if(!packet)
+        return -1;
+
+    packet->command =
+        PACKET_COMMAND_DATA | PACKET_COMMAND_RELIABLE | PACKET_COMMAND_SEQUENTIAL | PACKET_COMMAND_POLL |
+        PACKET_COMMAND_NEW_MSG | PACKET_COMMAND_END_MSG | PACKET_COMMAND_USER_1;
+    packet->control  = 0;
+    packet->seq      = 1;
+    packet->nseq     = 0;
+
+    info = (struct DN_INTERNAL_MESSAGE_PLAYER_CONNECT_INFO_EX *)(((char*)packet) + sizeof(struct DFRAME_PACKET));
+    info->type    = DN_MSG_INTERNAL_PLAYER_CONNECT_INFO;
+    info->flags   = DP_OBECT_TYPE_CLIENT;
+    info->version = DP_OBECT_NET_VER_9_0;
+    info->name_offset = sizeof(struct DN_INTERNAL_MESSAGE_PLAYER_CONNECT_INFO_EX) - sizeof(DWORD);
+    info->name_size = (lstrlenW(name) + 1) * sizeof(WCHAR);
+    info->instance    = app_desc->guidInstance;
+    info->application = app_desc->guidApplication;
+
+    lstrcpyW( (WCHAR*)(((char*)info)+sizeof(*info)), name);
+
+    err = sendto(sock, (void *)packet, size, 0, (struct sockaddr *)addr, sizeof(struct sockaddr_in));
+    if(err == -1)
+        ERR("Sendto failed (%d).\n", WSAGetLastError());
+    else
+        TRACE("sent %d\n", err);
+
+    heap_free(packet);
+    return err;
+}
+
 static void send_async_complete_msg(IDirectPlay8ClientImpl *This, HRESULT hr, DPNHANDLE handle)
 {
     DPNMSG_ASYNC_OP_COMPLETE complete;
@@ -572,6 +692,91 @@ static HRESULT WINAPI IDirectPlay8ClientImpl_CancelAsyncOperation(IDirectPlay8Cl
     return DPN_OK;
 }
 
+static HRESULT dplay_connect(SOCKET sock, struct sockaddr_in *serveraddr, DWORD session,
+        const DPN_APPLICATION_DESC * const app_desc, WCHAR *username)
+{
+    HRESULT hr = DPN_OK;
+    BOOL connected = FALSE;
+    int n;
+    char temp[1024] = {0};
+    DWORD buflen;
+    struct sockaddr_in from;
+    int fromlen = sizeof(from);
+
+    if(init_packet_connect(sock, session, serveraddr) == -1)
+    {
+        ERR("init_packet_connect\n");
+        hr = DPNERR_USERCANCEL;
+    }
+
+    while(!connected && hr == S_OK)
+    {
+        buflen = sizeof(temp);
+        n = recvfrom(sock, temp, buflen, 0, (struct sockaddr *)&from, &fromlen);
+        if(n >= (int)sizeof(struct DFRAME_PACKET))
+        {
+            struct DFRAME_PACKET *packet = (struct DFRAME_PACKET *)temp;
+
+            TRACE("Received %d.\n", n);
+
+            if(packet->command & PACKET_COMMAND_DATA)
+            {
+                struct DFRAME_PACKET_TYPE *dframe = (struct DFRAME_PACKET_TYPE *)temp;
+
+                if(dframe->type == DN_MSG_INTERNAL_SEND_CONNECT_INFO)
+                {
+                    struct DN_SEND_CONNECT_INFO *info = (struct DN_SEND_CONNECT_INFO *)temp;
+
+                    TRACE("DN_MSG_INTERNAL_SEND_CONNECT_INFO\n");
+                    if(dframe_packet_session_ack(sock, serveraddr, packet->nseq) == -1)
+                    {
+                        ERR("dframe_packet_keepalive\n");
+                        hr = DPNERR_USERCANCEL;
+                    }
+                    /* TODO - Store info->dpnid */
+                    connected = TRUE;
+
+                    TRACE("dpnid %08x\n", info->dpnid);
+                }
+                else
+                {
+                    FIXME("Unexpected data. command 0x%02x, control 0x%04x, seq 0x%08x, nseq 0x%04x\n", packet->command, packet->control, packet->seq, packet->nseq);
+                }
+            }
+            else
+            {
+                if(packet->control == FRAME_EXOPCODE_CONNECTED)
+                {
+                    struct DN_MESSAGE_CONNECT *connected = (struct DN_MESSAGE_CONNECT *)temp;
+
+                    dn_packet_connected(sock, session, connected->msgid, serveraddr);
+
+                    if(dframe_packet_player_connect_info_ex(sock, session, app_desc, username, serveraddr) == -1)
+                    {
+                        ERR("dframe_packet_player_connect_info_ex\n");
+                        hr = DPNERR_USERCANCEL;
+                    }
+                }
+                else if(packet->control == FRAME_EXOPCODE_HARD_DISCONNECT)
+                {
+                    ERR("FRAME_EXOPCODE_HARD_DISCONNECT\n");
+                    hr = DPNERR_USERCANCEL;
+                }
+                else if(packet->control == FRAME_EXOPCODE_SACK)
+                {
+                    WARN("received FRAME_EXOPCODE_SACK\n");
+                }
+                else
+                {
+                    FIXME("CFRAME not support.... command 0x%02x, control 0x%04x, seq 0x%08x, nseq 0x%04x\n", packet->command, packet->control, packet->seq, packet->nseq);
+                }
+            }
+        }
+    }
+
+    return hr;
+}
+
 static HRESULT WINAPI IDirectPlay8ClientImpl_Connect(IDirectPlay8Client *iface,
         const DPN_APPLICATION_DESC * const app_desc, IDirectPlay8Address * const host_addr,
         IDirectPlay8Address * const device, const DPN_SECURITY_DESC * const security,
@@ -602,12 +807,32 @@ static HRESULT WINAPI IDirectPlay8ClientImpl_Connect(IDirectPlay8Client *iface,
         This->enumthread = NULL;
     }
 
+    if(This->sock == INVALID_SOCKET)
+    {
+        This->sock = find_free_socket();
+        if(This->sock == INVALID_SOCKET)
+        {
+            hr = DPNERR_USERCANCEL;
+            goto cleanup;
+        }
+    }
+
     if(!dpaddress_to_sockaddr(host_addr, &This->serveraddr))
     {
         hr = DPNERR_INVALIDHOSTADDRESS;
         goto cleanup;
     }
 
+    if(flags & DPNCONNECT_SYNC)
+    {
+        hr = dplay_connect(This->sock, &This->serveraddr, 0xdeadbeef, app_desc, This->username);
+    }
+    else
+    {
+        FIXME("Async Connect currently not supported\n");
+        hr = DPNSUCCESS_PENDING;
+    }
+
 cleanup:
     IDirectPlay8Address_Release(host_addr);
 
diff --git a/dlls/dpnet/dppacket.h b/dlls/dpnet/dppacket.h
index f3ca955f51..2a11aaac6e 100644
--- a/dlls/dpnet/dppacket.h
+++ b/dlls/dpnet/dppacket.h
@@ -69,12 +69,126 @@ struct DFRAME_PACKET
     BYTE nseq;
 };
 
+struct DFRAME_PACKET_TYPE
+{
+    BYTE command;
+    BYTE control;
+    BYTE seq;
+    BYTE nseq;
+    BYTE type;
+};
+
+struct DN_MESSAGE_CONNECT
+{
+    BYTE command;
+    BYTE opcode;
+    BYTE msgid;
+    BYTE rspid;
+    DWORD protocol;
+    DWORD session;
+    DWORD timestamp;
+};
+
+struct DN_INTERNAL_MESSAGE_PLAYER_CONNECT_INFO_EX
+{
+    DWORD type;
+    DWORD flags;
+    DWORD version;
+    DWORD name_offset;
+    DWORD name_size;
+    DWORD data_offset;
+    DWORD data_size;
+    DWORD pwd_offset;
+    DWORD pwd_size;
+    DWORD connect_offset;
+    DWORD connect_size;
+    DWORD url_offset;
+    DWORD url_size;
+    GUID  instance;
+    GUID  application;
+    DWORD alt_address_offset;
+    DWORD alt_address_size;
+};
+
+struct DN_SEND_CONNECT_INFO
+{
+    DWORD type;                   /* DN_MSG_INTERNAL_SEND_CONNECT_INFO */
+    DWORD reply_offset;
+    DWORD reply_size;
+    DWORD size;
+    DWORD flags;
+    DWORD max_players;
+    DWORD cur_players;
+    DWORD session_offset;
+    DWORD session_size;
+    DWORD pwd_offset;
+    DWORD pwd_size;
+    DWORD reserved_offset;
+    DWORD reserved_size;
+    DWORD appdata_offset;
+    DWORD appdata_size;
+    GUID  instance;
+    GUID  application;
+    DWORD dpnid;
+    DWORD version;
+    DWORD ver_not_used;
+    DWORD entry_count;
+    DWORD membership_count;
+};
+
+struct DN_ACK_CONNECT_INFO
+{
+    DWORD type;                   /* DN_MSG_INTERNAL_ACK_CONNECT_INFO */
+};
+
 #define PACKET_ENUM_QUERY                     0x02
 #define PACKET_ENUM_RESPONSE                  0x03
 
 #define PACKET_QUERY_GUID                     0x01
 #define PACKET_QUERY_NO_GUID                  0x02
 
+#define PROTOCOL_VERSION                      0x00010006
+
+#define PACKET_COMMAND_DATA                   0x01
+#define PACKET_COMMAND_RELIABLE               0x02
+#define PACKET_COMMAND_SEQUENTIAL             0x04
+#define PACKET_COMMAND_POLL                   0x08
+#define PACKET_COMMAND_NEW_MSG                0x10
+#define PACKET_COMMAND_END_MSG                0x20
+#define PACKET_COMMAND_USER_1                 0x40
+#define PACKET_COMMAND_USER_2                 0x80
+#define PACKET_COMMAND_CFRAME                 PACKET_COMMAND_USER_2
+
+#define FRAME_EXOPCODE_CONNECT                0x01
+#define FRAME_EXOPCODE_CONNECTED              0x02
+#define FRAME_EXOPCODE_CONNECTED_SIGNED       0x03
+#define FRAME_EXOPCODE_HARD_DISCONNECT        0x04
+#define FRAME_EXOPCODE_SACK                   0x06
+
+#define PACKET_CONTROL_RETRY                  0x01
+#define PACKET_CONTROL_KEEPALIVE_OR_CORRELATE 0x02
+#define PACKET_CONTROL_COALESCE               0x04
+#define PACKET_CONTROL_END_STREAM             0x08
+#define PACKET_CONTROL_SACK1                  0x10
+#define PACKET_CONTROL_SACK2                  0x20
+#define PACKET_CONTROL_SEND1                  0x40
+#define PACKET_CONTROL_SEND2                  0x80
+
+#define DN_MSG_INTERNAL_PLAYER_CONNECT_INFO 0x000000c1
+#define DN_MSG_INTERNAL_SEND_CONNECT_INFO   0x000000c2
+#define DN_MSG_INTERNAL_ACK_CONNECT_INFO    0x000000c3
+
+#define DP_OBECT_TYPE_CLIENT      0x00000002
+#define DP_OBECT_TYPE_PEER        0x00000004
+
+#define DP_OBECT_NET_VER_8_0      0x00000001
+#define DP_OBECT_NET_VER_8_1      0x00000002
+#define DP_OBECT_NET_VER_POCKETPC 0x00000003
+#define DP_OBECT_NET_VER_W2K3     0x00000005
+#define DP_OBECT_NET_VER_8_2      0x00000006
+#define DP_OBECT_NET_VER_9_0      0x00000007
+#define DP_OBECT_NET_VER_9_0A     0x00000008
+
 #include "poppack.h"
 
 #endif
-- 
2.11.0

