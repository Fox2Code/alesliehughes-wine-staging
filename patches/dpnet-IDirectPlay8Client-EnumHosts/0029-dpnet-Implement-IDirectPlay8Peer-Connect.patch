From d8cb1309ab91f58bb759d11c954b2d57040b9b0e Mon Sep 17 00:00:00 2001
From: Alistair Leslie-Hughes <leslie_alistair@hotmail.com>
Date: Fri, 13 Jan 2017 11:19:58 +1100
Subject: [PATCH 29/46] dpnet: Implement IDirectPlay8Peer Connect

---
 dlls/dpnet/client.c        | 17 ++-------
 dlls/dpnet/dpnet_private.h | 18 ++++++++++
 dlls/dpnet/peer.c          | 86 ++++++++++++++++++++++++++++++++++++++++++----
 3 files changed, 99 insertions(+), 22 deletions(-)

diff --git a/dlls/dpnet/client.c b/dlls/dpnet/client.c
index 14244bc..003228b 100644
--- a/dlls/dpnet/client.c
+++ b/dlls/dpnet/client.c
@@ -768,7 +768,7 @@ static HRESULT WINAPI IDirectPlay8ClientImpl_CancelAsyncOperation(IDirectPlay8Cl
     return DPN_OK;
 }
 
-static HRESULT dplay_connect(SOCKET sock, struct sockaddr_in *serveraddr, DWORD session,
+HRESULT dplay_connect(SOCKET sock, struct sockaddr_in *serveraddr, DWORD session,
         const DPN_APPLICATION_DESC * const app_desc, WCHAR *username, HANDLE cancelevent,
         PFNDPNMESSAGEHANDLER msghandler)
 {
@@ -1078,20 +1078,7 @@ static HRESULT dplay_connected(SOCKET sock, struct sockaddr_in *serveraddr, DWOR
     return hr;
 }
 
-struct connect_data
-{
-    SOCKET sock;
-    GUID   app_guid;
-    DWORD  session;
-    struct sockaddr_in addr;
-    const DPN_APPLICATION_DESC *app_desc;
-    WCHAR *username;
-
-    HANDLE cancelevent;
-    PFNDPNMESSAGEHANDLER msghandler;
-};
-
-static DWORD WINAPI connect_thread(void *threaddata)
+DWORD WINAPI connect_thread(void *threaddata)
 {
     struct connect_data *tdata = (struct connect_data *)threaddata;
 
diff --git a/dlls/dpnet/dpnet_private.h b/dlls/dpnet/dpnet_private.h
index a297574..e18c8c2 100644
--- a/dlls/dpnet/dpnet_private.h
+++ b/dlls/dpnet/dpnet_private.h
@@ -58,11 +58,29 @@ struct dpthread_data
     PFNDPNMESSAGEHANDLER msghandler;
 };
 
+struct connect_data
+{
+    SOCKET sock;
+    GUID   app_guid;
+    DWORD  session;
+    struct sockaddr_in addr;
+    const DPN_APPLICATION_DESC *app_desc;
+    WCHAR *username;
+
+    HANDLE cancelevent;
+    PFNDPNMESSAGEHANDLER msghandler;
+};
+
 extern DWORD WINAPI enumhost_thread(void *threaddata) DECLSPEC_HIDDEN;
 extern void process_enumhost(SOCKET sock, struct sockaddr_in host, IDirectPlay8Address *device, PFNDPNMESSAGEHANDLER msghandler, GUID application,
         DWORD retrycnt, DWORD retrytime, DWORD timeout, HANDLE cancelevent) DECLSPEC_HIDDEN;
 extern SOCKET find_free_socket(void) DECLSPEC_HIDDEN;
 extern BOOL dpaddress_to_sockaddr(IDirectPlay8Address *host, struct sockaddr_in *addr) DECLSPEC_HIDDEN;
+extern HRESULT dplay_connect(SOCKET sock, struct sockaddr_in *serveraddr, DWORD session,
+        const DPN_APPLICATION_DESC * const app_desc, WCHAR *username, HANDLE cancelevent,
+        PFNDPNMESSAGEHANDLER msghandler) DECLSPEC_HIDDEN;
+extern DWORD WINAPI connect_thread(void *threaddata) DECLSPEC_HIDDEN;
+
 
 /* ------------------ */
 /* IDirectPlay8Client */
diff --git a/dlls/dpnet/peer.c b/dlls/dpnet/peer.c
index 9dd748a..7f187e7 100644
--- a/dlls/dpnet/peer.c
+++ b/dlls/dpnet/peer.c
@@ -31,6 +31,7 @@
 #include "wingdi.h"
 #include "winuser.h"
 #include "objbase.h"
+#include "ntsecapi.h"
 #include "wine/debug.h"
 
 #include "dpnet_private.h"
@@ -56,6 +57,10 @@ typedef struct IDirectPlay8PeerImpl
     SOCKET sock;
     HANDLE enumthread;
     HANDLE cancelevent;
+
+    struct sockaddr_in serveraddr;
+    HANDLE connectthread;
+    DWORD session;
 } IDirectPlay8PeerImpl;
 
 static inline IDirectPlay8PeerImpl *impl_from_IDirectPlay8Peer(IDirectPlay8Peer *iface)
@@ -275,15 +280,76 @@ static HRESULT WINAPI IDirectPlay8PeerImpl_CancelAsyncOperation(IDirectPlay8Peer
 }
 
 static HRESULT WINAPI IDirectPlay8PeerImpl_Connect(IDirectPlay8Peer *iface,
-        const DPN_APPLICATION_DESC * const pdnAppDesc, IDirectPlay8Address * const pHostAddr,
-        IDirectPlay8Address * const pDeviceInfo, const DPN_SECURITY_DESC * const pdnSecurity,
-        const DPN_SECURITY_CREDENTIALS * const pdnCredentials, const void * const pvUserConnectData,
-        const DWORD dwUserConnectDataSize, void * const pvPlayerContext,
-        void * const pvAsyncContext, DPNHANDLE * const phAsyncHandle, const DWORD dwFlags)
+         const DPN_APPLICATION_DESC * const app_desc, IDirectPlay8Address * const host_addr,
+        IDirectPlay8Address * const device, const DPN_SECURITY_DESC * const security,
+        const DPN_SECURITY_CREDENTIALS * const credentials, const void * const user_data,
+        const DWORD data_size, void * const context,
+        void * const async_context, DPNHANDLE * const async_handle, const DWORD flags)
 {
-    FIXME("(%p)->(%p,%p,%p,%p,%p,%p,%x,%p,%p,%p,%x): stub\n", iface, pdnAppDesc, pHostAddr, pDeviceInfo, pdnSecurity, pdnCredentials, pvUserConnectData, dwUserConnectDataSize, pvPlayerContext, pvAsyncContext, phAsyncHandle, dwFlags);
+    IDirectPlay8PeerImpl* This = impl_from_IDirectPlay8Peer(iface);
+    HRESULT hr = DPN_OK;
 
-    return DPNERR_GENERIC;
+    FIXME("(%p) : (%p, %p, %p, %p, %p, %p, %u, %p, %p, %p, %x)\n", This, app_desc, host_addr,
+        device, security, credentials, user_data, data_size, context, async_context, async_handle, flags);
+
+    if(!This->msghandler)
+        return DPNERR_UNINITIALIZED;
+
+    /* Keep a Reference to the host object, since it was created in EnumHost */
+    IDirectPlay8Address_AddRef(host_addr);
+
+    if(This->enumthread)
+    {
+        SetEvent(This->cancelevent);
+        CloseHandle(This->cancelevent);
+
+        WaitForSingleObject(This->enumthread, INFINITE);
+
+        CloseHandle(This->enumthread);
+        This->enumthread = NULL;
+    }
+
+    if(This->sock == INVALID_SOCKET)
+    {
+        This->sock = find_free_socket();
+        if(This->sock == INVALID_SOCKET)
+        {
+            hr = DPNERR_USERCANCEL;
+            goto cleanup;
+        }
+    }
+
+    if(!dpaddress_to_sockaddr(host_addr, &This->serveraddr))
+    {
+        hr = DPNERR_INVALIDHOSTADDRESS;
+        goto cleanup;
+    }
+
+    if(flags & DPNCONNECT_SYNC)
+    {
+        hr = dplay_connect(This->sock, &This->serveraddr, This->session, app_desc, This->username, NULL, This->msghandler);
+    }
+    else
+    {
+        struct connect_data *tdata;
+        tdata = heap_alloc(sizeof(struct connect_data));
+        tdata->sock        = This->sock;
+        tdata->msghandler  = This->msghandler;
+        tdata->app_guid    = app_desc->guidApplication;
+        tdata->session     = This->session;
+        tdata->addr        = This->serveraddr;
+        tdata->app_desc    = app_desc;
+        tdata->username    = This->username;
+        tdata->cancelevent = This->cancelevent = CreateEventA( NULL, TRUE, FALSE, NULL);
+
+        This->connectthread = CreateThread(NULL, 0, &connect_thread, tdata, 0, 0);
+        hr = DPNSUCCESS_PENDING;
+    }
+
+cleanup:
+    IDirectPlay8Address_Release(host_addr);
+
+    return hr;
 }
 
 static HRESULT WINAPI IDirectPlay8PeerImpl_SendTo(IDirectPlay8Peer *iface, const DPNID dpnId,
@@ -749,6 +815,12 @@ HRESULT DPNET_CreateDirectPlay8Peer(IClassFactory *iface, IUnknown *pUnkOuter, R
 
     init_dpn_sp_caps(&Client->spcaps);
 
+    if(!RtlGenRandom(&Client->session, sizeof(Client->session)))
+    {
+        heap_free(Client);
+        return E_FAIL;
+    }
+
     ret = IDirectPlay8Peer_QueryInterface(&Client->IDirectPlay8Peer_iface, riid, ppobj);
     IDirectPlay8Peer_Release(&Client->IDirectPlay8Peer_iface);
 
-- 
1.9.1

