From a6ad9396d70b6e8b167b4c2d2def114395374a85 Mon Sep 17 00:00:00 2001
From: Alistair Leslie-Hughes <leslie_alistair@hotmail.com>
Date: Tue, 17 Jan 2017 09:42:29 +1100
Subject: [PATCH 23/42] dpnet: IPeer support tcp4/6 in Connect

Signed-off-by: Alistair Leslie-Hughes <leslie_alistair@hotmail.com>
---
 dlls/dpnet/client.c        | 87 ++++++++++++++++++++++++++++++++++++++++++++++
 dlls/dpnet/dpnet_private.h |  1 +
 dlls/dpnet/peer.c          |  9 ++---
 3 files changed, 93 insertions(+), 4 deletions(-)

diff --git a/dlls/dpnet/client.c b/dlls/dpnet/client.c
index 6c9ec27..193c8de 100644
--- a/dlls/dpnet/client.c
+++ b/dlls/dpnet/client.c
@@ -22,6 +22,7 @@
 #include "config.h"
 
 #include <stdarg.h>
+#include <stdio.h>
 
 #define COBJMACROS
 #include "windef.h"
@@ -171,6 +172,92 @@ done:
     return TRUE;
 }
 
+BOOL dpaddress_to_sockstorage(IDirectPlay8Address *host, SOCKADDR_STORAGE *addr, size_t *addr_size)
+{
+    DWORD size, type, port = DPNA_DPNSVR_PORT;
+    char *buffer = NULL;
+    char dport[INET6_ADDRSTRLEN] = {0};
+    HRESULT hr;
+
+    TRACE("%p %p\n", host, addr);
+
+    if(!host)
+        goto done;
+
+    size = sizeof(port);
+    hr = IDirectPlay8Address_GetComponentByName(host, DPNA_KEY_PORT, &port, &size, &type);
+    if(FAILED(hr))
+    {
+        ERR("GetComponentByName failed 0x%08x.\n", hr);
+        return FALSE;
+    }
+
+    size = 0;
+    type = 0;
+    hr = IDirectPlay8Address_GetComponentByName(host, DPNA_KEY_HOSTNAME, NULL, &size, &type);
+    if(hr == DPNERR_BUFFERTOOSMALL)
+    {
+        buffer =  heap_alloc(size);
+        if(!buffer)
+        {
+            ERR("Cannot allocate memory.\n");
+            return FALSE;
+        }
+
+        hr = IDirectPlay8Address_GetComponentByName(host, DPNA_KEY_HOSTNAME, buffer, &size, &type);
+        if(FAILED(hr))
+        {
+            ERR("Failed to get host name.\n");
+
+            heap_free(buffer);
+            return FALSE;
+        }
+
+        if(type != DPNA_DATATYPE_STRING_ANSI)
+            FIXME("Type currently not supported (%d)\n", type);
+    }
+    else if(hr != DPNERR_DOESNOTEXIST)
+    {
+        ERR("GetComponentByName failed 0x%08x.\n", hr);
+        return FALSE;
+    }
+
+    TRACE("Server IP address %s port (%d)\n", debugstr_a(buffer), port);
+
+done:
+    memset(addr, 0, sizeof(*addr));
+
+    {
+        struct addrinfo hints;
+        struct addrinfo *result;
+        int s;
+
+        sprintf(dport, "%d", port);
+
+        memset(&hints, 0, sizeof(struct addrinfo));
+        hints.ai_family = AF_UNSPEC;
+        hints.ai_socktype = SOCK_DGRAM;
+        hints.ai_flags = AI_PASSIVE;
+
+        s = getaddrinfo(buffer, dport, &hints, &result);
+        if (s != 0) {
+            heap_free(buffer);
+            freeaddrinfo(result);
+            ERR("getaddrinfo failed %d.\n", s);
+            return FALSE;
+        }
+
+        memcpy(addr, result->ai_addr, result->ai_addrlen);
+        *addr_size = result->ai_addrlen;
+
+        freeaddrinfo(result);
+    }
+
+    heap_free(buffer);
+
+    return TRUE;
+}
+
 static int init_packet_connect(SOCKET sock, DWORD session, void *addr, size_t addrsize)
 {
     struct DN_MESSAGE_CONNECT packet;
diff --git a/dlls/dpnet/dpnet_private.h b/dlls/dpnet/dpnet_private.h
index e18396b..a4ef428 100644
--- a/dlls/dpnet/dpnet_private.h
+++ b/dlls/dpnet/dpnet_private.h
@@ -77,6 +77,7 @@ extern void process_enumhost(SOCKET sock, struct sockaddr_in host, IDirectPlay8A
         DWORD retrycnt, DWORD retrytime, DWORD timeout, HANDLE cancelevent) DECLSPEC_HIDDEN;
 extern SOCKET find_free_socket(void) DECLSPEC_HIDDEN;
 extern BOOL dpaddress_to_sockaddr(IDirectPlay8Address *host, struct sockaddr_in *addr) DECLSPEC_HIDDEN;
+extern BOOL dpaddress_to_sockstorage(IDirectPlay8Address *host, SOCKADDR_STORAGE *addr, size_t *size) DECLSPEC_HIDDEN;
 extern HRESULT dplay_connect(SOCKET sock, void *serveraddr, size_t addr_size, DWORD session,
         const DPN_APPLICATION_DESC * const app_desc, WCHAR *username, HANDLE cancelevent,
         PFNDPNMESSAGEHANDLER msghandler) DECLSPEC_HIDDEN;
diff --git a/dlls/dpnet/peer.c b/dlls/dpnet/peer.c
index eb1e479..8729ad6 100644
--- a/dlls/dpnet/peer.c
+++ b/dlls/dpnet/peer.c
@@ -58,7 +58,8 @@ typedef struct IDirectPlay8PeerImpl
     HANDLE enumthread;
     HANDLE cancelevent;
 
-    struct sockaddr_in serveraddr;
+    SOCKADDR_STORAGE serveraddr;
+    size_t addr_size;
     HANDLE connectthread;
     DWORD session;
 } IDirectPlay8PeerImpl;
@@ -319,7 +320,7 @@ static HRESULT WINAPI IDirectPlay8PeerImpl_Connect(IDirectPlay8Peer *iface,
         }
     }
 
-    if(!dpaddress_to_sockaddr(host_addr, &This->serveraddr))
+    if(!dpaddress_to_sockstorage(host_addr, &This->serveraddr, &This->addr_size))
     {
         hr = DPNERR_INVALIDHOSTADDRESS;
         goto cleanup;
@@ -327,7 +328,7 @@ static HRESULT WINAPI IDirectPlay8PeerImpl_Connect(IDirectPlay8Peer *iface,
 
     if(flags & DPNCONNECT_SYNC)
     {
-        hr = dplay_connect(This->sock, &This->serveraddr, sizeof(This->serveraddr), This->session, app_desc, This->username, NULL, This->msghandler);
+        hr = dplay_connect(This->sock, &This->serveraddr, This->addr_size, This->session, app_desc, This->username, NULL, This->msghandler);
     }
     else
     {
@@ -338,7 +339,7 @@ static HRESULT WINAPI IDirectPlay8PeerImpl_Connect(IDirectPlay8Peer *iface,
         tdata->app_guid    = app_desc->guidApplication;
         tdata->session     = This->session;
         tdata->addr        = &This->serveraddr;
-        tdata->addr_size   = sizeof(This->serveraddr);
+        tdata->addr_size   = This->addr_size;
         tdata->app_desc    = app_desc;
         tdata->username    = This->username;
         tdata->cancelevent = This->cancelevent = CreateEventA( NULL, TRUE, FALSE, NULL);
-- 
1.9.1

