From 264244edf0caabb18aaae1798151f0d460315cd5 Mon Sep 17 00:00:00 2001
From: Alistair Leslie-Hughes <leslie_alistair@hotmail.com>
Date: Mon, 3 Apr 2017 12:41:37 +1000
Subject: [PATCH 43/43] dpnet: Create and Bind INET6 socket by default

Signed-off-by: Alistair Leslie-Hughes <leslie_alistair@hotmail.com>
---
 dlls/dpnet/client.c        | 88 +++++++++++++++++++++++++-------------
 dlls/dpnet/dpnet_private.h |  2 +-
 dlls/dpnet/peer.c          |  4 +-
 3 files changed, 62 insertions(+), 32 deletions(-)

diff --git a/dlls/dpnet/client.c b/dlls/dpnet/client.c
index 3e1f392d986..3dd89bd4b80 100644
--- a/dlls/dpnet/client.c
+++ b/dlls/dpnet/client.c
@@ -59,54 +59,84 @@ static inline IDirectPlay8ClientImpl *impl_from_IDirectPlay8Client(IDirectPlay8C
 }
 
 /*
- * Direct Play clients bind to a port between 2300-2400.  Even though it's not a requirement,
- *  Network Analysers fail to detect them as directplay packets when not in this range.
+ * Native DirectPlay likes to bind to port 3202 for the client even though the spec specifies ports 2300-2400.
  */
-SOCKET find_free_socket(void)
+SOCKET find_free_socket(IDirectPlay8Address * const device)
 {
+    HRESULT hr;
+    BOOL supports_inet6 = TRUE;
     SOCKET sock;
-    struct sockaddr_in addr;
-    //struct sockaddr_in6 addr;
     ULONG value;
-    int port = 2302;    /* Native IDirectPlay8Client likes this port for the client. */
+    struct addrinfo hints;
+    struct addrinfo *result;
+    char sport[10];
+    DWORD type, size, startport = 2302;
+    int s;
+    int port;
 
-    //sock = socket(AF_INET6, SOCK_DGRAM, IPPROTO_UDP);
-    sock = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);
+    size = sizeof(port);
+    hr = IDirectPlay8Address_GetComponentByName(device, DPNA_KEY_PORT, &startport, &size, &type);
+    if(FAILED(hr) && hr != DPNERR_DOESNOTEXIST)
+    {
+        ERR("GetComponentByName failed 0x%08x.\n", hr);
+        return INVALID_SOCKET;
+    }
+    port = startport;
+
+    /*
+     * Using an INET6 socket has the advantage that it also binds to INET4.
+     */
+    sock = socket(AF_INET6, SOCK_DGRAM, IPPROTO_UDP);
+    if(sock == INVALID_SOCKET)
+    {
+        sock = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);
+        supports_inet6 = FALSE;
+    }
     if(sock == INVALID_SOCKET)
     {
         ERR("Cannot create socket.\n");
         return sock;
     }
 
-    memset(&addr, 0, sizeof(addr));
-    addr.sin_family = AF_INET;
-    addr.sin_port = htons(port);
-    addr.sin_addr.s_addr = htonl(INADDR_ANY);
-
-/*    addr.sin6_family = AF_INET6;
-    addr.sin6_port = htons (2302);*/
-
     value = 1;
     setsockopt(sock, SOL_SOCKET, SO_BROADCAST, (char *)&value, sizeof(value));
 
-    while(port < 2400)
+    memset(&hints, 0, sizeof(struct addrinfo));
+    hints.ai_family = supports_inet6 ? AF_INET6 : AF_INET;
+    hints.ai_socktype = SOCK_DGRAM;
+    hints.ai_flags = AI_PASSIVE;
+    hints.ai_protocol = 0;
+    hints.ai_canonname = NULL;
+    hints.ai_addr = NULL;
+    hints.ai_next = NULL;
+
+    while(port < startport + 100)
     {
-       if(!bind(sock, (struct sockaddr*)&addr, sizeof(addr)))
-       {
-           TRACE("bound to port (%d).\n", port);
-           return sock;
-       }
-       if(WSAGetLastError() == WSAEADDRINUSE)
-           addr.sin_port = htons(++port);
-           //addr.sin6_port = htons(++port);
-       else
-           break;
+        sprintf(sport, "%d", port);
+
+        s = getaddrinfo(NULL, sport, &hints, &result);
+        if (s != 0)
+        {
+            ERR("getaddrinfo failed: %s\n", gai_strerrorA(s));
+            goto incomplete;
+        }
+
+        /* Dont care if more than one result is returned. */
+        if(result != NULL)
+        {
+            if (bind(sock, result->ai_addr, result->ai_addrlen) == 0)
+                goto complete;
+
+            port++;
+        }
     }
 
+incomplete:
     ERR("No free ports available.\n");
     closesocket(sock);
     sock = INVALID_SOCKET;
 
+complete:
     return sock;
 }
 
@@ -875,7 +905,7 @@ static HRESULT WINAPI IDirectPlay8ClientImpl_EnumHosts(IDirectPlay8Client *iface
 
     if(This->sock == INVALID_SOCKET)
     {
-        This->sock = find_free_socket();
+        This->sock = find_free_socket(pDeviceInfo);
         if(This->sock == INVALID_SOCKET)
             return DPNERR_USERCANCEL; /* Pretend the user cancalled this operation. */
     }
@@ -1418,7 +1448,7 @@ static HRESULT WINAPI IDirectPlay8ClientImpl_Connect(IDirectPlay8Client *iface,
 
     if(This->sock == INVALID_SOCKET)
     {
-        This->sock = find_free_socket();
+        This->sock = find_free_socket(device);
         if(This->sock == INVALID_SOCKET)
         {
             hr = DPNERR_USERCANCEL;
diff --git a/dlls/dpnet/dpnet_private.h b/dlls/dpnet/dpnet_private.h
index cfa2d3f8110..085c8aafbc1 100644
--- a/dlls/dpnet/dpnet_private.h
+++ b/dlls/dpnet/dpnet_private.h
@@ -78,7 +78,7 @@ struct connect_data
 extern DWORD WINAPI enumhost_thread(void *threaddata) DECLSPEC_HIDDEN;
 extern void process_enumhost(SOCKET sock, struct sockaddr_storage *host, size_t host_size, IDirectPlay8Address *device, PFNDPNMESSAGEHANDLER msghandler, GUID application,
         DWORD retrycnt, DWORD retrytime, DWORD timeout, HANDLE cancelevent, void *context, void *userdata, DWORD userdata_size) DECLSPEC_HIDDEN;
-extern SOCKET find_free_socket(void) DECLSPEC_HIDDEN;
+extern SOCKET find_free_socket(IDirectPlay8Address * const device) DECLSPEC_HIDDEN;
 extern BOOL dpaddress_to_sockaddr(IDirectPlay8Address *host, struct sockaddr_storage *addr, size_t *addr_size) DECLSPEC_HIDDEN;
 extern BOOL dpaddress_to_sockstorage(IDirectPlay8Address *host, SOCKADDR_STORAGE *addr, size_t *size) DECLSPEC_HIDDEN;
 extern HRESULT dplay_connect(SOCKET sock, void *serveraddr, size_t addr_size, DWORD session,
diff --git a/dlls/dpnet/peer.c b/dlls/dpnet/peer.c
index 854ca9db4e0..2eee9f8c4c1 100644
--- a/dlls/dpnet/peer.c
+++ b/dlls/dpnet/peer.c
@@ -314,7 +314,7 @@ static HRESULT WINAPI IDirectPlay8PeerImpl_Connect(IDirectPlay8Peer *iface,
 
     if(This->sock == INVALID_SOCKET)
     {
-        This->sock = find_free_socket();
+        This->sock = find_free_socket(device);
         if(This->sock == INVALID_SOCKET)
         {
             hr = DPNERR_USERCANCEL;
@@ -642,7 +642,7 @@ static HRESULT WINAPI IDirectPlay8PeerImpl_EnumHosts(IDirectPlay8Peer *iface,
 
     if(This->sock == INVALID_SOCKET)
     {
-        This->sock = find_free_socket();
+        This->sock = find_free_socket(pDeviceInfo);
         if(This->sock == INVALID_SOCKET)
             return DPNERR_USERCANCEL; /* Pretend the user cancalled this operation. */
     }
-- 
2.23.0

