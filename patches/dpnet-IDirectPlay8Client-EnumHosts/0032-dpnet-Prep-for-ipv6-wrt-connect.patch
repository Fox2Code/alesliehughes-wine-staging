From 2c923bb2ef7e0b8310273b59870a01e6d7fbcdc9 Mon Sep 17 00:00:00 2001
From: Alistair Leslie-Hughes <leslie_alistair@hotmail.com>
Date: Fri, 13 Jan 2017 11:49:18 +1100
Subject: [PATCH 32/36] dpnet: Prep for ipv6 wrt connect

Signed-off-by: Alistair Leslie-Hughes <leslie_alistair@hotmail.com>
---
 dlls/dpnet/client.c        | 54 ++++++++++++++++++++++++----------------------
 dlls/dpnet/dpnet_private.h |  5 +++--
 dlls/dpnet/peer.c          |  5 +++--
 3 files changed, 34 insertions(+), 30 deletions(-)

diff --git a/dlls/dpnet/client.c b/dlls/dpnet/client.c
index 003228b..5d56508 100644
--- a/dlls/dpnet/client.c
+++ b/dlls/dpnet/client.c
@@ -171,7 +171,7 @@ done:
     return TRUE;
 }
 
-static int init_packet_connect(SOCKET sock, DWORD session, struct sockaddr_in *addr)
+static int init_packet_connect(SOCKET sock, DWORD session, void *addr, size_t addrsize)
 {
     struct DN_MESSAGE_CONNECT packet;
     int err;
@@ -184,7 +184,7 @@ static int init_packet_connect(SOCKET sock, DWORD session, struct sockaddr_in *a
     packet.session  = session;
     packet.timestamp = GetTickCount();
 
-    err = sendto(sock, (void *)&packet, sizeof(packet), 0, (struct sockaddr *)addr, sizeof(struct sockaddr_in));
+    err = sendto(sock, (void *)&packet, sizeof(packet), 0, (struct sockaddr *)addr, addrsize);
     if(err == -1)
         ERR("Sendto failed (%d).\n", WSAGetLastError());
     else
@@ -193,7 +193,7 @@ static int init_packet_connect(SOCKET sock, DWORD session, struct sockaddr_in *a
     return err;
 }
 
-static int dn_packet_connected(SOCKET sock, DWORD session, DWORD msgid, struct sockaddr_in *addr)
+static int dn_packet_connected(SOCKET sock, DWORD session, DWORD msgid, void *addr, size_t addrsize)
 {
     struct DN_MESSAGE_CONNECT packet;
     int err;
@@ -206,7 +206,7 @@ static int dn_packet_connected(SOCKET sock, DWORD session, DWORD msgid, struct s
     packet.session  = session;
     packet.timestamp = GetTickCount();
 
-    err = sendto(sock, (void *)&packet, sizeof(packet), 0, (struct sockaddr *)addr, sizeof(struct sockaddr_in));
+    err = sendto(sock, (void *)&packet, sizeof(packet), 0, (struct sockaddr *)addr, addrsize);
     if(err == -1)
          ERR("Sendto failed (%d).\n", WSAGetLastError());
     else
@@ -215,7 +215,7 @@ static int dn_packet_connected(SOCKET sock, DWORD session, DWORD msgid, struct s
      return err;
 }
 
-static int dframe_packet_keepalive(SOCKET sock, DWORD session, struct sockaddr_in *addr)
+static int dframe_packet_keepalive(SOCKET sock, DWORD session, void *addr, size_t addrsize)
 {
     struct DFRAME_PACKET_KEEPALIVE packet;
     int err = -1;
@@ -228,7 +228,7 @@ static int dframe_packet_keepalive(SOCKET sock, DWORD session, struct sockaddr_i
     packet.nseq    = 0;
     packet.session = session;
 
-    err = sendto(sock, (void *)&packet, sizeof(packet), 0, (struct sockaddr *)addr, sizeof(struct sockaddr_in));
+    err = sendto(sock, (void *)&packet, sizeof(packet), 0, (struct sockaddr *)addr, addrsize);
     if(err == -1)
         ERR("Sendto failed (%d).\n", WSAGetLastError());
     else
@@ -237,7 +237,7 @@ static int dframe_packet_keepalive(SOCKET sock, DWORD session, struct sockaddr_i
     return err;
 }
 
-static int dframe_packet_session_ack(SOCKET sock, struct sockaddr_in *addr, DWORD msgid)
+static int dframe_packet_session_ack(SOCKET sock, void *addr, size_t addrsize, DWORD msgid)
 {
     struct DFRAME_PACKET *packet;
     struct DN_ACK_CONNECT_INFO *info;
@@ -260,7 +260,7 @@ static int dframe_packet_session_ack(SOCKET sock, struct sockaddr_in *addr, DWOR
     info = (struct DN_ACK_CONNECT_INFO *)(((char*)packet) + sizeof(struct DFRAME_PACKET));
     info->type    = DN_MSG_INTERNAL_ACK_CONNECT_INFO;
 
-    err = sendto(sock, (void *)packet, size, 0, (struct sockaddr *)addr, sizeof(struct sockaddr_in));
+    err = sendto(sock, (void *)packet, size, 0, (struct sockaddr *)addr, addrsize);
     if(err == -1)
         ERR("Sendto failed (%d).\n", WSAGetLastError());
     else
@@ -270,7 +270,7 @@ static int dframe_packet_session_ack(SOCKET sock, struct sockaddr_in *addr, DWOR
     return err;
 }
 
-static int dframe_packet_sack_ack(SOCKET sock, struct sockaddr_in *addr, int nseq, int nrcv)
+static int dframe_packet_sack_ack(SOCKET sock, void *addr, size_t addrsize, int nseq, int nrcv)
 {
     struct SACK_PACKET sack;
     int err;
@@ -284,7 +284,7 @@ static int dframe_packet_sack_ack(SOCKET sock, struct sockaddr_in *addr, int nse
     sack.padding = 0;
     sack.timestamp = GetTickCount();
 
-    err = sendto(sock, (void *)&sack, sizeof(sack), 0, (struct sockaddr *)addr, sizeof(struct sockaddr_in));
+    err = sendto(sock, (void *)&sack, sizeof(sack), 0, (struct sockaddr *)addr, addrsize);
     if(err == -1)
         ERR("Sendto failed (%d).\n", WSAGetLastError());
     else
@@ -295,7 +295,7 @@ static int dframe_packet_sack_ack(SOCKET sock, struct sockaddr_in *addr, int nse
 
 /* 2.2.1.2 DN_INTERNAL_MESSAGE_PLAYER_CONNECT_INFO_EX */
 static int dframe_packet_player_connect_info_ex(SOCKET sock, DWORD session, const DPN_APPLICATION_DESC * const app_desc,
-                            WCHAR *name, struct sockaddr_in *addr)
+                            WCHAR *name, void *addr, size_t addrsize)
 {
     struct DFRAME_PACKET *packet;
     struct DN_INTERNAL_MESSAGE_PLAYER_CONNECT_INFO_EX *info;
@@ -326,7 +326,7 @@ static int dframe_packet_player_connect_info_ex(SOCKET sock, DWORD session, cons
 
     lstrcpyW( (WCHAR*)(((char*)info)+sizeof(*info)), name);
 
-    err = sendto(sock, (void *)packet, size, 0, (struct sockaddr *)addr, sizeof(struct sockaddr_in));
+    err = sendto(sock, (void *)packet, size, 0, (struct sockaddr *)addr, addrsize);
     if(err == -1)
         ERR("Sendto failed (%d).\n", WSAGetLastError());
     else
@@ -768,7 +768,7 @@ static HRESULT WINAPI IDirectPlay8ClientImpl_CancelAsyncOperation(IDirectPlay8Cl
     return DPN_OK;
 }
 
-HRESULT dplay_connect(SOCKET sock, struct sockaddr_in *serveraddr, DWORD session,
+HRESULT dplay_connect(SOCKET sock, void *serveraddr, size_t addrsize, DWORD session,
         const DPN_APPLICATION_DESC * const app_desc, WCHAR *username, HANDLE cancelevent,
         PFNDPNMESSAGEHANDLER msghandler)
 {
@@ -781,7 +781,7 @@ HRESULT dplay_connect(SOCKET sock, struct sockaddr_in *serveraddr, DWORD session
     int fromlen = sizeof(from);
     int ack = TRUE;
 
-    if(init_packet_connect(sock, session, serveraddr) == -1)
+    if(init_packet_connect(sock, session, serveraddr, addrsize) == -1)
     {
         ERR("init_packet_connect\n");
         hr = DPNERR_USERCANCEL;
@@ -821,7 +821,7 @@ HRESULT dplay_connect(SOCKET sock, struct sockaddr_in *serveraddr, DWORD session
                         struct DN_SEND_CONNECT_INFO *info = (struct DN_SEND_CONNECT_INFO *)temp;
 
                         TRACE("DN_MSG_INTERNAL_SEND_CONNECT_INFO\n");
-                        if(dframe_packet_session_ack(sock, serveraddr, packet->nseq) == -1)
+                        if(dframe_packet_session_ack(sock, serveraddr, addrsize, packet->nseq) == -1)
                         {
                             ERR("dframe_packet_session_ack\n");
                             hr = DPNERR_USERCANCEL;
@@ -886,17 +886,17 @@ HRESULT dplay_connect(SOCKET sock, struct sockaddr_in *serveraddr, DWORD session
                 {
                     struct DN_MESSAGE_CONNECT *connected = (struct DN_MESSAGE_CONNECT *)temp;
 
-                    dn_packet_connected(sock, session, connected->msgid, serveraddr);
+                    dn_packet_connected(sock, session, connected->msgid, serveraddr, addrsize);
 
                     ack = FALSE;
 
-                    if(dframe_packet_keepalive(sock, session, serveraddr) == -1)
+                    if(dframe_packet_keepalive(sock, session, serveraddr, addrsize) == -1)
                     {
                         ERR("dframe_packet_keepalive\n");
                         hr = DPNERR_USERCANCEL;
                     }
 
-                    if(dframe_packet_player_connect_info_ex(sock, session, app_desc, username, serveraddr) == -1)
+                    if(dframe_packet_player_connect_info_ex(sock, session, app_desc, username, serveraddr, addrsize) == -1)
                     {
                         ERR("dframe_packet_player_connect_info_ex\n");
                         hr = DPNERR_USERCANCEL;
@@ -919,7 +919,7 @@ HRESULT dplay_connect(SOCKET sock, struct sockaddr_in *serveraddr, DWORD session
 
             if(FALSE && ack && (packet->command | PACKET_COMMAND_POLL))
             {
-                dframe_packet_sack_ack(sock, serveraddr, packet->seq, packet->seq);
+                dframe_packet_sack_ack(sock, serveraddr, addrsize, packet->seq, packet->seq);
             }
         }
     }
@@ -927,7 +927,7 @@ HRESULT dplay_connect(SOCKET sock, struct sockaddr_in *serveraddr, DWORD session
     return hr;
 }
 
-static HRESULT dplay_connected(SOCKET sock, struct sockaddr_in *serveraddr, DWORD session,
+static HRESULT dplay_connected(SOCKET sock, void *serveraddr, size_t addrsize, DWORD session,
         const DPN_APPLICATION_DESC * const app_desc, WCHAR *username, HANDLE cancelevent,
         PFNDPNMESSAGEHANDLER msghandler)
 {
@@ -1006,7 +1006,7 @@ static HRESULT dplay_connected(SOCKET sock, struct sockaddr_in *serveraddr, DWOR
 
                                 FIXME("PACKET_CONTROL_END_STREAM\n");
 
-                                dframe_packet_sack_ack(sock, serveraddr, packet->seq, packet->nseq);
+                                dframe_packet_sack_ack(sock, serveraddr, addrsize, packet->seq, packet->nseq);
 
                                 term.dwSize = sizeof(DPNMSG_TERMINATE_SESSION);
                                 term.hResultCode = S_OK;
@@ -1070,7 +1070,7 @@ static HRESULT dplay_connected(SOCKET sock, struct sockaddr_in *serveraddr, DWOR
 
             if(ack && (packet->command | PACKET_COMMAND_POLL))
             {
-                dframe_packet_sack_ack(sock, serveraddr, packet->seq, packet->seq+1);
+                dframe_packet_sack_ack(sock, serveraddr, addrsize, packet->seq, packet->seq+1);
             }
         }
     }
@@ -1082,11 +1082,11 @@ DWORD WINAPI connect_thread(void *threaddata)
 {
     struct connect_data *tdata = (struct connect_data *)threaddata;
 
-    if(dplay_connect(tdata->sock, &tdata->addr, tdata->session, tdata->app_desc, tdata->username,
+    if(dplay_connect(tdata->sock, tdata->addr, tdata->addr_size, tdata->session, tdata->app_desc, tdata->username,
             tdata->cancelevent, tdata->msghandler) == S_OK)
     {
         /* Main message loop */
-        dplay_connected(tdata->sock, &tdata->addr, tdata->session, tdata->app_desc, tdata->username,
+        dplay_connected(tdata->sock, tdata->addr, tdata->addr_size, tdata->session, tdata->app_desc, tdata->username,
             tdata->cancelevent, tdata->msghandler);
     }
 
@@ -1143,7 +1143,8 @@ static HRESULT WINAPI IDirectPlay8ClientImpl_Connect(IDirectPlay8Client *iface,
 
     if(flags & DPNCONNECT_SYNC)
     {
-        hr = dplay_connect(This->sock, &This->serveraddr, This->session, app_desc, This->username, NULL, This->msghandler);
+        hr = dplay_connect(This->sock, &This->serveraddr, sizeof(This->serveraddr), This->session, app_desc,
+                            This->username, NULL, This->msghandler);
     }
     else
     {
@@ -1153,7 +1154,8 @@ static HRESULT WINAPI IDirectPlay8ClientImpl_Connect(IDirectPlay8Client *iface,
         tdata->msghandler  = This->msghandler;
         tdata->app_guid    = app_desc->guidApplication;
         tdata->session     = This->session;
-        tdata->addr        = This->serveraddr;
+        tdata->addr        = &This->serveraddr;
+        tdata->addr_size   = sizeof(This->serveraddr);
         tdata->app_desc    = app_desc;
         tdata->username    = This->username;
         tdata->cancelevent = This->cancelevent = CreateEventA( NULL, TRUE, FALSE, NULL);
diff --git a/dlls/dpnet/dpnet_private.h b/dlls/dpnet/dpnet_private.h
index e18c8c2..3e925a5 100644
--- a/dlls/dpnet/dpnet_private.h
+++ b/dlls/dpnet/dpnet_private.h
@@ -63,7 +63,8 @@ struct connect_data
     SOCKET sock;
     GUID   app_guid;
     DWORD  session;
-    struct sockaddr_in addr;
+    void  *addr;
+    size_t addr_size;
     const DPN_APPLICATION_DESC *app_desc;
     WCHAR *username;
 
@@ -76,7 +77,7 @@ extern void process_enumhost(SOCKET sock, struct sockaddr_in host, IDirectPlay8A
         DWORD retrycnt, DWORD retrytime, DWORD timeout, HANDLE cancelevent) DECLSPEC_HIDDEN;
 extern SOCKET find_free_socket(void) DECLSPEC_HIDDEN;
 extern BOOL dpaddress_to_sockaddr(IDirectPlay8Address *host, struct sockaddr_in *addr) DECLSPEC_HIDDEN;
-extern HRESULT dplay_connect(SOCKET sock, struct sockaddr_in *serveraddr, DWORD session,
+extern HRESULT dplay_connect(SOCKET sock, void *serveraddr, size_t addr_size, DWORD session,
         const DPN_APPLICATION_DESC * const app_desc, WCHAR *username, HANDLE cancelevent,
         PFNDPNMESSAGEHANDLER msghandler) DECLSPEC_HIDDEN;
 extern DWORD WINAPI connect_thread(void *threaddata) DECLSPEC_HIDDEN;
diff --git a/dlls/dpnet/peer.c b/dlls/dpnet/peer.c
index 7f187e7..84c7d91 100644
--- a/dlls/dpnet/peer.c
+++ b/dlls/dpnet/peer.c
@@ -327,7 +327,7 @@ static HRESULT WINAPI IDirectPlay8PeerImpl_Connect(IDirectPlay8Peer *iface,
 
     if(flags & DPNCONNECT_SYNC)
     {
-        hr = dplay_connect(This->sock, &This->serveraddr, This->session, app_desc, This->username, NULL, This->msghandler);
+        hr = dplay_connect(This->sock, &This->serveraddr, sizeof(This->serveraddr), This->session, app_desc, This->username, NULL, This->msghandler);
     }
     else
     {
@@ -337,7 +337,8 @@ static HRESULT WINAPI IDirectPlay8PeerImpl_Connect(IDirectPlay8Peer *iface,
         tdata->msghandler  = This->msghandler;
         tdata->app_guid    = app_desc->guidApplication;
         tdata->session     = This->session;
-        tdata->addr        = This->serveraddr;
+        tdata->addr        = &This->serveraddr;
+        tdata->addr_size   = sizeof(This->serveraddr);
         tdata->app_desc    = app_desc;
         tdata->username    = This->username;
         tdata->cancelevent = This->cancelevent = CreateEventA( NULL, TRUE, FALSE, NULL);
-- 
1.9.1

