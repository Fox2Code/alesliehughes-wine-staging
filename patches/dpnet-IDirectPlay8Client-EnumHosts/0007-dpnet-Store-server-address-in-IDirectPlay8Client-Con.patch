From 4c6924b43b1d7f0fe34163b9dd0800a186551ad0 Mon Sep 17 00:00:00 2001
From: Alistair Leslie-Hughes <leslie_alistair@hotmail.com>
Date: Wed, 7 Dec 2016 11:20:58 +1100
Subject: [PATCH 07/39] dpnet: Store server address in IDirectPlay8Client
 Connect

Signed-off-by: Alistair Leslie-Hughes <leslie_alistair@hotmail.com>
---
 dlls/dpnet/client.c        | 68 +++++++++++++++++++++++++++++++++++++++++++++-
 dlls/dpnet/dpnet_private.h |  2 ++
 2 files changed, 69 insertions(+), 1 deletion(-)

diff --git a/dlls/dpnet/client.c b/dlls/dpnet/client.c
index 8d2f2a86d2..7935fcc8f2 100644
--- a/dlls/dpnet/client.c
+++ b/dlls/dpnet/client.c
@@ -101,6 +101,64 @@ static SOCKET find_free_socket(void)
     return sock;
 }
 
+static BOOL dpaddress_to_sockaddr(IDirectPlay8Address *host, struct sockaddr_in *addr)
+{
+    DWORD size, type, port = DPNA_DPNSVR_PORT;
+    char *buffer = NULL;
+    HRESULT hr;
+
+    size = sizeof(port);
+    hr = IDirectPlay8Address_GetComponentByName(host, DPNA_KEY_PORT, &port, &size, &type);
+    if(FAILED(hr) && hr != DPNERR_DOESNOTEXIST)
+    {
+        ERR("GetComponentByName failed 0x%08x.\n", hr);
+        return FALSE;
+    }
+
+    size = 0;
+    type = 0;
+    hr = IDirectPlay8Address_GetComponentByName(host, DPNA_KEY_HOSTNAME, NULL, &size, &type);
+    if(hr == DPNERR_BUFFERTOOSMALL)
+    {
+        buffer =  heap_alloc(size);
+        if(!buffer)
+        {
+            ERR("Cannot allocate memory.\n");
+            return FALSE;
+        }
+
+        hr = IDirectPlay8Address_GetComponentByName(host, DPNA_KEY_HOSTNAME, buffer, &size, &type);
+        if(FAILED(hr))
+        {
+            ERR("Failed to get host name.\n");
+
+            heap_free(buffer);
+            return FALSE;
+        }
+
+        if(type != DPNA_DATATYPE_STRING_ANSI)
+            FIXME("Type currently not supported (%d)\n", type);
+    }
+    else if(hr != DPNERR_DOESNOTEXIST)
+    {
+        ERR("GetComponentByName failed 0x%08x.\n", hr);
+        return FALSE;
+    }
+
+    TRACE("Found %s:%d\n", debugstr_a(buffer), port);
+
+    memset(addr, 0, sizeof(*addr));
+
+    addr->sin_family = AF_INET;
+    addr->sin_port = htons(port);
+
+    /* TODO - use getaddrinfo to better handle errors and name lookups. */
+    addr->sin_addr.s_addr = buffer ? inet_addr(buffer) : INADDR_BROADCAST;
+    heap_free(buffer);
+
+    return TRUE;
+}
+
 static void send_async_complete_msg(IDirectPlay8ClientImpl *This, HRESULT hr, DPNHANDLE handle)
 {
     DPNMSG_ASYNC_OP_COMPLETE complete;
@@ -528,6 +586,7 @@ static HRESULT WINAPI IDirectPlay8ClientImpl_Connect(IDirectPlay8Client *iface,
         DPNHANDLE * const async_handle, const DWORD flags)
 {
     IDirectPlay8ClientImpl *This = impl_from_IDirectPlay8Client(iface);
+    HRESULT hr = DPN_OK;
 
     FIXME("(%p) : (%p, %p, %p, %p, %p, %p, %u, %p, %p, %x)\n", This, app_desc, host_addr,
         device, security, credentials, user_data, data_size, context, async_handle, flags);
@@ -549,9 +608,16 @@ static HRESULT WINAPI IDirectPlay8ClientImpl_Connect(IDirectPlay8Client *iface,
         This->enumthread = NULL;
     }
 
+    if(!dpaddress_to_sockaddr(host_addr, &This->serveraddr))
+    {
+        hr = DPNERR_INVALIDHOSTADDRESS;
+        goto cleanup;
+    }
+
+cleanup:
     IDirectPlay8Address_Release(host_addr);
 
-    return DPN_OK;
+    return hr;
 }
 
 static HRESULT WINAPI IDirectPlay8ClientImpl_Send(IDirectPlay8Client *iface,
diff --git a/dlls/dpnet/dpnet_private.h b/dlls/dpnet/dpnet_private.h
index 02e8be52e7..cd89b3c11a 100644
--- a/dlls/dpnet/dpnet_private.h
+++ b/dlls/dpnet/dpnet_private.h
@@ -68,6 +68,8 @@ struct IDirectPlay8ClientImpl
     SOCKET sock;
     HANDLE enumthread;
     HANDLE cancelevent;
+
+    struct sockaddr_in serveraddr;
 };
 
 /* ------------------- */
-- 
2.11.0

