From dd5f31422bffee6b2fb982d5e9a341069aac413a Mon Sep 17 00:00:00 2001
From: Alistair Leslie-Hughes <leslie_alistair@hotmail.com>
Date: Mon, 5 Dec 2016 09:21:23 +1100
Subject: [PATCH 19/19] dpnet: Implement IDirectPlay8Peer EnumHost

Signed-off-by: Alistair Leslie-Hughes <leslie_alistair@hotmail.com>
---
 dlls/dpnet/client.c        | 19 ++-------
 dlls/dpnet/dpnet_private.h | 18 +++++++++
 dlls/dpnet/peer.c          | 99 ++++++++++++++++++++++++++++++++++++++++++++--
 3 files changed, 117 insertions(+), 19 deletions(-)

diff --git a/dlls/dpnet/client.c b/dlls/dpnet/client.c
index 85a7c5a..2a0f527 100644
--- a/dlls/dpnet/client.c
+++ b/dlls/dpnet/client.c
@@ -60,7 +60,7 @@ static inline IDirectPlay8ClientImpl *impl_from_IDirectPlay8Client(IDirectPlay8C
  * Direct Play clients bind to a port between 2300-2400.  Even though it's not a requirement,
  *  Network Analysers fail to detect them as directplay packets when not in this range.
  */
-static SOCKET find_free_socket(void)
+SOCKET find_free_socket(void)
 {
     SOCKET sock;
     struct sockaddr_in addr;
@@ -465,7 +465,7 @@ static int dframe_packet_sack_ack(SOCKET sock, struct sockaddr_in *addr, int nse
     return err;
 }
 
-static void process_enumhost(SOCKET sock, IDirectPlay8Address *device, PFNDPNMESSAGEHANDLER msghandler, GUID application,
+void process_enumhost(SOCKET sock, IDirectPlay8Address *device, PFNDPNMESSAGEHANDLER msghandler, GUID application,
         DWORD retrycnt, DWORD retrytime, DWORD timeout, HANDLE cancelevent)
 {
     char buffer[1024];
@@ -597,20 +597,7 @@ static void process_enumhost(SOCKET sock, IDirectPlay8Address *device, PFNDPNMES
     }
 }
 
-struct dpthread_data
-{
-    SOCKET sock;
-    IDirectPlay8Address *device;
-    DWORD retrycnt;
-    DWORD retrytime;
-    DWORD timeout;
-    GUID  app_guid;
-
-    HANDLE cancelevent;
-    PFNDPNMESSAGEHANDLER msghandler;
-};
-
-static DWORD WINAPI enumhost_thread(void *threaddata)
+DWORD WINAPI enumhost_thread(void *threaddata)
 {
     struct dpthread_data *tdata = (struct dpthread_data *)threaddata;
 
diff --git a/dlls/dpnet/dpnet_private.h b/dlls/dpnet/dpnet_private.h
index 78980fd..4d9bc18 100644
--- a/dlls/dpnet/dpnet_private.h
+++ b/dlls/dpnet/dpnet_private.h
@@ -137,6 +137,24 @@ struct IDirectPlay8ThreadPoolImpl
     void *usercontext;
 };
 
+struct dpthread_data
+{
+    SOCKET sock;
+    IDirectPlay8Address *device;
+    DWORD retrycnt;
+    DWORD retrytime;
+    DWORD timeout;
+    GUID  app_guid;
+
+    HANDLE cancelevent;
+    PFNDPNMESSAGEHANDLER msghandler;
+};
+
+extern DWORD WINAPI enumhost_thread(void *threaddata) DECLSPEC_HIDDEN;
+extern void process_enumhost(SOCKET sock, IDirectPlay8Address *device, PFNDPNMESSAGEHANDLER msghandler, GUID application,
+        DWORD retrycnt, DWORD retrytime, DWORD timeout, HANDLE cancelevent) DECLSPEC_HIDDEN;
+extern SOCKET find_free_socket(void);
+
 /**
  * factories
  */
diff --git a/dlls/dpnet/peer.c b/dlls/dpnet/peer.c
index f160768..371a0de 100644
--- a/dlls/dpnet/peer.c
+++ b/dlls/dpnet/peer.c
@@ -52,6 +52,11 @@ typedef struct IDirectPlay8PeerImpl
     DWORD datasize;
 
     DPN_SP_CAPS spcaps;
+
+    SOCKET sock;
+    HANDLE enumthread;
+    HANDLE cancelevent;
+
 } IDirectPlay8PeerImpl;
 
 static inline IDirectPlay8PeerImpl *impl_from_IDirectPlay8Peer(IDirectPlay8Peer *iface)
@@ -96,6 +101,10 @@ static ULONG WINAPI IDirectPlay8PeerImpl_Release(IDirectPlay8Peer *iface)
 
     if(!RefCount)
     {
+        closesocket(This->sock);
+        CloseHandle(This->cancelevent);
+        CloseHandle(This->enumthread);
+
         heap_free(This->username);
         heap_free(This->data);
 
@@ -237,9 +246,22 @@ static HRESULT WINAPI IDirectPlay8PeerImpl_EnumServiceProviders(IDirectPlay8Peer
 static HRESULT WINAPI IDirectPlay8PeerImpl_CancelAsyncOperation(IDirectPlay8Peer *iface,
         const DPNHANDLE hAsyncHandle, const DWORD dwFlags)
 {
+    IDirectPlay8PeerImpl* This = impl_from_IDirectPlay8Peer(iface);
+
     FIXME("(%p)->(%x,%x): stub\n", iface, hAsyncHandle, dwFlags);
 
-    return DPNERR_GENERIC;
+    if(hAsyncHandle == PtrToUlong(This->enumthread))
+    {
+        SetEvent(This->cancelevent);
+        CloseHandle(This->cancelevent);
+
+        WaitForSingleObject(This->enumthread, INFINITE);
+
+        CloseHandle(This->enumthread);
+        This->enumthread = NULL;
+    }
+
+    return DPN_OK;
 }
 
 static HRESULT WINAPI IDirectPlay8PeerImpl_Connect(IDirectPlay8Peer *iface,
@@ -435,8 +457,18 @@ static HRESULT WINAPI IDirectPlay8PeerImpl_GetLocalHostAddresses(IDirectPlay8Pee
 
 static HRESULT WINAPI IDirectPlay8PeerImpl_Close(IDirectPlay8Peer *iface, const DWORD dwFlags)
 {
+    IDirectPlay8PeerImpl* This = impl_from_IDirectPlay8Peer(iface);
     FIXME("(%p)->(%x): stub\n", iface, dwFlags);
 
+    if(This->cancelevent)
+    {
+        SetEvent(This->cancelevent);
+        CloseHandle(This->cancelevent);
+
+        CloseHandle(This->enumthread);
+        This->enumthread = NULL;
+    }
+
     return DPN_OK;
 }
 
@@ -447,8 +479,10 @@ static HRESULT WINAPI IDirectPlay8PeerImpl_EnumHosts(IDirectPlay8Peer *iface,
         const DWORD dwTimeOut, void * const pvUserContext, DPNHANDLE * const pAsyncHandle, const DWORD dwFlags)
 {
     IDirectPlay8PeerImpl* This = impl_from_IDirectPlay8Peer(iface);
+    IDirectPlay8Address *device = NULL;
+    HRESULT hr;
 
-    FIXME("(%p)->(%p,%p,%p,%p,%x,%x,%x,%x,%p,%p,%x): stub\n",
+    TRACE("(%p)->(%p,%p,%p,%p,%x,%x,%x,%x,%p,%p,%x)\n",
             iface, pApplicationDesc, pAddrHost, pDeviceInfo, pUserEnumData, dwUserEnumDataSize, dwEnumCount,
             dwRetryInterval, dwTimeOut, pvUserContext, pAsyncHandle, dwFlags);
 
@@ -461,7 +495,65 @@ static HRESULT WINAPI IDirectPlay8PeerImpl_EnumHosts(IDirectPlay8Peer *iface,
     if(dwUserEnumDataSize > This->spcaps.dwMaxEnumPayloadSize)
         return DPNERR_ENUMQUERYTOOLARGE;
 
-    return DPNERR_GENERIC;
+    if(This->sock == INVALID_SOCKET)
+    {
+        This->sock = find_free_socket();
+        if(This->sock == INVALID_SOCKET)
+            return DPNERR_USERCANCEL; /* Pretend the user cancalled this operation. */
+    }
+
+    hr = IDirectPlay8Address_Duplicate(pDeviceInfo, &device);
+    if(FAILED(hr))
+    {
+        ERR("Failed to duplicate Device address (0x%08x).\n", hr);
+
+        closesocket(This->sock);
+        This->sock = INVALID_SOCKET;
+
+        return E_OUTOFMEMORY;
+    }
+
+    if(dwFlags & DPNENUMHOSTS_SYNC)
+    {
+        DWORD retrycnt  = !dwEnumCount ? This->spcaps.dwDefaultEnumCount : dwEnumCount;
+        DWORD retrytime = !dwRetryInterval ? This->spcaps.dwDefaultEnumRetryInterval : dwRetryInterval;
+        DWORD timeout   = dwTimeOut == INFINITE ? This->spcaps.dwDefaultEnumTimeout : dwTimeOut;
+
+        process_enumhost(This->sock, device, This->msghandler, pApplicationDesc->guidApplication,
+                        retrycnt, retrytime, timeout, NULL);
+
+        IDirectPlay8Address_Release(device);
+    }
+    else
+    {
+        struct dpthread_data *tdata;
+
+        if(This->enumthread)
+        {
+            FIXME("Only one EnumHost is currently supported\n");
+            return DPNERR_USERCANCEL;
+        }
+
+        tdata = heap_alloc(sizeof(struct dpthread_data));
+        if(!tdata)
+            return E_OUTOFMEMORY;
+
+        tdata->sock        = This->sock;
+        tdata->retrycnt    = !dwEnumCount ? This->spcaps.dwDefaultEnumCount : dwEnumCount;
+        tdata->retrytime   = !dwRetryInterval ? This->spcaps.dwDefaultEnumRetryInterval : dwRetryInterval;
+        tdata->timeout     = dwTimeOut == INFINITE  ? This->spcaps.dwDefaultEnumTimeout : dwTimeOut;
+        tdata->msghandler  = This->msghandler;
+        tdata->device      = device;
+        tdata->app_guid    = pApplicationDesc->guidApplication;
+        tdata->cancelevent = This->cancelevent = CreateEventA( NULL, TRUE, FALSE, NULL);
+
+        This->enumthread = CreateThread(NULL, 0, &enumhost_thread, tdata, 0, 0);
+    }
+
+    if(pAsyncHandle)
+        *pAsyncHandle = PtrToUlong(This->enumthread);
+
+    return (dwFlags & DPNENUMHOSTS_SYNC) ? DPN_OK : DPNSUCCESS_PENDING;
 }
 
 static HRESULT WINAPI IDirectPlay8PeerImpl_DestroyPeer(IDirectPlay8Peer *iface, const DPNID dpnidClient,
@@ -639,6 +731,7 @@ HRESULT DPNET_CreateDirectPlay8Peer(IClassFactory *iface, IUnknown *pUnkOuter, R
     Client->usercontext = NULL;
     Client->msghandler = NULL;
     Client->flags = 0;
+    Client->sock = INVALID_SOCKET;
 
     init_dpn_sp_caps(&Client->spcaps);
 
-- 
1.9.1

