From d2573bc231562e3fe166e529a81a1f0bf4a5bed0 Mon Sep 17 00:00:00 2001
From: Alistair Leslie-Hughes <leslie_alistair@hotmail.com>
Date: Sat, 25 Mar 2017 19:01:09 +1100
Subject: [PATCH 41/43] dpnet: Changes to support Proper Name Resolve - These
 need to be bad ported for the initial EnumHost patch

---
 dlls/dpnet/client.c        | 130 +++++++++++++++++++++++++++++++++------------
 dlls/dpnet/dpnet_private.h |  12 +++--
 dlls/dpnet/peer.c          |   9 ++--
 3 files changed, 109 insertions(+), 42 deletions(-)

diff --git a/dlls/dpnet/client.c b/dlls/dpnet/client.c
index 2cd50c1..d5b1bdb 100644
--- a/dlls/dpnet/client.c
+++ b/dlls/dpnet/client.c
@@ -66,12 +66,13 @@ static inline IDirectPlay8ClientImpl *impl_from_IDirectPlay8Client(IDirectPlay8C
 SOCKET find_free_socket(void)
 {
     SOCKET sock;
-    //struct sockaddr_in addr;
-    struct sockaddr_in6 addr;
+    struct sockaddr_in addr;
+    //struct sockaddr_in6 addr;
     ULONG value;
     int port = 2302;    /* Native IDirectPlay8Client likes this port for the client. */
 
-    sock = socket(AF_INET6, SOCK_DGRAM, IPPROTO_UDP);
+    //sock = socket(AF_INET6, SOCK_DGRAM, IPPROTO_UDP);
+    sock = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);
     if(sock == INVALID_SOCKET)
     {
         ERR("Cannot create socket.\n");
@@ -79,12 +80,12 @@ SOCKET find_free_socket(void)
     }
 
     memset(&addr, 0, sizeof(addr));
-    /*addr.sin_family = AF_INET;
+    addr.sin_family = AF_INET;
     addr.sin_port = htons(port);
     addr.sin_addr.s_addr = htonl(INADDR_ANY);
-    */
-    addr.sin6_family = AF_INET6;
-    addr.sin6_port = htons (2302);
+
+/*    addr.sin6_family = AF_INET6;
+    addr.sin6_port = htons (2302);*/
 
     value = 1;
     setsockopt(sock, SOL_SOCKET, SO_BROADCAST, (char *)&value, sizeof(value));
@@ -97,8 +98,8 @@ SOCKET find_free_socket(void)
            return sock;
        }
        if(WSAGetLastError() == WSAEADDRINUSE)
-           //addr.sin_port = htons(++port);
-           addr.sin6_port = htons(++port);
+           addr.sin_port = htons(++port);
+           //addr.sin6_port = htons(++port);
        else
            break;
     }
@@ -124,7 +125,7 @@ static inline char *heap_strdupWtoA(LPCWSTR str)
     return ret;
 }
 
-BOOL dpaddress_to_sockaddr(IDirectPlay8Address *host, struct sockaddr_in *addr)
+BOOL dpaddress_to_sockaddr(IDirectPlay8Address *host, struct sockaddr_storage *addr, size_t *addr_size)
 {
     DWORD size, type, port = DPNA_DPNSVR_PORT;
     char *buffer = NULL;
@@ -187,12 +188,53 @@ BOOL dpaddress_to_sockaddr(IDirectPlay8Address *host, struct sockaddr_in *addr)
 done:
     memset(addr, 0, sizeof(*addr));
 
-    addr->sin_family = AF_INET;
-    addr->sin_port = htons(port);
+    //addr->sin_family = AF_INET;
+    //addr->sin_port = htons(port);
 
     /* TODO - use getaddrinfo to better handle errors and name lookups. */
-    addr->sin_addr.s_addr = buffer ? inet_addr(buffer) : INADDR_BROADCAST;
-    heap_free(buffer);
+   // addr->sin_addr.s_addr = buffer ? inet_addr(buffer) : INADDR_BROADCAST;
+
+    {
+        struct addrinfo hints;
+        struct addrinfo *result;
+        int s;
+        char host[NI_MAXHOST], service[NI_MAXSERV];
+        char dport[24];
+
+        sprintf(dport, "%d", port);
+
+        memset(&hints, 0, sizeof(struct addrinfo));
+        hints.ai_family = AF_UNSPEC;
+        hints.ai_socktype = SOCK_DGRAM;
+        hints.ai_flags = 0; //AI_PASSIVE;
+
+        s = getaddrinfo(buffer, dport, &hints, &result);
+        if (s != 0) {
+            heap_free(buffer);
+            freeaddrinfo(result);
+            ERR("getaddrinfo failed %d.\n", s);
+            return TRUE;
+        }
+
+        memcpy(addr, result->ai_addr, result->ai_addrlen);
+        *addr_size = result->ai_addrlen;
+
+        fprintf(stderr, "Size:  %d\n", result->ai_addrlen);
+
+        fprintf(stderr, "Family: %s\n",result->ai_family == AF_INET ? "AF_INET" : "AF_INET6");
+
+        s = getnameinfo((struct sockaddr *)result->ai_addr,
+                               result->ai_addrlen, host, NI_MAXHOST,
+                               service, NI_MAXSERV, NI_NUMERICHOST);
+
+
+        fprintf(stderr, "Server IP address %s:%s\n", host, service);
+
+        freeaddrinfo(result);
+    }
+
+        heap_free(buffer);
+
 
     return TRUE;
 }
@@ -570,12 +612,12 @@ static IDirectPlay8Address *create_sender_address(SOCKADDR_STORAGE *addr)
     if(addr->ss_family == AF_INET6)
     {
         inet_ntop(addr->ss_family, &(((struct sockaddr_in6 *)addr)->sin6_addr), ip, sizeof(ip));
-         port = ntohs( ((struct sockaddr_in6 *)addr)->sin6_port);
+        port = ntohs( ((struct sockaddr_in6 *)addr)->sin6_port);
     }
     else
     {
         inet_ntop(addr->ss_family, &(((struct sockaddr_in *)addr)->sin_addr), ip, sizeof(ip));
-         port = ntohs( ((struct sockaddr_in *)addr)->sin_port);
+        port = ntohs( ((struct sockaddr_in *)addr)->sin_port);
     }
 
     TRACE("Server IP address %s port (%d)\n", ip, port);
@@ -605,12 +647,23 @@ static int send_packet_enum_query(SOCKET sock, GUID application, char *data, DWO
     int err;
     int size = sizeof(struct ENUM_QUERY) + data_size;
     int offset = sizeof(struct ENUM_QUERY);
+
+    int s;
+    char host[NI_MAXHOST], service[NI_MAXSERV];
+
     if(has_guid)
     {
         offset += sizeof(GUID);
         size += sizeof(GUID);
     }
 
+    s = getnameinfo((struct sockaddr *)addr,
+                               addr_size, host, NI_MAXHOST,
+                               service, NI_MAXSERV, NI_NUMERICHOST);
+
+
+    fprintf(stderr, "SemdTo IP address %s:%s\n", host, service);
+
     packet = heap_alloc(size);
 
     query = (struct ENUM_QUERY_GUID*)packet;
@@ -632,8 +685,8 @@ static int send_packet_enum_query(SOCKET sock, GUID application, char *data, DWO
     return err;
 }
 
-void process_enumhost(SOCKET sock, struct sockaddr_in host, IDirectPlay8Address *device, PFNDPNMESSAGEHANDLER msghandler, GUID application,
-        DWORD retrycnt, DWORD retrytime, DWORD timeout, HANDLE cancelevent)
+void process_enumhost(SOCKET sock, struct sockaddr_storage *host, size_t host_size, IDirectPlay8Address *device, PFNDPNMESSAGEHANDLER msghandler, GUID application,
+        DWORD retrycnt, DWORD retrytime, DWORD timeout, HANDLE cancelevent, void *userdata, DWORD userdata_size)
 {
     char buffer[1024];
     int buflen = sizeof(buffer);
@@ -642,13 +695,13 @@ void process_enumhost(SOCKET sock, struct sockaddr_in host, IDirectPlay8Address
     int fromlen = sizeof(from);
     int received = 0;
     HRESULT hr = DPN_OK;
-    struct sockaddr_in6 addr;
+    /*struct sockaddr_in6 addr;
 
     memset (&addr, 0, sizeof(addr));
     addr.sin6_family = AF_INET6;
     addr.sin6_port = htons (DPNA_DPNSVR_PORT);
     inet_pton(AF_INET6, "ff02::130", &addr.sin6_addr);
-
+*/
     setsockopt(sock, SOL_SOCKET, SO_RCVTIMEO, (char *)&timeout, sizeof(timeout));
 
     while(TRUE)
@@ -666,7 +719,7 @@ void process_enumhost(SOCKET sock, struct sockaddr_in host, IDirectPlay8Address
         {
             TRACE("Sending Request.\n");
 
-            if(send_packet_enum_query(sock, application, NULL, 0, &addr, sizeof(struct sockaddr_in6) ) == -1)
+            if(send_packet_enum_query(sock, application, userdata, userdata_size, host, host_size ) == -1)
                 break;
 
             starttime = GetTickCount();
@@ -729,23 +782,31 @@ void process_enumhost(SOCKET sock, struct sockaddr_in host, IDirectPlay8Address
                             response.pAddressSender          = sender;
                             response.pApplicationDescription = &desc;
                             response.pAddressDevice          = device;
+                            response.pvUserContext           = userdata;
 
-                            if(data->reply_offset < received)
+FIXME("offset %d\n", data->response_size);
+                            if(data->response_size && data->reply_offset < received)
                             {
                                 response.pvResponseData = ((char*)data)+data->reply_offset+sizeof(struct ENUM_HEADER);
                                 response.dwResponseDataSize = data->response_size;
                             }
 
+                            if(data->application_size && data->application_offset < received)
+                            {
+                                desc.pvApplicationReservedData = ((char*)data)+data->application_offset+sizeof(struct ENUM_HEADER);
+                                desc.dwApplicationReservedDataSize = data->application_size;
+                            }
+
                             desc.guidInstance     = data->instance;
                             desc.guidApplication  = data->application;
                             desc.dwCurrentPlayers = data->current_players;
                             desc.dwMaxPlayers     = data->max_players;
-
+FIXME("offset %d\n", data->session_offset);
                             if(data->session_offset && data->session_offset < received)
                                 desc.pwszSessionName  = (WCHAR*)(((char*)data)+data->session_offset+sizeof(struct ENUM_HEADER));
-
+FIXME("msghandler Pre %s\n", debugstr_w(desc.pwszSessionName));
                             hr = msghandler(NULL, DPN_MSGID_ENUM_HOSTS_RESPONSE, &response);
-
+FIXME("msghandler ret = 0x%08x\n", hr);
                             IDirectPlay8Address_Release(sender);
 
                             if(retrycnt != INFINITE)
@@ -769,7 +830,7 @@ void process_enumhost(SOCKET sock, struct sockaddr_in host, IDirectPlay8Address
             }
         }
 
-        /* If a userhandler function returns anything other than DPN_OK we need to stop. */
+        /* If a userhandler function returns anything othdpaddress_to_sockaddrer than DPN_OK we need to stop. */
         if(!retrycnt || hr != DPN_OK)
             break;
     }
@@ -779,8 +840,8 @@ DWORD WINAPI enumhost_thread(void *threaddata)
 {
     struct dpthread_data *tdata = (struct dpthread_data *)threaddata;
 
-    process_enumhost(tdata->sock, tdata->host, tdata->device, tdata->msghandler, tdata->app_guid,
-                        tdata->retrycnt, tdata->retrytime, tdata->timeout, tdata->cancelevent);
+    process_enumhost(tdata->sock, &tdata->host, tdata->host_size, tdata->device, tdata->msghandler, tdata->app_guid,
+                        tdata->retrycnt, tdata->retrytime, tdata->timeout, tdata->cancelevent, NULL, 0);
 
     heap_free(threaddata);
 
@@ -797,7 +858,8 @@ static HRESULT WINAPI IDirectPlay8ClientImpl_EnumHosts(IDirectPlay8Client *iface
     IDirectPlay8ClientImpl *This = impl_from_IDirectPlay8Client(iface);
     IDirectPlay8Address *device = NULL;
     HRESULT hr;
-    struct sockaddr_in host;
+    struct sockaddr_storage host;
+    size_t host_size = 0;
 
     TRACE("(%p):(%p,%p,%p,%p,%u,%u,%u,%u,%p,%p,%x)\n", This, pApplicationDesc, pAddrHost, pDeviceInfo,
         pUserEnumData, dwUserEnumDataSize, dwEnumCount, dwRetryInterval, dwTimeOut, pvUserContext, pAsyncHandle,
@@ -830,7 +892,9 @@ static HRESULT WINAPI IDirectPlay8ClientImpl_EnumHosts(IDirectPlay8Client *iface
         return E_OUTOFMEMORY;
     }
 
-    dpaddress_to_sockaddr(pAddrHost, &host);
+    dpaddress_to_sockaddr(pAddrHost, &host, &host_size);
+
+    FIXME("host %p\n", &host);
 
     if(dwFlags & DPNENUMHOSTS_SYNC)
     {
@@ -838,8 +902,8 @@ static HRESULT WINAPI IDirectPlay8ClientImpl_EnumHosts(IDirectPlay8Client *iface
         DWORD retrytime = !dwRetryInterval ? This->spcaps.dwDefaultEnumRetryInterval : dwRetryInterval;
         DWORD timeout   = dwTimeOut == INFINITE ? This->spcaps.dwDefaultEnumTimeout : dwTimeOut;
 
-        process_enumhost(This->sock, host, device, This->msghandler, pApplicationDesc->guidApplication,
-                        retrycnt, retrytime, timeout, NULL);
+        process_enumhost(This->sock, &host, host_size, device, This->msghandler, pApplicationDesc->guidApplication,
+                        retrycnt, retrytime, timeout, NULL, pUserEnumData, dwUserEnumDataSize);
 
         IDirectPlay8Address_Release(device);
     }
@@ -1374,7 +1438,7 @@ static HRESULT WINAPI IDirectPlay8ClientImpl_Connect(IDirectPlay8Client *iface,
         This->connect_size = data_size;
     }
 
-    if(!dpaddress_to_sockaddr(host_addr, &This->serveraddr))
+    if(!dpaddress_to_sockaddr(host_addr, &This->serveraddr, &This->host_size))
     {
         hr = DPNERR_INVALIDHOSTADDRESS;
         goto cleanup;
diff --git a/dlls/dpnet/dpnet_private.h b/dlls/dpnet/dpnet_private.h
index 1872e29..522edc7 100644
--- a/dlls/dpnet/dpnet_private.h
+++ b/dlls/dpnet/dpnet_private.h
@@ -47,7 +47,8 @@ typedef struct IDirectPlay8ThreadPoolImpl IDirectPlay8ThreadPoolImpl;
 struct dpthread_data
 {
     SOCKET sock;
-    struct sockaddr_in host;
+    struct sockaddr_storage host;
+    size_t host_size;
     IDirectPlay8Address *device;
     DWORD retrycnt;
     DWORD retrytime;
@@ -77,10 +78,10 @@ struct connect_data
 };
 
 extern DWORD WINAPI enumhost_thread(void *threaddata) DECLSPEC_HIDDEN;
-extern void process_enumhost(SOCKET sock, struct sockaddr_in host, IDirectPlay8Address *device, PFNDPNMESSAGEHANDLER msghandler, GUID application,
-        DWORD retrycnt, DWORD retrytime, DWORD timeout, HANDLE cancelevent) DECLSPEC_HIDDEN;
+extern void process_enumhost(SOCKET sock, struct sockaddr_storage *host, size_t host_size, IDirectPlay8Address *device, PFNDPNMESSAGEHANDLER msghandler, GUID application,
+        DWORD retrycnt, DWORD retrytime, DWORD timeout, HANDLE cancelevent, void *userdata, DWORD userdata_size) DECLSPEC_HIDDEN;
 extern SOCKET find_free_socket(void) DECLSPEC_HIDDEN;
-extern BOOL dpaddress_to_sockaddr(IDirectPlay8Address *host, struct sockaddr_in *addr) DECLSPEC_HIDDEN;
+extern BOOL dpaddress_to_sockaddr(IDirectPlay8Address *host, struct sockaddr_storage *addr, size_t *addr_size) DECLSPEC_HIDDEN;
 extern BOOL dpaddress_to_sockstorage(IDirectPlay8Address *host, SOCKADDR_STORAGE *addr, size_t *size) DECLSPEC_HIDDEN;
 extern HRESULT dplay_connect(SOCKET sock, void *serveraddr, size_t addr_size, DWORD session,
         const DPN_APPLICATION_DESC * const app_desc, WCHAR *username, HANDLE cancelevent,
@@ -114,7 +115,8 @@ struct IDirectPlay8ClientImpl
     HANDLE enumthread;
     HANDLE cancelevent;
 
-    struct sockaddr_in serveraddr;
+    struct sockaddr_storage serveraddr;
+    size_t host_size;
     HANDLE connectthread;
     DWORD session;
 
diff --git a/dlls/dpnet/peer.c b/dlls/dpnet/peer.c
index 45e1670..db850ca 100644
--- a/dlls/dpnet/peer.c
+++ b/dlls/dpnet/peer.c
@@ -625,7 +625,8 @@ static HRESULT WINAPI IDirectPlay8PeerImpl_EnumHosts(IDirectPlay8Peer *iface,
     IDirectPlay8PeerImpl* This = impl_from_IDirectPlay8Peer(iface);
     IDirectPlay8Address *device = NULL;
     HRESULT hr;
-    struct sockaddr_in host;
+    struct sockaddr_storage host;
+    size_t host_size;
 
     FIXME("(%p)->(%p,%p,%p,%p,%x,%x,%x,%x,%p,%p,%x): stub\n",
             This, pApplicationDesc, pAddrHost, pDeviceInfo, pUserEnumData, dwUserEnumDataSize, dwEnumCount,
@@ -658,7 +659,7 @@ static HRESULT WINAPI IDirectPlay8PeerImpl_EnumHosts(IDirectPlay8Peer *iface,
         return E_OUTOFMEMORY;
     }
 
-    dpaddress_to_sockaddr(pAddrHost, &host);
+    dpaddress_to_sockaddr(pAddrHost, &host, &host_size);
 
     if(dwFlags & DPNENUMHOSTS_SYNC)
     {
@@ -666,8 +667,8 @@ static HRESULT WINAPI IDirectPlay8PeerImpl_EnumHosts(IDirectPlay8Peer *iface,
         DWORD retrytime = !dwRetryInterval ? This->spcaps.dwDefaultEnumRetryInterval : dwRetryInterval;
         DWORD timeout   = dwTimeOut == INFINITE ? This->spcaps.dwDefaultEnumTimeout : dwTimeOut;
 
-        process_enumhost(This->sock, host, device, This->msghandler, pApplicationDesc->guidApplication,
-                        retrycnt, retrytime, timeout, NULL);
+        process_enumhost(This->sock, &host, host_size, device, This->msghandler, pApplicationDesc->guidApplication,
+                        retrycnt, retrytime, timeout, NULL, NULL, 0);
 
         IDirectPlay8Address_Release(device);
     }
-- 
1.9.1

