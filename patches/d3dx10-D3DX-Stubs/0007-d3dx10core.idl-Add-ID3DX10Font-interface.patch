From 0cd63a83f00fe62d3164ffef91ad46f98db5633b Mon Sep 17 00:00:00 2001
From: Alistair Leslie-Hughes <leslie_alistair@hotmail.com>
Date: Fri, 27 Nov 2015 14:35:13 +1100
Subject: [PATCH 07/10] d3dx10core.idl: Add ID3DX10Font interface

Signed-off-by: Alistair Leslie-Hughes <leslie_alistair@hotmail.com>
---
 include/d3dx10core.idl | 70 ++++++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 70 insertions(+)

diff --git a/include/d3dx10core.idl b/include/d3dx10core.idl
index bcaff03..af2fc99 100644
--- a/include/d3dx10core.idl
+++ b/include/d3dx10core.idl
@@ -26,6 +26,7 @@ cpp_quote("#if 0")
 typedef struct D3DXMATRIX D3DXMATRIX;
 typedef struct D3DXVECTOR2 D3DXVECTOR2;
 typedef struct D3DXCOLOR D3DXCOLOR;
+#define LF_FACESIZE         32
 cpp_quote("#endif")
 
 typedef struct _D3DX10_SPRITE
@@ -38,6 +39,36 @@ typedef struct _D3DX10_SPRITE
     UINT        TextureIndex;
 } D3DX10_SPRITE;
 
+typedef struct _D3DX10_FONT_DESCA
+{
+    int Height;
+    UINT Width;
+    UINT Weight;
+    UINT MipLevels;
+    BOOL Italic;
+    BYTE CharSet;
+    BYTE OutputPrecision;
+    BYTE Quality;
+    BYTE PitchAndFamily;
+    char FaceName[LF_FACESIZE];
+
+} D3DX10_FONT_DESCA, *LPD3DX10_FONT_DESCA;
+
+typedef struct _D3DX10_FONT_DESCW
+{
+    int Height;
+    UINT Width;
+    UINT Weight;
+    UINT MipLevels;
+    BOOL Italic;
+    BYTE CharSet;
+    BYTE OutputPrecision;
+    BYTE Quality;
+    BYTE PitchAndFamily;
+    WCHAR FaceName[LF_FACESIZE];
+
+} D3DX10_FONT_DESCW, *LPD3DX10_FONT_DESCW;
+
 [
     object,
     local,
@@ -106,6 +137,45 @@ interface ID3DX10Sprite : IUnknown
     HRESULT GetDevice(ID3D10Device** device);
 };
 
+[
+    object,
+    local,
+    pointer_default(unique),
+    uuid(d79dbb70-5f21-4d36-bbc2-ff525c213cdc)
+]
+interface ID3DX10Font : IUnknown
+{
+    HRESULT GetDevice([out] ID3D10Device** device);
+    HRESULT GetDescA([in] D3DX10_FONT_DESCA *desc);
+    HRESULT GetDescW([in] D3DX10_FONT_DESCW *desc);
+    BOOL GetTextMetricsA([in] TEXTMETRICA *text_metrics);
+    BOOL GetTextMetricsW([in] TEXTMETRICW *text_metrics);
+
+    HDC GetDC();
+    HRESULT GetGlyphData([in] UINT glyph, [out] ID3D10ShaderResourceView** texture,
+            [in] RECT *blackbox, [in] POINT *cellinc);
+
+    HRESULT PreloadCharacters([in] UINT first, [in] UINT last);
+    HRESULT PreloadGlyphs([in] UINT First, [in] UINT Last);
+    HRESULT PreloadTextA([in] const char *string, [in] int count);
+    HRESULT PreloadTextW([in] const WCHAR *string, [in] int count);
+
+    int DrawTextA([in] ID3DX10Sprite *sprite, [in] const char *string, [in] int count,
+            [in] RECT *rect, [in] UINT format, [in] D3DXCOLOR color);
+    int DrawTextW([in] ID3DX10Sprite *sprite, [in] const WCHAR *string, [in] int count,
+            [in] RECT *rect, [in] UINT format, [in] D3DXCOLOR color);
+
+cpp_quote("#ifdef __cplusplus")
+cpp_quote("#ifdef UNICODE")
+cpp_quote("    HRESULT WINAPI_INLINE GetDesc(D3DX10_FONT_DESCW *desc) { return GetDescW(desc); }")
+cpp_quote("    HRESULT WINAPI_INLINE PreloadText(LPCWSTR string, int count) { return PreloadTextW(string, count); }")
+cpp_quote("#else")
+cpp_quote("    HRESULT WINAPI_INLINE GetDesc(D3DX10_FONT_DESCA *desc) { return GetDescA(desc); }")
+cpp_quote("    HRESULT WINAPI_INLINE PreloadText(LPCSTR string, int count) { return PreloadTextA(string, count); }")
+cpp_quote("#endif")
+cpp_quote("#endif")
+};
+
 cpp_quote("#ifdef __cplusplus")
 cpp_quote("extern \"C\" {")
 cpp_quote("#endif")
-- 
1.9.1

