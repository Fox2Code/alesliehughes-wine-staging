From 94893296ca03983bee6c3e9ee211706cc56790d5 Mon Sep 17 00:00:00 2001
From: Alistair Leslie-Hughes <leslie_alistair@hotmail.com>
Date: Mon, 30 Nov 2015 16:11:54 +1100
Subject: [PATCH 9/9] d3dx10: Implement D3DX10CreateFontA/W

Fixes: https://bugs.winehq.org/show_bug.cgi?id=23382
Fixes: https://bugs.winehq.org/show_bug.cgi?id=27738

Signed-off-by: Alistair Leslie-Hughes <leslie_alistair@hotmail.com>
---
 dlls/d3dx10_43/Makefile.in    |   1 +
 dlls/d3dx10_43/d3dx10_43.spec |   4 +-
 dlls/d3dx10_43/font.c         | 282 ++++++++++++++++++++++++++++++++++++++++++
 3 files changed, 285 insertions(+), 2 deletions(-)
 create mode 100644 dlls/d3dx10_43/font.c

diff --git a/dlls/d3dx10_43/Makefile.in b/dlls/d3dx10_43/Makefile.in
index 32a675d..5fb6505 100644
--- a/dlls/d3dx10_43/Makefile.in
+++ b/dlls/d3dx10_43/Makefile.in
@@ -4,6 +4,7 @@ IMPORTS   = dxguid
 
 C_SRCS = \
 	d3dx10_43_main.c \
+	font.c \
 	sprite.c
 
 RC_SRCS = version.rc
diff --git a/dlls/d3dx10_43/d3dx10_43.spec b/dlls/d3dx10_43/d3dx10_43.spec
index 9f225c1..ef40eb1 100644
--- a/dlls/d3dx10_43/d3dx10_43.spec
+++ b/dlls/d3dx10_43/d3dx10_43.spec
@@ -30,10 +30,10 @@
 @ stdcall D3DX10CreateEffectPoolFromMemory(ptr long str ptr ptr str long long ptr ptr ptr ptr ptr)
 @ stub D3DX10CreateEffectPoolFromResourceA(long str str ptr ptr str long long ptr ptr ptr ptr ptr)
 @ stub D3DX10CreateEffectPoolFromResourceW(long wstr wstr ptr ptr str long long ptr ptr ptr ptr ptr)
-@ stub D3DX10CreateFontA(ptr long long long long long long long long long str ptr)
+@ stdcall D3DX10CreateFontA(ptr long long long long long long long long long str ptr)
 @ stub D3DX10CreateFontIndirectA(ptr ptr ptr)
 @ stub D3DX10CreateFontIndirectW(ptr ptr ptr)
-@ stub D3DX10CreateFontW(ptr long long long long long long long long long wstr ptr)
+@ stdcall D3DX10CreateFontW(ptr long long long long long long long long long wstr ptr)
 @ stub D3DX10CreateMesh(ptr ptr long str long long long ptr)
 @ stub D3DX10CreateShaderResourceViewFromFileA(ptr str ptr ptr ptr ptr)
 @ stub D3DX10CreateShaderResourceViewFromFileW(ptr wstr ptr ptr ptr ptr)
diff --git a/dlls/d3dx10_43/font.c b/dlls/d3dx10_43/font.c
new file mode 100644
index 0000000..873b8e3
--- /dev/null
+++ b/dlls/d3dx10_43/font.c
@@ -0,0 +1,282 @@
+/*
+ *
+ * Copyright (c) 2015 Alistair Leslie-Hughes
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
+ *
+ */
+#include "config.h"
+#include "wine/port.h"
+#include "wine/debug.h"
+#include "wine/unicode.h"
+
+#include <stdarg.h>
+
+#define COBJMACROS
+
+#include "windef.h"
+#include "winbase.h"
+#include "winuser.h"
+#include "objbase.h"
+
+#include "d3dx10.h"
+
+WINE_DEFAULT_DEBUG_CHANNEL(d3dx);
+
+static inline LPWSTR strAtoW( LPCSTR str )
+{
+    LPWSTR ret = NULL;
+    if (str)
+    {
+        DWORD len = MultiByteToWideChar( CP_ACP, 0, str, -1, NULL, 0 );
+        if ((ret = HeapAlloc( GetProcessHeap(), 0, len * sizeof(WCHAR) )))
+            MultiByteToWideChar( CP_ACP, 0, str, -1, ret, len );
+    }
+    return ret;
+}
+
+
+struct d3dx10_font
+{
+    ID3DX10Font ID3DX10Font_iface;
+    LONG ref;
+
+    ID3D10Device *device;
+};
+
+static inline struct d3dx10_font *impl_from_ID3DX10Font(ID3DX10Font *iface)
+{
+    return CONTAINING_RECORD(iface, struct d3dx10_font, ID3DX10Font_iface);
+}
+
+static HRESULT WINAPI dx10_font_QueryInterface(ID3DX10Font *iface, REFIID riid, void **out)
+{
+    TRACE("iface %p, riid %s, out %p.\n", iface, debugstr_guid(riid), out);
+
+    if (IsEqualGUID(riid, &IID_ID3DX10Font)
+            || IsEqualGUID(riid, &IID_IUnknown))
+    {
+        IUnknown_AddRef(iface);
+        *out = iface;
+        return S_OK;
+    }
+
+    WARN("%s not implemented, returning E_NOINTERFACE.\n", debugstr_guid(riid));
+
+    *out = NULL;
+    return E_NOINTERFACE;
+}
+
+static ULONG WINAPI dx10_font_AddRef(ID3DX10Font *iface)
+{
+    struct d3dx10_font *This = impl_from_ID3DX10Font(iface);
+    ULONG refcount = InterlockedIncrement(&This->ref);
+
+    TRACE("%p increasing refcount to %u.\n", iface, refcount);
+
+    return refcount;
+}
+
+static ULONG WINAPI dx10_font_Release(ID3DX10Font *iface)
+{
+    struct d3dx10_font *This = impl_from_ID3DX10Font(iface);
+    ULONG refcount = InterlockedDecrement(&This->ref);
+
+    TRACE("%p decreasing refcount to %u.\n", iface, refcount);
+
+    if (!refcount)
+    {
+        HeapFree(GetProcessHeap(), 0, This);
+    }
+
+    return refcount;
+}
+
+static HRESULT WINAPI dx10_font_GetDevice(ID3DX10Font *iface, ID3D10Device **device)
+{
+    struct d3dx10_font *This = impl_from_ID3DX10Font(iface);
+
+    TRACE("iface %p, device %p.\n", iface, device);
+
+    if (!device)
+        return D3DERR_INVALIDCALL;
+
+    *device = This->device;
+    ID3D10Device_AddRef(This->device);
+
+    return S_OK;
+}
+
+static HRESULT WINAPI dx10_font_GetDescA(ID3DX10Font *iface, D3DX10_FONT_DESCA *desc)
+{
+    FIXME("iface %p, desc %p.\n", iface, desc);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI dx10_font_GetDescW(ID3DX10Font *iface, D3DX10_FONT_DESCW *desc)
+{
+    FIXME("iface %p, desc %p.\n", iface, desc);
+
+    return E_NOTIMPL;
+}
+
+static BOOL WINAPI dx10_font_GetTextMetricsA(ID3DX10Font *iface, TEXTMETRICA *text_metrics)
+{
+    FIXME("iface %p, text_metrics %p.\n", iface, text_metrics);
+
+    return E_NOTIMPL;
+}
+
+static BOOL WINAPI dx10_font_GetTextMetricsW(ID3DX10Font *iface, TEXTMETRICW *text_metrics)
+{
+    FIXME("iface %p, text_metrics %p.\n", iface, text_metrics);
+
+    return E_NOTIMPL;
+}
+
+static HDC WINAPI dx10_font_GetDC(ID3DX10Font *iface)
+{
+    FIXME("iface %p.\n", iface);
+
+    return NULL;
+}
+
+static HRESULT WINAPI dx10_font_GetGlyphData(ID3DX10Font *iface, UINT glyph, ID3D10ShaderResourceView **texture,
+    RECT *blackbox, POINT *cellinc)
+{
+    FIXME("iface %p, glyph %u, texture %p, blackbox %p,  cellinc %p.\n", iface, glyph, texture, blackbox, cellinc);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI dx10_font_PreloadCharacters(ID3DX10Font *iface, UINT first, UINT last)
+{
+    FIXME("iface %p, first %u, last %u.\n", iface, first, last);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI dx10_font_PreloadGlyphs(ID3DX10Font *iface, UINT first, UINT last)
+{
+    FIXME("iface %p, first %u, last %u.\n", iface, first, last);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI dx10_font_PreloadTextA(ID3DX10Font *iface, const char *string, int count)
+{
+    FIXME("iface %p, string %s, count %d.\n", iface, debugstr_a(string), count);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI dx10_font_PreloadTextW(ID3DX10Font *iface, const WCHAR *string, int count)
+{
+    FIXME("iface %p, string %s, count %d.\n", iface, debugstr_w(string), count);
+
+    return E_NOTIMPL;
+}
+
+static int WINAPI dx10_font_DrawTextA(ID3DX10Font *iface, ID3DX10Sprite *sprite, const char *string,
+    int count, RECT *rect, UINT format, D3DXCOLOR color)
+{
+    FIXME("iface %p, string %s, count %d, rect %p, format %u.\n", iface, debugstr_a(string),
+        count, rect, format);
+
+    return E_NOTIMPL;
+}
+
+static int WINAPI dx10_font_DrawTextW(ID3DX10Font *iface, ID3DX10Sprite *sprite, const WCHAR *string,
+    int count, RECT *rect, UINT format, D3DXCOLOR color)
+{
+    FIXME("iface %p, string %s, count %d, rect %p, format %u.\n", iface, debugstr_w(string),
+        count, rect, format);
+
+    return E_NOTIMPL;
+}
+
+static const ID3DX10FontVtbl d3dx10_font_vtbl =
+{
+    dx10_font_QueryInterface,
+    dx10_font_AddRef,
+    dx10_font_Release,
+    dx10_font_GetDevice,
+    dx10_font_GetDescA,
+    dx10_font_GetDescW,
+    dx10_font_GetTextMetricsA,
+    dx10_font_GetTextMetricsW,
+    dx10_font_GetDC,
+    dx10_font_GetGlyphData,
+    dx10_font_PreloadCharacters,
+    dx10_font_PreloadGlyphs,
+    dx10_font_PreloadTextA,
+    dx10_font_PreloadTextW,
+    dx10_font_DrawTextA,
+    dx10_font_DrawTextW,
+};
+
+static HRESULT create_font_object(ID3D10Device *device, int height, UINT width, UINT weight, UINT mip_levels,
+        BOOL italic, UINT charset, UINT precision, UINT quality, UINT pitch, const WCHAR *facename, ID3DX10Font **font)
+{
+    struct d3dx10_font *object;
+
+    if (!device || !font)
+        return D3DERR_INVALIDCALL;
+
+    if (!(object=HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, sizeof(*object))))
+    {
+        *font = NULL;
+        return E_OUTOFMEMORY;
+    }
+    object->ID3DX10Font_iface.lpVtbl = &d3dx10_font_vtbl;
+    object->ref=1;
+    object->device=device;
+    IUnknown_AddRef(device);
+
+    *font = &object->ID3DX10Font_iface;
+
+    return S_OK;
+}
+
+HRESULT WINAPI D3DX10CreateFontA(ID3D10Device *device, int height, UINT width, UINT weight, UINT mip_levels,
+        BOOL italic, UINT charset, UINT precision, UINT quality, UINT pitch, const char *facename, ID3DX10Font **font)
+{
+    WCHAR *name = strAtoW(facename);
+    HRESULT hr;
+
+    TRACE("device %p, height %d, width %u, weight %u, mip_levels %u, italic %d, charset %u, precision %u, "
+            "quality %u, pitch %u, facename %s, font %p.\n",
+            device, height, width, weight, mip_levels, italic, charset, precision, quality, pitch,
+            debugstr_a(facename), font);
+
+    hr = create_font_object(device, height, width, weight, mip_levels, italic, charset, precision, quality, pitch,
+        name, font);
+    HeapFree( GetProcessHeap(), 0, name);
+
+    return hr;
+}
+
+HRESULT WINAPI D3DX10CreateFontW(ID3D10Device *device, int height, UINT width, UINT weight, UINT mip_levels,
+        BOOL italic, UINT charset, UINT precision, UINT quality, UINT pitch, const WCHAR *facename, ID3DX10Font **font)
+{
+    TRACE("device %p, height %d, width %u, weight %u, mip_levels %u, italic %d, charset %u, precision %u, "
+            "quality %u, pitch %u, facename %s, font %p.\n",
+            device, height, width, weight, mip_levels, italic, charset, precision, quality, pitch,
+            debugstr_w(facename), font);
+
+    return create_font_object(device, height, width, weight, mip_levels, italic, charset, precision, quality, pitch,
+        facename, font);
+}
-- 
1.9.1

