From b9eda816bfd38e71bef9f57cef04741e6479d26b Mon Sep 17 00:00:00 2001
From: Alistair Leslie-Hughes <leslie_alistair@hotmail.com>
Date: Fri, 27 Nov 2015 11:35:36 +1100
Subject: [PATCH 07/10] d3dx10: Implement D3DX10CreateSprite

Fixes: https://bugs.winehq.org/show_bug.cgi?id=27737

Signed-off-by: Alistair Leslie-Hughes <leslie_alistair@hotmail.com>
---
 dlls/d3dx10_43/Makefile.in      |   4 +-
 dlls/d3dx10_43/d3dx10_43.spec   |   2 +-
 dlls/d3dx10_43/d3dx10_43_main.c |   4 +-
 dlls/d3dx10_43/sprite.c         | 212 ++++++++++++++++++++++++++++++++++++++++
 4 files changed, 218 insertions(+), 4 deletions(-)
 create mode 100644 dlls/d3dx10_43/sprite.c

diff --git a/dlls/d3dx10_43/Makefile.in b/dlls/d3dx10_43/Makefile.in
index cb48f0d..32a675d 100644
--- a/dlls/d3dx10_43/Makefile.in
+++ b/dlls/d3dx10_43/Makefile.in
@@ -1,7 +1,9 @@
 MODULE    = d3dx10_43.dll
 IMPORTLIB = d3dx10
+IMPORTS   = dxguid
 
 C_SRCS = \
-	d3dx10_43_main.c
+	d3dx10_43_main.c \
+	sprite.c
 
 RC_SRCS = version.rc
diff --git a/dlls/d3dx10_43/d3dx10_43.spec b/dlls/d3dx10_43/d3dx10_43.spec
index 9edcf54..714e69f 100644
--- a/dlls/d3dx10_43/d3dx10_43.spec
+++ b/dlls/d3dx10_43/d3dx10_43.spec
@@ -41,7 +41,7 @@
 @ stub D3DX10CreateShaderResourceViewFromResourceA(ptr long str ptr ptr ptr ptr)
 @ stub D3DX10CreateShaderResourceViewFromResourceW(ptr long wstr ptr ptr ptr ptr)
 @ stub D3DX10CreateSkinInfo(ptr)
-@ stub D3DX10CreateSprite(ptr long ptr)
+@ stdcall D3DX10CreateSprite(ptr long ptr)
 @ stub D3DX10CreateTextureFromFileA(ptr str ptr ptr ptr ptr)
 @ stub D3DX10CreateTextureFromFileW(ptr wstr ptr ptr ptr ptr)
 @ stub D3DX10CreateTextureFromMemory(ptr ptr long ptr ptr ptr ptr)
diff --git a/dlls/d3dx10_43/d3dx10_43_main.c b/dlls/d3dx10_43/d3dx10_43_main.c
index 6637af3..be0045e 100644
--- a/dlls/d3dx10_43/d3dx10_43_main.c
+++ b/dlls/d3dx10_43/d3dx10_43_main.c
@@ -23,6 +23,7 @@
 #include "wine/port.h"
 #include "wine/debug.h"
 #include "wine/unicode.h"
+#include "initguid.h"
 
 #include <stdarg.h>
 
@@ -33,8 +34,7 @@
 #include "winuser.h"
 #include "objbase.h"
 
-#include "d3d10.h"
-#include "d3dx10core.h"
+#include "d3dx10.h"
 
 WINE_DEFAULT_DEBUG_CHANNEL(d3dx);
 
diff --git a/dlls/d3dx10_43/sprite.c b/dlls/d3dx10_43/sprite.c
new file mode 100644
index 0000000..d87bc23
--- /dev/null
+++ b/dlls/d3dx10_43/sprite.c
@@ -0,0 +1,212 @@
+/*
+ *
+ * Copyright (c) 2015 Alistair Leslie-Hughes
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
+ *
+ */
+#include "config.h"
+#include "wine/port.h"
+#include "wine/debug.h"
+#include "wine/unicode.h"
+
+#include <stdarg.h>
+
+#define COBJMACROS
+
+#include "windef.h"
+#include "winbase.h"
+#include "winuser.h"
+#include "objbase.h"
+
+#include "d3dx10.h"
+
+WINE_DEFAULT_DEBUG_CHANNEL(d3dx);
+
+struct d3dx10_sprite
+{
+    ID3DX10Sprite ID3DX10Sprite_iface;
+    LONG ref;
+
+    ID3D10Device *device;
+};
+
+static inline struct d3dx10_sprite *impl_from_ID3DX10Sprite(ID3DX10Sprite *iface)
+{
+    return CONTAINING_RECORD(iface, struct d3dx10_sprite, ID3DX10Sprite_iface);
+}
+
+static HRESULT WINAPI dx10_sprite_QueryInterface(ID3DX10Sprite *iface, REFIID riid, void **out)
+{
+    TRACE("iface %p, riid %s, out %p.\n", iface, debugstr_guid(riid), out);
+
+    if (IsEqualGUID(riid, &IID_ID3DX10Sprite)
+            || IsEqualGUID(riid, &IID_IUnknown))
+    {
+        IUnknown_AddRef(iface);
+        *out = iface;
+        return S_OK;
+    }
+
+    WARN("%s not implemented, returning E_NOINTERFACE.\n", debugstr_guid(riid));
+
+    *out = NULL;
+    return E_NOINTERFACE;
+}
+
+static ULONG WINAPI dx10_sprite_AddRef(ID3DX10Sprite *iface)
+{
+    struct d3dx10_sprite *This = impl_from_ID3DX10Sprite(iface);
+    ULONG refcount = InterlockedIncrement(&This->ref);
+
+    TRACE("%p increasing refcount to %u.\n", iface, refcount);
+
+    return refcount;
+}
+
+static ULONG WINAPI dx10_sprite_Release(ID3DX10Sprite *iface)
+{
+    struct d3dx10_sprite *This = impl_from_ID3DX10Sprite(iface);
+    ULONG refcount = InterlockedDecrement(&This->ref);
+
+    TRACE("%p decreasing refcount to %u.\n", iface, refcount);
+
+    if (!refcount)
+    {
+        HeapFree(GetProcessHeap(), 0, This);
+    }
+
+    return refcount;
+}
+
+static HRESULT WINAPI dx10_sprite_Begin(ID3DX10Sprite *iface, UINT flags)
+{
+    FIXME("iface %p, flags %u.\n", iface, flags);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI dx10_sprite_DrawSpritesBuffered(ID3DX10Sprite *iface, D3DX10_SPRITE *sprites, UINT sprites_cnt)
+{
+    FIXME("iface %p, sprites %p, sprites_cnt %u.\n", iface, sprites, sprites_cnt);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI dx10_sprite_Flush(ID3DX10Sprite *iface)
+{
+    FIXME("iface %p.\n", iface);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI dx10_sprite_DrawSpritesImmediate(ID3DX10Sprite *iface, D3DX10_SPRITE *sprites,
+        UINT sprites_cnt, UINT sprite, UINT flags)
+{
+    FIXME("iface %p, sprites %p, sprites_cnt %u, sprite %u, flags %u.\n", iface, sprites, sprites_cnt, sprite, flags);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI dx10_sprite_End(ID3DX10Sprite *iface)
+{
+    FIXME("iface %p.\n", iface);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI dx10_sprite_GetViewTransform(ID3DX10Sprite *iface, D3DXMATRIX *view_transform)
+{
+    FIXME("iface %p, view_transform %p.\n", iface, view_transform);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI dx10_sprite_SetViewTransform(ID3DX10Sprite *iface, D3DXMATRIX *view_transform)
+{
+    FIXME("iface %p, view_transform %p.\n", iface, view_transform);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI dx10_sprite_GetProjectionTransform(ID3DX10Sprite *iface, D3DXMATRIX *projection_transform)
+{
+    FIXME("iface %p, projection_transform %p.\n", iface, projection_transform);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI dx10_sprite_SetProjectionTransform(ID3DX10Sprite *iface, D3DXMATRIX *projection_transform)
+{
+    FIXME("iface %p, projection_transform %p.\n", iface, projection_transform);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI dx10_sprite_GetDevice(ID3DX10Sprite *iface, ID3D10Device **device)
+{
+    struct d3dx10_sprite *This = impl_from_ID3DX10Sprite(iface);
+
+    TRACE("iface %p, device %p.\n", iface, device);
+
+    if (!device)
+        return D3DERR_INVALIDCALL;
+
+    *device = This->device;
+    ID3D10Device_AddRef(This->device);
+
+    return S_OK;
+}
+
+static const ID3DX10SpriteVtbl d3dx10_sprite_vtbl =
+{
+    dx10_sprite_QueryInterface,
+    dx10_sprite_AddRef,
+    dx10_sprite_Release,
+    dx10_sprite_Begin,
+    dx10_sprite_DrawSpritesBuffered,
+    dx10_sprite_Flush,
+    dx10_sprite_DrawSpritesImmediate,
+    dx10_sprite_End,
+    dx10_sprite_GetViewTransform,
+    dx10_sprite_SetViewTransform,
+    dx10_sprite_GetProjectionTransform,
+    dx10_sprite_SetProjectionTransform,
+    dx10_sprite_GetDevice
+};
+
+HRESULT WINAPI D3DX10CreateSprite(ID3D10Device *device, UINT size, ID3DX10Sprite **sprite)
+{
+    struct d3dx10_sprite *object;
+
+    TRACE("device %p, size %u, sprite %p.\n", device, size, sprite);
+
+    if (!device || !sprite)
+        return D3DERR_INVALIDCALL;
+
+    if (!(object=HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, sizeof(*object))))
+    {
+        *sprite = NULL;
+        return E_OUTOFMEMORY;
+    }
+    object->ID3DX10Sprite_iface.lpVtbl = &d3dx10_sprite_vtbl;
+    object->ref=1;
+    object->device=device;
+    IUnknown_AddRef(device);
+
+    *sprite = &object->ID3DX10Sprite_iface;
+
+    return S_OK;
+}
-- 
2.6.2

