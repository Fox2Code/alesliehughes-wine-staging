From 51bf8245b54ddda4a2a99e02bb01a6c756afa260 Mon Sep 17 00:00:00 2001
From: Alistair Leslie-Hughes <leslie_alistair@hotmail.com>
Date: Fri, 27 Nov 2015 14:21:33 +1100
Subject: [PATCH 7/9] d3dx10_43/tests: Add D3DX10CreateSprite tests

Signed-off-by: Alistair Leslie-Hughes <leslie_alistair@hotmail.com>
---
 configure                        |   1 +
 configure.ac                     |   1 +
 dlls/d3dx10_43/tests/Makefile.in |   5 ++
 dlls/d3dx10_43/tests/core.c      | 106 +++++++++++++++++++++++++++++++++++++++
 4 files changed, 113 insertions(+)
 create mode 100644 dlls/d3dx10_43/tests/Makefile.in
 create mode 100644 dlls/d3dx10_43/tests/core.c

diff --git a/configure b/configure
index 3787828..ddcc4b3 100755
--- a/configure
+++ b/configure
@@ -17452,6 +17452,7 @@ wine_fn_config_dll d3dx10_40 enable_d3dx10_40
 wine_fn_config_dll d3dx10_41 enable_d3dx10_41
 wine_fn_config_dll d3dx10_42 enable_d3dx10_42
 wine_fn_config_dll d3dx10_43 enable_d3dx10_43 implib d3dx10
+wine_fn_config_test dlls/d3dx10_43/tests d3dx10_43_test
 wine_fn_config_dll d3dx11_42 enable_d3dx11_42
 wine_fn_config_dll d3dx11_43 enable_d3dx11_43
 wine_fn_config_dll d3dx9_24 enable_d3dx9_24
diff --git a/configure.ac b/configure.ac
index 86f12c5..33b2f2b 100644
--- a/configure.ac
+++ b/configure.ac
@@ -2792,6 +2792,7 @@ WINE_CONFIG_DLL(d3dx10_40)
 WINE_CONFIG_DLL(d3dx10_41)
 WINE_CONFIG_DLL(d3dx10_42)
 WINE_CONFIG_DLL(d3dx10_43,,[implib],[d3dx10])
+WINE_CONFIG_TEST(dlls/d3dx10_43/tests)
 WINE_CONFIG_DLL(d3dx11_42)
 WINE_CONFIG_DLL(d3dx11_43)
 WINE_CONFIG_DLL(d3dx9_24)
diff --git a/dlls/d3dx10_43/tests/Makefile.in b/dlls/d3dx10_43/tests/Makefile.in
new file mode 100644
index 0000000..0ac05a2
--- /dev/null
+++ b/dlls/d3dx10_43/tests/Makefile.in
@@ -0,0 +1,5 @@
+TESTDLL   = d3dx10_43.dll
+IMPORTS   = d3d10 d3dx10 dxguid
+
+C_SRCS = \
+	core.c
diff --git a/dlls/d3dx10_43/tests/core.c b/dlls/d3dx10_43/tests/core.c
new file mode 100644
index 0000000..b3679f1
--- /dev/null
+++ b/dlls/d3dx10_43/tests/core.c
@@ -0,0 +1,106 @@
+/*
+ *
+ * Copyright (c) 2015 Alistair Leslie-Hughes
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
+ *
+ */
+#define COBJMACROS
+#include "wine/test.h"
+
+#include "d3dx10.h"
+
+#define admitted_error 0.0001f
+static inline void check_mat(D3DXMATRIX got, D3DXMATRIX exp)
+{
+    int i, j, equal=1;
+    for (i=0; i<4; i++)
+        for (j=0; j<4; j++)
+            if (fabs(U(exp).m[i][j]-U(got).m[i][j]) > admitted_error)
+                equal=0;
+
+    ok(equal, "Got matrix\n\t(%f,%f,%f,%f\n\t %f,%f,%f,%f\n\t %f,%f,%f,%f\n\t %f,%f,%f,%f)\n"
+       "Expected matrix=\n\t(%f,%f,%f,%f\n\t %f,%f,%f,%f\n\t %f,%f,%f,%f\n\t %f,%f,%f,%f)\n",
+       U(got).m[0][0],U(got).m[0][1],U(got).m[0][2],U(got).m[0][3],
+       U(got).m[1][0],U(got).m[1][1],U(got).m[1][2],U(got).m[1][3],
+       U(got).m[2][0],U(got).m[2][1],U(got).m[2][2],U(got).m[2][3],
+       U(got).m[3][0],U(got).m[3][1],U(got).m[3][2],U(got).m[3][3],
+       U(exp).m[0][0],U(exp).m[0][1],U(exp).m[0][2],U(exp).m[0][3],
+       U(exp).m[1][0],U(exp).m[1][1],U(exp).m[1][2],U(exp).m[1][3],
+       U(exp).m[2][0],U(exp).m[2][1],U(exp).m[2][2],U(exp).m[2][3],
+       U(exp).m[3][0],U(exp).m[3][1],U(exp).m[3][2],U(exp).m[3][3]);
+}
+
+static ID3D10Device *create_device(void)
+{
+    ID3D10Device *device;
+
+    if (SUCCEEDED(D3D10CreateDevice(NULL, D3D10_DRIVER_TYPE_HARDWARE, NULL, 0, D3D10_SDK_VERSION, &device)))
+        return device;
+    if (SUCCEEDED(D3D10CreateDevice(NULL, D3D10_DRIVER_TYPE_WARP, NULL, 0, D3D10_SDK_VERSION, &device)))
+        return device;
+    if (SUCCEEDED(D3D10CreateDevice(NULL, D3D10_DRIVER_TYPE_REFERENCE, NULL, 0, D3D10_SDK_VERSION, &device)))
+        return device;
+
+    return NULL;
+}
+
+static void test_create_sprite(void)
+{
+    ID3D10Device *device;
+    ID3DX10Sprite *sprite;
+    HRESULT hr;
+    D3DXMATRIX mat;
+    D3DXMATRIX identity;
+
+    if (!(device = create_device()))
+    {
+        skip("Failed to create device, skipping tests.\n");
+        return;
+    }
+
+    hr = D3DX10CreateSprite(device, 0, NULL);
+    ok (hr == D3DERR_INVALIDCALL, "returned %#x, expected %#x\n", hr, D3DERR_INVALIDCALL);
+
+    hr = D3DX10CreateSprite(device, 0, &sprite);
+    ok(hr == S_OK, "returned %#x, expected %#x\n", hr, S_OK);
+    if (hr == S_OK)
+    {
+        ID3D10Device *devicetmp;
+
+        D3DXMatrixIdentity(&identity);
+
+        hr = ID3DX10Sprite_GetDevice(sprite, &devicetmp);
+        ok(hr == S_OK, "returned %#x, expected %#x\n", hr, S_OK);
+        ok(devicetmp == device, "Invalid device returned\n");
+
+        hr = ID3DX10Sprite_GetProjectionTransform(sprite, &mat);
+        todo_wine ok(hr == S_OK, "returned %#x, expected %#x\n", hr, S_OK);
+        todo_wine check_mat(mat, identity);
+
+        hr = ID3DX10Sprite_GetViewTransform(sprite, &mat);
+        todo_wine ok(hr == S_OK, "returned %#x, expected %#x\n", hr, S_OK);
+        todo_wine check_mat(mat, identity);
+
+        ID3DX10Sprite_Release(sprite);
+    }
+
+    ID3D10Device_Release(device);
+}
+
+START_TEST(core)
+{
+    test_create_sprite();
+}
\ No newline at end of file
-- 
1.9.1

