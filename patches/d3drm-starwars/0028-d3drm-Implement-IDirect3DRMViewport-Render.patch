From e7ab3fc90ed420227ab2e94f413cf7f426aefd59 Mon Sep 17 00:00:00 2001
From: Alistair Leslie-Hughes <leslie_alistair@hotmail.com>
Date: Wed, 22 Jun 2022 10:09:17 +1000
Subject: [PATCH] d3drm: Implement IDirect3DRMViewport Render

---
 dlls/d3drm/Makefile.in     |  2 +-
 dlls/d3drm/d3drm_private.h |  3 ++
 dlls/d3drm/device.c        |  9 +++++
 dlls/d3drm/frame.c         | 10 ++++-
 dlls/d3drm/texture.c       | 15 +++++++
 dlls/d3drm/viewport.c      | 82 +++++++++++++++++++++++++++++++++++++-
 6 files changed, 117 insertions(+), 4 deletions(-)

diff --git a/dlls/d3drm/Makefile.in b/dlls/d3drm/Makefile.in
index 8daaa426c8f..d243ced546d 100644
--- a/dlls/d3drm/Makefile.in
+++ b/dlls/d3drm/Makefile.in
@@ -1,6 +1,6 @@
 MODULE    = d3drm.dll
 IMPORTLIB = d3drm
-IMPORTS   = d3dxof ddraw
+IMPORTS   = d3dxof ddraw gdi32
 
 EXTRADLLFLAGS = -Wb,--prefer-native
 
diff --git a/dlls/d3drm/d3drm_private.h b/dlls/d3drm/d3drm_private.h
index 7cc5fed45c9..4dbdecaba7a 100644
--- a/dlls/d3drm/d3drm_private.h
+++ b/dlls/d3drm/d3drm_private.h
@@ -292,8 +292,11 @@ void d3drm_object_cleanup(IDirect3DRMObject *iface, struct d3drm_object *object)
 struct d3drm_frame *unsafe_impl_from_IDirect3DRMFrame(IDirect3DRMFrame *iface) DECLSPEC_HIDDEN;
 struct d3drm_frame *unsafe_impl_from_IDirect3DRMFrame3(IDirect3DRMFrame3 *iface) DECLSPEC_HIDDEN;
 
+struct d3drm_device *unsafe_impl_from_IDirect3DRMDevice(IDirect3DRMDevice *iface) DECLSPEC_HIDDEN;
 struct d3drm_device *unsafe_impl_from_IDirect3DRMDevice3(IDirect3DRMDevice3 *iface) DECLSPEC_HIDDEN;
 
+struct d3drm_texture *unsafe_impl_from_IDirect3DRMTexture(IDirect3DRMTexture *iface) DECLSPEC_HIDDEN;
+
 HRESULT d3drm_texture_create(struct d3drm_texture **texture, IDirect3DRM *d3drm) DECLSPEC_HIDDEN;
 HRESULT d3drm_frame_create(struct d3drm_frame **frame, IUnknown *parent_frame, IDirect3DRM *d3drm) DECLSPEC_HIDDEN;
 HRESULT d3drm_face_create(struct d3drm_face **face) DECLSPEC_HIDDEN;
diff --git a/dlls/d3drm/device.c b/dlls/d3drm/device.c
index 2fc83b4159c..15b788d9f24 100644
--- a/dlls/d3drm/device.c
+++ b/dlls/d3drm/device.c
@@ -1644,6 +1644,15 @@ static const struct IDirect3DRMWinDeviceVtbl d3drm_device_win_vtbl =
     d3drm_device_win_HandleActivate,
 };
 
+struct d3drm_device *unsafe_impl_from_IDirect3DRMDevice(IDirect3DRMDevice *iface)
+{
+    if (!iface)
+        return NULL;
+    assert(iface->lpVtbl == &d3drm_device1_vtbl);
+
+    return impl_from_IDirect3DRMDevice(iface);
+}
+
 struct d3drm_device *unsafe_impl_from_IDirect3DRMDevice3(IDirect3DRMDevice3 *iface)
 {
     if (!iface)
diff --git a/dlls/d3drm/frame.c b/dlls/d3drm/frame.c
index cf5fe1b7414..9075f47553c 100644
--- a/dlls/d3drm/frame.c
+++ b/dlls/d3drm/frame.c
@@ -3154,9 +3154,15 @@ struct d3drm_frame *unsafe_impl_from_IDirect3DRMFrame(IDirect3DRMFrame *iface)
 {
     if (!iface)
         return NULL;
-    assert(iface->lpVtbl == &d3drm_frame1_vtbl);
 
-    return impl_from_IDirect3DRMFrame(iface);
+    if (iface->lpVtbl == &d3drm_frame1_vtbl)
+        return impl_from_IDirect3DRMFrame(iface);
+    else if (iface->lpVtbl == (void*)&d3drm_frame2_vtbl)
+        return impl_from_IDirect3DRMFrame2((IDirect3DRMFrame2*)iface);
+
+    ERR("invalid IDirect3DRMFrame pointer: %p\n", iface);
+
+    return NULL;
 }
 
 HRESULT d3drm_frame_create(struct d3drm_frame **frame, IUnknown *parent_frame, IDirect3DRM *d3drm)
diff --git a/dlls/d3drm/texture.c b/dlls/d3drm/texture.c
index 3e4c94fda23..37b72f285dd 100644
--- a/dlls/d3drm/texture.c
+++ b/dlls/d3drm/texture.c
@@ -1454,6 +1454,21 @@ static const struct IDirect3DRMTexture3Vtbl d3drm_texture3_vtbl =
     d3drm_texture3_SetValidationCallback,
 };
 
+struct d3drm_texture *unsafe_impl_from_IDirect3DRMTexture(IDirect3DRMTexture *iface)
+{
+    {
+    if (!iface)
+        return NULL;
+
+    if (iface->lpVtbl == &d3drm_texture1_vtbl)
+        return impl_from_IDirect3DRMTexture(iface);
+
+    ERR("invalid IDirect3DRMTexture pointer: %p\n", iface);
+
+    return NULL;
+}
+}
+
 HRESULT d3drm_texture_create(struct d3drm_texture **texture, IDirect3DRM *d3drm)
 {
     static const char classname[] = "Texture";
diff --git a/dlls/d3drm/viewport.c b/dlls/d3drm/viewport.c
index 7261d6458bb..3c985cc146b 100644
--- a/dlls/d3drm/viewport.c
+++ b/dlls/d3drm/viewport.c
@@ -477,9 +477,89 @@ static HRESULT WINAPI d3drm_viewport2_Render(IDirect3DRMViewport2 *iface, IDirec
     return D3DRM_OK;
 }
 
+static HRESULT create_surface_from_image(IDirectDraw *ddraw, D3DRMIMAGE *image, IDirectDrawSurface **out)
+{
+    IDirectDrawSurface *surface;
+    DDSURFACEDESC desc;
+    HRESULT hr;
+    HBITMAP bitmap;
+    HDC hdc, hdcImage;
+
+    DDBLTFX BltFx;
+
+    memset(&desc, 0, sizeof(desc));
+    desc.dwSize = sizeof(desc);
+    desc.dwFlags = DDSD_CAPS | DDSD_HEIGHT | DDSD_WIDTH | DDSD_PIXELFORMAT;
+    desc.ddsCaps.dwCaps = DDSCAPS_SYSTEMMEMORY | DDSCAPS_TEXTURE;
+    desc.dwWidth = image->width;
+    desc.dwHeight = image->height;
+    desc.u1.lPitch = 3;
+
+    desc.ddpfPixelFormat.dwSize = sizeof(desc.ddpfPixelFormat);
+    desc.ddpfPixelFormat.dwFlags = DDPF_RGB;
+
+    desc.ddpfPixelFormat.u1.dwRGBBitCount = 16;
+    desc.ddpfPixelFormat.u2.dwRBitMask = 0x00007c00;
+    desc.ddpfPixelFormat.u3.dwGBitMask = 0x000003e0;
+    desc.ddpfPixelFormat.u4.dwBBitMask = 0x0000001f;
+
+    hr = IDirectDraw_CreateSurface(ddraw, &desc, &surface, NULL);
+    if (FAILED(hr))
+        return hr;
+
+    bitmap = CreateBitmap(image->width, image->height, 1, 1, image->buffer1);
+    if(!bitmap)
+    {
+        ERR("Failed to create Bitmap\n");
+        IDirectDrawSurface_Release(surface);
+        return E_FAIL;
+    }
+
+    hdcImage = CreateCompatibleDC(NULL);
+    SelectObject(hdcImage, bitmap);
+
+    IDirectDrawSurface_GetDC(surface, &hdc);
+    BitBlt(hdc, 0, 0, image->width, image->height, hdcImage, 0, 0, SRCCOPY);
+    IDirectDrawSurface_ReleaseDC(surface, hdc);
+    DeleteDC(hdcImage);
+    DeleteObject(hdcImage);
+
+    *out = surface;
+
+    return hr;
+}
+
 static HRESULT WINAPI d3drm_viewport1_Render(IDirect3DRMViewport *iface, IDirect3DRMFrame *frame)
 {
-    FIXME("iface %p, frame %p stub!\n", iface, frame);
+    struct d3drm_viewport *viewport = impl_from_IDirect3DRMViewport(iface);
+    struct d3drm_frame *drmframe = unsafe_impl_from_IDirect3DRMFrame(frame);
+    HRESULT hr;
+
+    TRACE("iface %p, frame %p\n", iface, frame);
+
+    if (drmframe->backgroundimage)
+    {
+        IDirect3DRMTexture *drmtexture;
+
+        hr = IUnknown_QueryInterface(drmframe->backgroundimage, &IID_IDirect3DRMTexture, (void**)&drmtexture);
+        if (hr == S_OK)
+        {
+            struct d3drm_texture *texture = unsafe_impl_from_IDirect3DRMTexture(drmtexture);
+            if (!texture)
+            {
+                FIXME("Unsupported IDirect3DRMTexture interface\n");
+                return D3DRM_OK;
+            }
+
+            if (!texture->surface)
+                hr = create_surface_from_image(viewport->device->ddraw, texture->image, &texture->surface);
+
+            hr = IDirectDrawSurface_Blt(viewport->device->render_target, NULL, texture->surface, NULL, DDBLT_WAIT, NULL);
+            FIXME("IDirectDrawSurface_BltFast %08lx\n", hr);
+
+            IDirect3DRMTexture_Release(drmtexture);
+        }
+    }
 
     return D3DRM_OK;
 }
-- 
2.35.1

