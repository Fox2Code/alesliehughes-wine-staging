From 25040f3de26e41f639b4d46c683822e732ecd300 Mon Sep 17 00:00:00 2001
From: Alistair Leslie-Hughes <leslie_alistair@hotmail.com>
Date: Thu, 21 Jan 2016 15:12:38 +1100
Subject: [PATCH] d3dx9: Signature isn't part of the DDS header

Signed-off-by: Alistair Leslie-Hughes <leslie_alistair@hotmail.com>
---
 dlls/d3dx9_36/surface.c | 49 ++++++++++++++++++++++++++++---------------------
 1 file changed, 28 insertions(+), 21 deletions(-)

diff --git a/dlls/d3dx9_36/surface.c b/dlls/d3dx9_36/surface.c
index 1bfe75a..f7008a8 100644
--- a/dlls/d3dx9_36/surface.c
+++ b/dlls/d3dx9_36/surface.c
@@ -126,7 +126,6 @@ struct dds_pixel_format
 
 struct dds_header
 {
-    DWORD signature;
     DWORD size;
     DWORD flags;
     DWORD height;
@@ -143,6 +142,12 @@ struct dds_header
     DWORD reserved2;
 };
 
+struct dds
+{
+    DWORD signature;
+    struct dds_header header;
+};
+
 static D3DFORMAT dds_fourcc_to_d3dformat(DWORD fourcc)
 {
     unsigned int i;
@@ -356,7 +361,7 @@ static UINT calculate_dds_file_size(D3DFORMAT format, UINT width, UINT height, U
     }
 
     file_size *= faces;
-    file_size += sizeof(struct dds_header);
+    file_size += sizeof(struct dds);
     return file_size;
 }
 
@@ -380,9 +385,10 @@ static HRESULT get_image_info_from_dds(const void *buffer, UINT length, D3DXIMAG
 {
     UINT faces = 1;
     UINT expected_length;
-    const struct dds_header *header = buffer;
+    const struct dds *ddsdata = buffer;
+    const struct dds_header *header = &ddsdata->header;
 
-    if (length < sizeof(*header) || !info)
+    if (length < sizeof(*ddsdata) || !info)
         return D3DXERR_INVALIDDATA;
 
     if (header->pixel_format.size != sizeof(header->pixel_format))
@@ -438,8 +444,8 @@ static HRESULT load_surface_from_dds(IDirect3DSurface9 *dst_surface, const PALET
 {
     UINT size;
     UINT src_pitch;
-    const struct dds_header *header = src_data;
-    const BYTE *pixels = (BYTE *)(header + 1);
+    const struct dds *ddsdata = src_data;
+    const BYTE *pixels = (BYTE *)(ddsdata + 1);
 
     if (src_info->ResourceType != D3DRTYPE_TEXTURE)
         return D3DXERR_INVALIDDATA;
@@ -458,6 +464,7 @@ static HRESULT save_dds_surface_to_memory(ID3DXBuffer **dst_buffer, IDirect3DSur
     D3DSURFACE_DESC src_desc;
     D3DLOCKED_RECT locked_rect;
     ID3DXBuffer *buffer;
+    struct dds *ddsdata;
     struct dds_header *header;
     BYTE *pixels;
     struct volume volume;
@@ -483,13 +490,13 @@ static HRESULT save_dds_surface_to_memory(ID3DXBuffer **dst_buffer, IDirect3DSur
     hr = D3DXCreateBuffer(file_size, &buffer);
     if (FAILED(hr)) return hr;
 
-    header = ID3DXBuffer_GetBufferPointer(buffer);
-    pixels = (BYTE *)(header + 1);
+    ddsdata = ID3DXBuffer_GetBufferPointer(buffer);
+    pixels = (BYTE *)(ddsdata + 1);
+    header = &ddsdata->header;
 
-    memset(header, 0, sizeof(*header));
-    header->signature = MAKEFOURCC('D','D','S',' ');
-    /* The signature is not really part of the DDS header */
-    header->size = sizeof(*header) - FIELD_OFFSET(struct dds_header, size);
+    memset(ddsdata, 0, sizeof(*ddsdata));
+    ddsdata->signature = MAKEFOURCC('D','D','S',' ');
+    header->size = sizeof(struct dds_header);
     header->flags = DDS_CAPS | DDS_HEIGHT | DDS_WIDTH | DDS_PIXELFORMAT;
     header->height = src_desc.Height;
     header->width = src_desc.Width;
@@ -525,8 +532,8 @@ HRESULT load_volume_from_dds(IDirect3DVolume9 *dst_volume, const PALETTEENTRY *d
     const D3DXIMAGE_INFO *src_info)
 {
     UINT row_pitch, slice_pitch;
-    const struct dds_header *header = src_data;
-    const BYTE *pixels = (BYTE *)(header + 1);
+    const struct dds *ddsdata = src_data;
+    const BYTE *pixels = (BYTE *)(ddsdata + 1);
 
     if (src_info->ResourceType != D3DRTYPE_VOLUMETEXTURE)
         return D3DXERR_INVALIDDATA;
@@ -550,8 +557,8 @@ HRESULT load_texture_from_dds(IDirect3DTexture9 *texture, const void *src_data,
     UINT mip_level_size;
     UINT width, height;
     IDirect3DSurface9 *surface;
-    const struct dds_header *header = src_data;
-    const BYTE *pixels = (BYTE *)(header + 1);
+    const struct dds *ddsdata = src_data;
+    const BYTE *pixels = (BYTE *)(ddsdata + 1);
 
     /* Loading a cube texture as a simple texture is also supported
      * (only first face texture is taken). Same with volume textures. */
@@ -607,13 +614,13 @@ HRESULT load_cube_texture_from_dds(IDirect3DCubeTexture9 *cube_texture, const vo
     UINT mip_levels;
     UINT mip_level_size;
     IDirect3DSurface9 *surface;
-    const struct dds_header *header = src_data;
-    const BYTE *pixels = (BYTE *)(header + 1);
+    const struct dds *ddsdata = src_data;
+    const BYTE *pixels = (BYTE *)(ddsdata + 1);
 
     if (src_info->ResourceType != D3DRTYPE_CUBETEXTURE)
         return D3DXERR_INVALIDDATA;
 
-    if ((header->caps2 & DDS_CAPS2_CUBEMAP_ALL_FACES) != DDS_CAPS2_CUBEMAP_ALL_FACES)
+    if ((ddsdata->header.caps2 & DDS_CAPS2_CUBEMAP_ALL_FACES) != DDS_CAPS2_CUBEMAP_ALL_FACES)
     {
         WARN("Only full cubemaps are supported\n");
         return D3DXERR_INVALIDDATA;
@@ -659,8 +666,8 @@ HRESULT load_volume_texture_from_dds(IDirect3DVolumeTexture9 *volume_texture, co
     D3DBOX src_box;
     UINT width, height, depth;
     IDirect3DVolume9 *volume;
-    const struct dds_header *header = src_data;
-    const BYTE *pixels = (BYTE *)(header + 1);
+    const struct dds *ddsdata = src_data;
+    const BYTE *pixels = (BYTE *)(ddsdata + 1);
 
     if (src_info->ResourceType != D3DRTYPE_VOLUMETEXTURE)
         return D3DXERR_INVALIDDATA;
-- 
1.9.1

