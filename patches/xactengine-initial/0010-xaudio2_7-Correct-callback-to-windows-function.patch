From ec4c1379e619392e77a6f10ec6a9b432e9da6c9b Mon Sep 17 00:00:00 2001
From: Alistair Leslie-Hughes <leslie_alistair@hotmail.com>
Date: Fri, 10 Jan 2020 23:13:02 +1100
Subject: [PATCH] xaudio2_7: Correct callback to windows function

---
 dlls/xaudio2_7/xact_dll.c | 112 +++++++++++++++++++++++++++++++-------
 1 file changed, 93 insertions(+), 19 deletions(-)

diff --git a/dlls/xaudio2_7/xact_dll.c b/dlls/xaudio2_7/xact_dll.c
index a034581ca6c..cbc7238da78 100644
--- a/dlls/xaudio2_7/xact_dll.c
+++ b/dlls/xaudio2_7/xact_dll.c
@@ -73,27 +73,12 @@ HRESULT WINAPI DllUnregisterServer(void)
     return __wine_unregister_resources(instance);
 }
 
-typedef struct _XACT3CueImpl {
-    IXACT3Cue IXACT3Cue_iface;
-#if XACT3_VER <= 0x0304
-    IXACT34Cue IXACT34Cue_iface;
-#endif
-
-    FACTCue *fact_cue;
-} XACT3CueImpl;
-
 typedef struct _XACT3WaveImpl {
     IXACT3Wave IXACT3Wave_iface;
 
     FACTWave *fact_wave;
 } XACT3WaveImpl;
 
-typedef struct _XACT3SoundBankImpl {
-    IXACT3SoundBank IXACT3SoundBank_iface;
-
-    FACTSoundBank *fact_soundbank;
-} XACT3SoundBankImpl;
-
 typedef struct _XACT3WaveBankImpl {
     IXACT3WaveBank IXACT3WaveBank_iface;
 
@@ -107,8 +92,27 @@ typedef struct _XACT3EngineImpl {
 
     XACT_READFILE_CALLBACK pReadFile;
     XACT_GETOVERLAPPEDRESULT_CALLBACK pGetOverlappedResult;
+    XACT_NOTIFICATION_CALLBACK fnNotificationCallback;
 } XACT3EngineImpl;
 
+typedef struct _XACT3SoundBankImpl {
+    IXACT3SoundBank IXACT3SoundBank_iface;
+    XACT3EngineImpl *engine;
+
+    FACTSoundBank *fact_soundbank;
+} XACT3SoundBankImpl;
+
+typedef struct _XACT3CueImpl {
+    IXACT3Cue IXACT3Cue_iface;
+#if XACT3_VER <= 0x0304
+    IXACT34Cue IXACT34Cue_iface;
+#endif
+
+    FACTCue *fact_cue;
+    XACT3SoundBankImpl *soundbank;
+    int index;
+} XACT3CueImpl;
+
 typedef struct wrap_readfile_struct {
     XACT3EngineImpl *engine;
     HANDLE file;
@@ -154,10 +158,22 @@ static HRESULT WINAPI IXACT3CueImpl_Play(IXACT3Cue *iface)
 static HRESULT WINAPI IXACT3CueImpl_Stop(IXACT3Cue *iface, DWORD dwFlags)
 {
     XACT3CueImpl *This = impl_from_IXACT3Cue(iface);
+    HRESULT hr;
 
     TRACE("(%p)->(%u)\n", iface, dwFlags);
 
-    return FACTCue_Stop(This->fact_cue, dwFlags);
+    hr = FACTCue_Stop(This->fact_cue, dwFlags);
+        //if (cue_notifications & NOTIFY_STOP)
+	{
+                XACT_NOTIFICATION note;
+		note.type = XACTNOTIFICATIONTYPE_CUESTOP;
+		note.u.cue.pSoundBank = &This->soundbank->IXACT3SoundBank_iface;
+		note.u.cue.cueIndex = This->index;
+		note.u.cue.pCue = &This->IXACT3Cue_iface;
+		This->soundbank->engine->fnNotificationCallback(&note);
+	}
+
+    return hr;
 }
 
 static HRESULT WINAPI IXACT3CueImpl_GetState(IXACT3Cue *iface, DWORD *pdwState)
@@ -174,7 +190,7 @@ static HRESULT WINAPI IXACT3CueImpl_Destroy(IXACT3Cue *iface)
     XACT3CueImpl *This = impl_from_IXACT3Cue(iface);
     HRESULT hr;
 
-    TRACE("(%p)\n", iface);
+    TRACE("(%p, fact_cue %p)\n", iface, This->fact_cue);
 
     hr = FACTCue_Destroy(This->fact_cue);
     HeapFree(GetProcessHeap(), 0, This);
@@ -590,6 +606,20 @@ static HRESULT WINAPI IXACT3SoundBankImpl_Prepare(IXACT3SoundBank *iface,
     *ppCue = (IXACT3Cue*)&cue->IXACT3Cue_iface;
 #endif
 
+    cue->soundbank = This;
+    cue->index = nCueIndex;
+
+    //if (cue_notifications & NOTIFY_PREPARE)
+	{
+                XACT_NOTIFICATION note;
+		note.type = XACTNOTIFICATIONTYPE_CUEPREPARED;
+		note.u.cue.pSoundBank = &This->IXACT3SoundBank_iface;
+		note.u.cue.cueIndex = nCueIndex;
+		note.u.cue.pCue = (*ppCue);
+
+		This->engine->fnNotificationCallback(&note);
+	}
+
     TRACE("Created Cue: %p\n", cue);
 
     return hr;
@@ -638,6 +668,7 @@ static HRESULT WINAPI IXACT3SoundBankImpl_Play(IXACT3SoundBank *iface,
         *ppCue = (IXACT3Cue*)&cue->IXACT3Cue_iface;
 #endif
         cue->fact_cue = fcue;
+        cue->soundbank = This;
         *ppCue = (IXACT3Cue*)cue;
     }
 
@@ -658,10 +689,17 @@ static HRESULT WINAPI IXACT3SoundBankImpl_Destroy(IXACT3SoundBank *iface)
 {
     XACT3SoundBankImpl *This = impl_from_IXACT3SoundBank(iface);
     HRESULT hr;
+    XACT_NOTIFICATION note;
 
     TRACE("(%p)\n", This);
 
     hr = FACTSoundBank_Destroy(This->fact_soundbank);
+
+    note.type = XACTNOTIFICATIONTYPE_SOUNDBANKDESTROYED;
+    note.u.soundBank.pSoundBank = &This->IXACT3SoundBank_iface;
+
+    This->engine->fnNotificationCallback(&note);
+
     HeapFree(GetProcessHeap(), 0, This);
     return hr;
 }
@@ -698,7 +736,7 @@ static HRESULT WINAPI IXACT3WaveBankImpl_Destroy(IXACT3WaveBank *iface)
     XACT3WaveBankImpl *This = impl_from_IXACT3WaveBank(iface);
     HRESULT hr;
 
-    TRACE("(%p)\n", This);
+    TRACE("(%p, fact_wavebank %p)\n", This, This->fact_wavebank);
 
     hr = FACTWaveBank_Destroy(This->fact_wavebank);
     HeapFree(GetProcessHeap(), 0, This);
@@ -929,6 +967,24 @@ static HRESULT WINAPI IXACT3EngineImpl_GetFinalMixFormat(IXACT3Engine *iface,
             (FAudioWaveFormatExtensible*) pFinalMixFormat);
 }
 
+static void FACTCALL fact_notification_cb(const FACTNotification *pNotification)
+{
+    XACT3EngineImpl *engine = (XACT3EngineImpl *)pNotification->pvContext;
+
+    if (!engine)
+    {
+        ERR("Notification context is NULL\n");
+        return;
+    }
+
+    if (pNotification->type == XACTNOTIFICATIONTYPE_SOUNDBANKDESTROYED)
+    {
+        FIXME("Callback XACTNOTIFICATIONTYPE_SOUNDBANKDESTROYED\n");
+    }
+    else
+        FIXME("Unsupported callback type %d\n", pNotification->type);
+}
+
 static HRESULT WINAPI IXACT3EngineImpl_Initialize(IXACT3Engine *iface,
         const XACT_RUNTIME_PARAMETERS *pParams)
 {
@@ -971,6 +1027,9 @@ static HRESULT WINAPI IXACT3EngineImpl_Initialize(IXACT3Engine *iface,
                 GetOverlappedResult;
     params.fileIOCallbacks.readFileCallback = wrap_readfile;
     params.fileIOCallbacks.getOverlappedResultCallback = wrap_getoverlappedresult;
+    params.fnNotificationCallback = fact_notification_cb;
+
+    This->fnNotificationCallback = (XACT_NOTIFICATION_CALLBACK)pParams->fnNotificationCallback;
 
     return FACTAudioEngine_Initialize(This->fact_engine, &params) == 0 ? S_OK : E_FAIL;
 }
@@ -1021,6 +1080,7 @@ static HRESULT WINAPI IXACT3EngineImpl_CreateSoundBank(IXACT3Engine *iface,
 
     sb->IXACT3SoundBank_iface.lpVtbl = &XACT3SoundBank_Vtbl;
     sb->fact_soundbank = fsb;
+    sb->engine = This;
     *ppSoundBank = &sb->IXACT3SoundBank_iface;
 
     TRACE("Created SoundBank: %p\n", sb);
@@ -1058,6 +1118,17 @@ static HRESULT WINAPI IXACT3EngineImpl_CreateInMemoryWaveBank(IXACT3Engine *ifac
     wb->fact_wavebank = fwb;
     *ppWaveBank = &wb->IXACT3WaveBank_iface;
 
+           //if (cue_notifications & NOTIFY_STOP)
+    {
+            XACT_NOTIFICATION note;
+            note.type = XACTNOTIFICATIONTYPE_WAVEBANKPREPARED;
+            //note.u.waveBank.pSoundBank = &This->soundbank->IXACT3SoundBank_iface;
+            //note.u.waveBank.waveIndex = nWaveIndex;
+            note.u.waveBank.pWaveBank = &wb->IXACT3WaveBank_iface;
+
+            This->fnNotificationCallback(&note);
+    }
+
     TRACE("Created in-memory WaveBank: %p\n", wb);
 
     return S_OK;
@@ -1152,7 +1223,7 @@ static inline void unwrap_notificationdesc(FACTNotificationDescription *fd,
     memset(fd, 0, sizeof(*fd));
     /* We have to unwrap the FACT object first! */
 
-    TRACE("Type %d\n", xd->type);
+    TRACE("Flags 0x%08x, Type %d\n", xd->flags, xd->type);
     switch (xd->type)
     {
         /* Supports None */
@@ -1209,6 +1280,7 @@ static inline void unwrap_notificationdesc(FACTNotificationDescription *fd,
     if (flags & NOTIFY_Cue && xd->pCue != NULL)
     {
         XACT3CueImpl *cur = impl_from_IXACT3Cue(xd->pCue);
+        FIXME("Cue %p\n", cur);
         if (cur)
             fd->pCue = cur->fact_cue;
     }
@@ -1247,6 +1319,7 @@ static HRESULT WINAPI IXACT3EngineImpl_RegisterNotification(IXACT3Engine *iface,
     TRACE("(%p)->(%p)\n", This, pNotificationDesc);
 
     unwrap_notificationdesc(&fdesc, pNotificationDesc);
+    fdesc.pvContext = This;
     return FACTAudioEngine_RegisterNotification(This->fact_engine, &fdesc);
 }
 
@@ -1259,6 +1332,7 @@ static HRESULT WINAPI IXACT3EngineImpl_UnRegisterNotification(IXACT3Engine *ifac
     TRACE("(%p)->(%p)\n", This, pNotificationDesc);
 
     unwrap_notificationdesc(&fdesc, pNotificationDesc);
+    fdesc.pvContext = This;
     return FACTAudioEngine_UnRegisterNotification(This->fact_engine, &fdesc);
 }
 
-- 
2.24.1

