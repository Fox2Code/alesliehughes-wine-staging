From 43541ec06463b45629840b166be6cf4842ab9bb4 Mon Sep 17 00:00:00 2001
From: Alistair Leslie-Hughes <leslie_alistair@hotmail.com>
Date: Thu, 11 Mar 2021 10:47:16 +1100
Subject: msado15: Loop data


diff --git a/dlls/msado15/recordset.c b/dlls/msado15/recordset.c
index 9b63cf77eef..7ebe4f6d4c3 100644
--- a/dlls/msado15/recordset.c
+++ b/dlls/msado15/recordset.c
@@ -1298,6 +1298,7 @@ static HRESULT create_bindings(IUnknown *rowset, struct fields *fields, DBBINDIN
     DBBINDING *bindings;
     DBBYTEOFFSET offset;
 
+
     hr = IUnknown_QueryInterface(rowset, &IID_IColumnsInfo, (void**)&columninfo);
     if (FAILED(hr))
         return hr;
@@ -1424,6 +1425,9 @@ static HRESULT WINAPI recordset_Open( _Recordset *iface, VARIANT source, VARIANT
     if (FAILED(hr))
         return hr;
 
+    /* We want to create the field member variable without mapping the rowset fields, this will
+     * save quering the fields twice.  Fields will be added while we create the bindings
+     */
     hr = fields_create( recordset, &recordset->fields );
     if (FAILED(hr))
     {
@@ -1456,13 +1460,114 @@ static HRESULT WINAPI recordset_Open( _Recordset *iface, VARIANT source, VARIANT
         return hr;
     }
 
-    heap_free(bindings);
+    /* Create the data array */
     if (!resize_recordset( recordset, affected ))
     {
+        heap_free(bindings);
         IUnknown_Release(rowset);
         return E_OUTOFMEMORY;
     }
 
+{
+    IRowset *rowset2 = NULL;
+    hr = IUnknown_QueryInterface(rowset, &IID_IRowset, (void**)&rowset2);
+    if (rowset2)
+    {
+        DBCOUNTITEM obtained;
+        HROW *row = NULL;
+        int datarow = 0, datacol;
+        char *data = heap_alloc (datasize);
+
+        hr = IRowset_GetNextRows(rowset2, 0, 0, 1, &obtained, &row);
+
+        while (hr == S_OK)
+        {
+            VARIANT copy;
+
+            hr = IRowset_GetData(rowset2, *row, haccessor, data);
+            if (FAILED(hr))
+            {
+                //IRowset_Release(rowset2);
+                ERR("Failed to GetData 0x%08x\n", hr);
+                break;
+            }
+
+            for (datacol = 0; datacol < columns; datacol++)
+            {
+                VariantInit(&copy);
+
+                /* For most cases DBTYPE_* = VT_* type */
+                V_VT(&copy) = bindings[datacol].wType;
+                switch(bindings[datacol].wType)
+                {
+                    case DBTYPE_R8:
+                        V_R8(&copy) = *(DOUBLE*)(data + bindings[datacol].obValue);
+                        break;
+                    case DBTYPE_I8:
+                        V_VT(&copy) = VT_I4;
+                        V_I4(&copy) = *(LONG*)(data + bindings[datacol].obValue);
+                        break;
+                    case DBTYPE_I4:
+                        V_I4(&copy) = *(LONG*)(data + bindings[datacol].obValue);
+                        break;
+                    case DBTYPE_WSTR:
+                        V_VT(&copy) = VT_BSTR;
+                        V_BSTR(&copy) = SysAllocString( (WCHAR*)(data + bindings[datacol].obValue) );
+                        break;
+                    case DBTYPE_DBTIMESTAMP:
+                    {
+                        SYSTEMTIME st;
+                        DBTIMESTAMP *ts = (DBTIMESTAMP *)(data + bindings[datacol].obValue);
+                        DATE d;
+
+                        V_VT(&copy) = VT_DATE;
+
+                        st.wYear = ts->year;
+                        st.wMonth = ts->month;
+                        st.wDay = ts->day;
+                        st.wHour = ts->hour;
+                        st.wMinute = ts->minute;
+                        st.wSecond = ts->second;
+                        st.wMilliseconds = ts->fraction/1000000;
+                        hr = (SystemTimeToVariantTime(&st, &d) ? S_OK : E_FAIL);
+
+                        V_DATE(&copy) = d;
+                        break;
+                    }
+                    default:
+                        V_I2(&copy) = 0;
+                        FIXME("Unknown Type %d\n", bindings[datacol].wType);
+                }
+
+                /*FIXME("%lu. data %s\n", datarow * columns + datacol, debugstr_variant(&copy));*/
+                VariantInit( &recordset->data[datarow * columns + datacol] );
+                if ((hr = VariantCopy( &recordset->data[datarow * columns + datacol] , &copy)) != S_OK)
+                {
+                    ERR("Failed to copy data, Column %d - data %s\n", datacol, debugstr_variant(&copy));
+                    //return hr;
+                }
+
+                VariantClear(&copy);
+            }
+
+            datarow++;
+
+            hr = IRowset_ReleaseRows(rowset2, 1, row, NULL, NULL, NULL);
+            if (FAILED(hr))
+                ERR("Failed to ReleaseRows 0x%08x\n", hr);
+
+            hr = IRowset_GetNextRows(rowset2, 0, 0, 1, &obtained, &row);
+FIXME("obtained %d\n", obtained);
+        }
+
+        heap_free(data);
+
+        IRowset_Release(rowset2);
+    }
+}
+
+    heap_free(bindings);
+
     hr = IAccessor_ReleaseAccessor(accessor, haccessor, NULL);
     IAccessor_Release(accessor);
 
diff --git a/dlls/msado15/tests/msado15.c b/dlls/msado15/tests/msado15.c
index 93d1dc4c19b..d0d36ee7567 100644
--- a/dlls/msado15/tests/msado15.c
+++ b/dlls/msado15/tests/msado15.c
@@ -1549,6 +1549,31 @@ static void test_connection_open(void)
     ok( hr == S_OK, "got %08x\n", hr );
     ok( 0, "After _Recordset_Open\n");
 
+    {
+        Fields *fields;
+        Field *field;
+        BSTR name;
+        VARIANT val, index;
+
+
+        hr = _Recordset_get_Fields( recordset, &fields );
+
+        name = SysAllocString( L"id" );
+        V_VT( &index ) = VT_BSTR;
+        V_BSTR( &index ) = name;
+        hr = Fields_get_Item( fields, index, &field );
+        ok( hr == S_OK, "got %08x\n", hr );
+        SysFreeString( name );
+
+        hr = Field_get_Value(field, &val);
+        ok( hr == S_OK, "got %08x\n", hr );
+        ok( V_VT(&val) == VT_I4, "got %d\n", V_VT(&val) );
+        ok( V_I4(&val) == 1, "got %d\n", V_I4(&val) );
+
+        Field_Release(field);
+        Fields_Release(fields);
+    }
+
     hr = _Recordset_get_CursorType(recordset, &cursortype);
     ok( hr == S_OK, "got %08x\n", hr );
     ok( cursortype == adOpenStatic, "got %d\n", cursortype );
