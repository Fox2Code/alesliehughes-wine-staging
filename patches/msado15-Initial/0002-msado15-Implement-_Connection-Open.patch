From 5e12c7836ada3fa2efba2e7814079e672dc62cc2 Mon Sep 17 00:00:00 2001
From: Alistair Leslie-Hughes <leslie_alistair@hotmail.com>
Date: Sun, 11 Oct 2020 11:13:02 +1100
Subject: [PATCH 2/2] msado15: Implement _Connection Open

---
 dlls/msado15/Makefile.in  |   2 +-
 dlls/msado15/connection.c | 145 +++++++++++++++++++++++++++++++++++++-
 2 files changed, 145 insertions(+), 2 deletions(-)

diff --git a/dlls/msado15/Makefile.in b/dlls/msado15/Makefile.in
index 9852e0863dd..e64da605473 100644
--- a/dlls/msado15/Makefile.in
+++ b/dlls/msado15/Makefile.in
@@ -1,5 +1,5 @@
 MODULE    = msado15.dll
-IMPORTS   = oleaut32
+IMPORTS   = oleaut32 ole32
 
 EXTRADLLFLAGS = -mno-cygwin
 
diff --git a/dlls/msado15/connection.c b/dlls/msado15/connection.c
index 2773850236d..b4f067eaa94 100644
--- a/dlls/msado15/connection.c
+++ b/dlls/msado15/connection.c
@@ -23,8 +23,10 @@
 #include "initguid.h"
 #include "ocidl.h"
 #include "objbase.h"
+#include "msdasc.h"
 #include "olectl.h"
 #include "msado15_backcompat.h"
+#include "msdasql.h"   /* Maybe not required - Once provider looking is done */
 
 #include "wine/debug.h"
 #include "wine/heap.h"
@@ -33,6 +35,9 @@
 
 WINE_DEFAULT_DEBUG_CHANNEL(msado15);
 
+DEFINE_GUID(DBPROPSET_DBINITALL, 0xc8b522ca, 0x5cf3, 0x11ce, 0xad, 0xe5, 0x00, 0xaa, 0x00, 0x44, 0x77, 0x3d);
+DEFINE_GUID(DBPROPSET_DBINIT,    0xc8b522bc, 0x5cf3, 0x11ce, 0xad, 0xe5, 0x00, 0xaa, 0x00, 0x44, 0x77, 0x3d);
+
 struct connection;
 
 struct connection_point
@@ -56,6 +61,7 @@ struct connection
     WCHAR                    *provider;
     ConnectModeEnum           mode;
     CursorLocationEnum        location;
+    IUnknown                 *session;
     struct connection_point   cp_connev;
 };
 
@@ -273,13 +279,149 @@ static HRESULT WINAPI connection_Open( _Connection *iface, BSTR connect_str, BST
                                        LONG options )
 {
     struct connection *connection = impl_from_Connection( iface );
+    IDBProperties     *props;
+    IDBInitialize     *dbinit;
+    IDBCreateSession  *session = NULL;
+    IUnknown          *unk;
+    ISessionProperties *properties;
+    DBPROPIDSET propidset;
+    ULONG infocount;
+    DBPROPINFOSET *propinfoset;
+    DBPROPSET     *propertysets;
+    WCHAR *desc;
+    HRESULT hr;
+    int i;
+
     FIXME( "%p, %s, %s, %p, %08x\n", iface, debugstr_w(connect_str), debugstr_w(userid),
            password, options );
 
     if (connection->state == adStateOpen) return MAKE_ADO_HRESULT( adErrObjectOpen );
 
+    /* Get Default properties for Provider */
+    /* TODO - Use Provider or DSN from connect_str */
+    hr = CoCreateInstance( &CLSID_MSDASQL, NULL, CLSCTX_ALL, &IID_IDBProperties, (void **)&props);
+    if (FAILED(hr))
+    {
+        WARN("Failed to create IDBProperties object\n");
+        return hr;
+    }
+
+    propidset.rgPropertyIDs = NULL;
+    propidset.cPropertyIDs = 0;
+    propidset.guidPropertySet = DBPROPSET_DBINIT;
+
+    infocount = 0;
+    hr = IDBProperties_GetPropertyInfo(props, 1, &propidset, &infocount, &propinfoset, &desc);
+    if (FAILED(hr))
+    {
+        IDBProperties_Release(props);
+        return hr;
+    }
+
+    infocount = 0;
+    hr = IDBProperties_GetProperties(props, 1, &propidset, &infocount, &propertysets);
+    if (FAILED(hr))
+    {
+        IDBProperties_Release(props);
+        return hr;
+    }
+    IDBProperties_Release(props);
+    for (i = 0; i < propinfoset->cPropertyInfos; i++)
+        VariantClear(&propinfoset->rgPropertyInfos[i].vValues);
+
+    CoTaskMemFree(propinfoset->rgPropertyInfos);
+    CoTaskMemFree(propinfoset);
+
+    /* TODO - Use Provider or DSN from connect_str */
+    hr = CoCreateInstance(&CLSID_MSDASQL, NULL, CLSCTX_INPROC_SERVER, &IID_IDBInitialize,(void**)&dbinit);
+    if (FAILED(hr))
+    {
+        WARN("Failed to create IDataInitialize object\n");
+        return hr;
+    }
+
+    hr = IDBInitialize_QueryInterface(dbinit, &IID_IDBProperties, (void**)&props);
+    if (FAILED(hr))
+    {
+        goto done;
+    }
+
+    /* TODO - Update username/password in properties */
+
+    hr = IDBProperties_SetProperties(props, infocount, propertysets);
+    if (FAILED(hr))
+    {
+        goto done;
+    }
+
+    hr = IDBInitialize_Initialize(dbinit);
+    if (FAILED(hr))
+    {
+FIXME("7\n");
+        goto done;
+    }
+
+    hr = IDBInitialize_QueryInterface(dbinit, &IID_IDBCreateSession, (void**)&session);
+    if (FAILED(hr))
+    {
+FIXME("8\n");
+        goto done;
+    }
+
+    // FIXME NULL for outer
+    hr = IDBCreateSession_CreateSession(session, NULL, &IID_IUnknown, &connection->session);
+    if (FAILED(hr))
+    {
+FIXME("9\n");
+        goto done;
+    }
+
+    /* Validate the session supports the interfaces we require */
+    hr = IUnknown_QueryInterface(connection->session, &IID_IGetDataSource, (void**)&unk);
+    if (FAILED(hr))
+    {
+        hr = E_FAIL;
+        goto done;
+    }
+    IUnknown_Release(unk);
+
+    hr = IUnknown_QueryInterface(connection->session, &IID_IOpenRowset, (void**)&unk);
+    if (FAILED(hr))
+    {
+        hr = E_FAIL;
+        goto done;
+    }
+    IUnknown_Release(unk);
+
+    hr = IUnknown_QueryInterface(connection->session, &IID_ISessionProperties, (void**)&properties);
+    if (FAILED(hr))
+    {
+        hr = E_FAIL;
+        goto done;
+    }
+    ISessionProperties_SetProperties(properties, infocount, propertysets);
+    ISessionProperties_Release(properties);
+
     connection->state = adStateOpen;
-    return S_OK;
+    hr = S_OK;
+
+done:
+FIXME("1.1\n");
+    if (FAILED(hr) && connection->session)
+    {
+        IUnknown_Release(connection->session);
+        connection->session = NULL;
+    }
+FIXME("1.2\n");
+    if (session) IDBCreateSession_Release(session);
+FIXME("1.3\n");
+    if (dbinit) {
+        IDBInitialize_Uninitialize(dbinit);
+        IDBInitialize_Release(dbinit);
+    }
+
+    TRACE("ret 0x%08x\n", hr);
+    return hr;
 }
 
 static HRESULT WINAPI connection_get_Errors( _Connection *iface, Errors **obj )
@@ -684,6 +826,7 @@ HRESULT Connection_create( void **obj )
     connection->provider = SysAllocString(L"MSDASQL");
     connection->mode = adModeUnknown;
     connection->location = adUseServer;
+    connection->session = NULL;
 
     connection->cp_connev.conn = connection;
     connection->cp_connev.riid = &DIID_ConnectionEvents;
-- 
2.28.0

