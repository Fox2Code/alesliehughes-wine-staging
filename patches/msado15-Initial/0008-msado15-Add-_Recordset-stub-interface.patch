From 42847bf28663ff9d16b29a47f8dec77c4cc4ab87 Mon Sep 17 00:00:00 2001
From: Alistair Leslie-Hughes <leslie_alistair@hotmail.com>
Date: Fri, 7 Oct 2016 09:44:05 +1100
Subject: [PATCH 08/12] msado15: Add _Recordset stub interface

Signed-off-by: Alistair Leslie-Hughes <leslie_alistair@hotmail.com>
---
 dlls/msado15/Makefile.in       |   3 +-
 dlls/msado15/connection.c      |  13 +-
 dlls/msado15/msado15.c         |   8 +-
 dlls/msado15/msado15_private.h |  30 ++
 dlls/msado15/recordset.c       | 870 +++++++++++++++++++++++++++++++++++++++++
 5 files changed, 909 insertions(+), 15 deletions(-)
 create mode 100644 dlls/msado15/msado15_private.h
 create mode 100644 dlls/msado15/recordset.c

diff --git a/dlls/msado15/Makefile.in b/dlls/msado15/Makefile.in
index c24f305..d63e890 100644
--- a/dlls/msado15/Makefile.in
+++ b/dlls/msado15/Makefile.in
@@ -3,6 +3,7 @@ MODULE    = msado15.dll
 
 C_SRCS = \
 	connection.c \
-	msado15.c
+	msado15.c \
+	recordset.c
 
 IDL_SRCS = msado15_typelib.idl
diff --git a/dlls/msado15/connection.c b/dlls/msado15/connection.c
index c52af11..e159671 100644
--- a/dlls/msado15/connection.c
+++ b/dlls/msado15/connection.c
@@ -29,21 +29,10 @@
 #include "wine/debug.h"
 
 #include "msado15.h"
+#include "msado15_private.h"
 
 WINE_DEFAULT_DEBUG_CHANNEL(msado);
 
-/* Move these to private header */
-static inline void *heap_alloc(size_t len)
-{
-    return HeapAlloc(GetProcessHeap(), 0, len);
-}
-
-
-static inline BOOL heap_free(void *mem)
-{
-    return HeapFree(GetProcessHeap(), 0, mem);
-}
-
 typedef struct
 {
     _Connection _Connection_iface;
diff --git a/dlls/msado15/msado15.c b/dlls/msado15/msado15.c
index a9289cd..b8adf74 100644
--- a/dlls/msado15/msado15.c
+++ b/dlls/msado15/msado15.c
@@ -29,6 +29,7 @@
 #include "wine/debug.h"
 
 #include "msado15.h"
+#include "msado15_private.h"
 
 WINE_DEFAULT_DEBUG_CHANNEL(msado);
 
@@ -129,9 +130,8 @@ static const struct IClassFactoryVtbl msadocf_vtbl =
     msadocf_LockServer
 };
 
-extern HRESULT Connecton_create(void **out);
-
 static ClassFactory connectioncf = { { &msadocf_vtbl }, Connecton_create };
+static ClassFactory recordsetncf = { { &msadocf_vtbl }, Recordset_create };
 
 HRESULT WINAPI DllGetClassObject(REFCLSID rclsid, REFIID riid, LPVOID *ppv)
 {
@@ -146,6 +146,10 @@ HRESULT WINAPI DllGetClassObject(REFCLSID rclsid, REFIID riid, LPVOID *ppv)
     {
         cf = &connectioncf.IClassFactory_iface;
     }
+    else if(IsEqualCLSID( rclsid, &CLSID_Recordset))
+    {
+        cf = &recordsetncf.IClassFactory_iface;
+    }
 
     if (!cf)
         return CLASS_E_CLASSNOTAVAILABLE;
diff --git a/dlls/msado15/msado15_private.h b/dlls/msado15/msado15_private.h
new file mode 100644
index 0000000..3bbfcbf
--- /dev/null
+++ b/dlls/msado15/msado15_private.h
@@ -0,0 +1,30 @@
+/*
+ * Copyright 2015 Alistair Leslie-Hughes
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
+ */
+
+static inline void *heap_alloc(size_t len)
+{
+    return HeapAlloc(GetProcessHeap(), 0, len);
+}
+
+static inline BOOL heap_free(void *mem)
+{
+    return HeapFree(GetProcessHeap(), 0, mem);
+}
+
+extern HRESULT Connecton_create(void **out) DECLSPEC_HIDDEN;
+extern HRESULT Recordset_create(void **out) DECLSPEC_HIDDEN;
\ No newline at end of file
diff --git a/dlls/msado15/recordset.c b/dlls/msado15/recordset.c
new file mode 100644
index 0000000..8b8cdae
--- /dev/null
+++ b/dlls/msado15/recordset.c
@@ -0,0 +1,870 @@
+/*
+ * Copyright 2015 Alistair Leslie-Hughes
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
+ */
+#define COBJMACROS
+
+#include "config.h"
+
+#include <stdarg.h>
+
+#include "windef.h"
+#include "winbase.h"
+#include "winuser.h"
+#include "ole2.h"
+
+#include "wine/debug.h"
+
+#include "msado15.h"
+#include "msado15_private.h"
+
+WINE_DEFAULT_DEBUG_CHANNEL(msado);
+
+typedef struct
+{
+    _Recordset _Recordset_iface;
+
+    LONG ref;
+} recordset;
+
+
+static inline recordset *impl_from_Recordset(_Recordset *iface)
+{
+    return CONTAINING_RECORD(iface, recordset, _Recordset_iface);
+}
+
+static HRESULT WINAPI recondset_QueryInterface(_Recordset *iface, REFIID riid, void **out)
+{
+    recordset *This = impl_from_Recordset(iface);
+    TRACE("(%p)->(%s, %p)\n", This, debugstr_guid(riid), out);
+
+    *out = NULL;
+
+    if(IsEqualIID(riid, &IID_IUnknown)    ||
+       IsEqualIID(riid, &IID_IDispatch)   ||
+       IsEqualIID(riid, &IID__ADO)        ||
+       IsEqualIID(riid, &IID_Recordset15) ||
+       IsEqualIID(riid, &IID_Recordset20) ||
+       IsEqualIID(riid, &IID_Recordset21) ||
+       IsEqualIID(riid, &IID__Recordset))
+    {
+        *out = iface;
+    }
+    else
+    {
+        FIXME("interface %s not implemented\n", debugstr_guid(riid));
+        return E_NOINTERFACE;
+    }
+
+    _Recordset_AddRef(iface);
+    return S_OK;
+}
+
+static ULONG WINAPI recondset_AddRef(_Recordset *iface)
+{
+    recordset *This = impl_from_Recordset(iface);
+    TRACE("(%p)\n", This);
+
+    return InterlockedIncrement(&This->ref);
+}
+
+static ULONG WINAPI recondset_Release(_Recordset *iface)
+{
+    recordset *This = impl_from_Recordset(iface);
+    LONG ref;
+
+    TRACE("(%p)\n", This);
+
+    ref = InterlockedDecrement(&This->ref);
+    if(ref == 0)
+        heap_free(This);
+
+    return ref;
+}
+
+static HRESULT WINAPI recondset_GetTypeInfoCount(_Recordset *iface, UINT *pctinfo)
+{
+    recordset *This = impl_from_Recordset(iface);
+    TRACE("(%p)->()\n", This);
+
+    *pctinfo = 1;
+    return S_OK;
+}
+
+static HRESULT WINAPI recondset_GetTypeInfo(_Recordset *iface, UINT iTInfo, LCID lcid, ITypeInfo **typeinfo)
+{
+    recordset *This = impl_from_Recordset(iface);
+    FIXME("(%p)->(%u %u %p)\n", This, iTInfo, lcid, typeinfo);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI recondset_GetIDsOfNames(_Recordset *iface, REFIID riid, LPOLESTR *rgszNames,
+        UINT cNames, LCID lcid, DISPID *rgDispId)
+{
+    recordset *This = impl_from_Recordset(iface);
+    FIXME("(%p)->(%s %p %u %u %p)\n", This, debugstr_guid(riid), rgszNames, cNames, lcid, rgDispId);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI recondset_Invoke(_Recordset *iface, DISPID dispIdMember, REFIID riid,
+        LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo,
+        UINT *puArgErr)
+{
+    recordset *This = impl_from_Recordset(iface);
+    FIXME("(%p)->(%d %s %d %d %p %p %p %p)\n", This, dispIdMember, debugstr_guid(riid),
+           lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI recondset_get_Properties(_Recordset *iface, Properties **props)
+{
+    recordset *This = impl_from_Recordset(iface);
+    FIXME("(%p)->(%p)\n", This, props);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI recondset_get_AbsolutePosition(_Recordset *iface, PositionEnum_Param *position)
+{
+    recordset *This = impl_from_Recordset(iface);
+    FIXME("(%p)->(%p)\n", This, position);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI recondset_put_AbsolutePosition(_Recordset *iface, PositionEnum_Param position)
+{
+    recordset *This = impl_from_Recordset(iface);
+    FIXME("(%p)->(%d)\n", This, position);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI recondset_putref_ActiveConnection(_Recordset *iface, IDispatch *connection)
+{
+    recordset *This = impl_from_Recordset(iface);
+    FIXME("(%p)->(%p)\n", This, connection);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI recondset_put_ActiveConnection(_Recordset *iface, VARIANT connection)
+{
+    recordset *This = impl_from_Recordset(iface);
+    FIXME("(%p)->()\n", This);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI recondset_get_ActiveConnection(_Recordset *iface, VARIANT *connection)
+{
+    recordset *This = impl_from_Recordset(iface);
+    FIXME("(%p)->(%p)\n", This, connection);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI recondset_get_BOF(_Recordset *iface, VARIANT_BOOL *bof)
+{
+    recordset *This = impl_from_Recordset(iface);
+    FIXME("(%p)->(%p)\n", This, bof);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI recondset_get_Bookmark(_Recordset *iface, VARIANT *bookmark)
+{
+    recordset *This = impl_from_Recordset(iface);
+    FIXME("(%p)->(%p)\n", This, bookmark);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI recondset_put_Bookmark(_Recordset *iface, VARIANT bookmark)
+{
+    recordset *This = impl_from_Recordset(iface);
+    FIXME("(%p)->\n", This);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI recondset_get_CacheSize(_Recordset *iface, LONG *cache)
+{
+    recordset *This = impl_from_Recordset(iface);
+    FIXME("(%p)->(%p)\n", This, cache);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI recondset_put_CacheSize(_Recordset *iface, LONG cache)
+{
+    recordset *This = impl_from_Recordset(iface);
+    FIXME("(%p)->(%d)\n", This, cache);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI recondset_get_CursorType(_Recordset *iface, CursorTypeEnum *cursortype)
+{
+    recordset *This = impl_from_Recordset(iface);
+    FIXME("(%p)->(%p)\n", This, cursortype);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI recondset_put_CursorType(_Recordset *iface, CursorTypeEnum cursortype)
+{
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI recondset_get_EOF(_Recordset *iface, VARIANT_BOOL *eof)
+{
+    recordset *This = impl_from_Recordset(iface);
+    FIXME("(%p)->(%p)\n", This, eof);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI recondset_get_Fields(_Recordset *iface, Fields **fields)
+{
+    recordset *This = impl_from_Recordset(iface);
+    FIXME("(%p)->(%p)\n", This, fields);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI recondset_get_LockType(_Recordset *iface, LockTypeEnum *locktype)
+{
+    recordset *This = impl_from_Recordset(iface);
+    FIXME("(%p)->(%p)\n", This, locktype);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI recondset_put_LockType(_Recordset *iface, LockTypeEnum locktype)
+{
+    recordset *This = impl_from_Recordset(iface);
+    FIXME("(%p)->(%d)\n", This, locktype);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI recondset_get_MaxRecords(_Recordset *iface, LONG *maxrecords)
+{
+    recordset *This = impl_from_Recordset(iface);
+    FIXME("(%p)->(%p)\n", This, maxrecords);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI recondset_put_MaxRecords(_Recordset *iface, LONG maxrecords)
+{
+    recordset *This = impl_from_Recordset(iface);
+    FIXME("(%p)->(%d)\n", This, maxrecords);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI recondset_get_RecordCount(_Recordset *iface, LONG *recordcnt)
+{
+    recordset *This = impl_from_Recordset(iface);
+    FIXME("(%p)->(%p)\n", This, recordcnt);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI recondset_putref_Source(_Recordset *iface, IDispatch *source)
+{
+    recordset *This = impl_from_Recordset(iface);
+    FIXME("(%p)->(%p)\n", This, source);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI recondset_put_Source(_Recordset *iface, BSTR source)
+{
+    recordset *This = impl_from_Recordset(iface);
+    FIXME("(%p)->(%s)\n", This, debugstr_w(source));
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI recondset_get_Source(_Recordset *iface, VARIANT *source)
+{
+    recordset *This = impl_from_Recordset(iface);
+    FIXME("(%p)->(%p)\n", This, source);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI recondset_AddNew(_Recordset *iface, VARIANT fieldlist, VARIANT values)
+{
+    recordset *This = impl_from_Recordset(iface);
+    FIXME("(%p)\n", This);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI recondset_CancelUpdate(_Recordset *iface)
+{
+    recordset *This = impl_from_Recordset(iface);
+    FIXME("(%p)\n", This);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI recondset_Close(_Recordset *iface)
+{
+    recordset *This = impl_from_Recordset(iface);
+    FIXME("(%p)\n", This);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI recondset_Delete(_Recordset *iface, AffectEnum affectrecords)
+{
+    recordset *This = impl_from_Recordset(iface);
+    FIXME("(%p)->(%d)\n", This, affectrecords);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI recondset_GetRows(_Recordset *iface, LONG rows, VARIANT start, VARIANT fields, VARIANT *var)
+{
+    recordset *This = impl_from_Recordset(iface);
+    FIXME("(%p)->(%d %p)\n", This, rows, var);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI recondset_Move(_Recordset *iface, LONG numrecords, VARIANT start)
+{
+    recordset *This = impl_from_Recordset(iface);
+    FIXME("(%p)->(%d)\n", This, numrecords);
+
+    return E_NOTIMPL;;
+}
+
+static HRESULT WINAPI recondset_MoveNext(_Recordset *iface)
+{
+    recordset *This = impl_from_Recordset(iface);
+    FIXME("(%p)\n", This);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI recondset_MovePrevious(_Recordset *iface)
+{
+    recordset *This = impl_from_Recordset(iface);
+    FIXME("(%p)\n", This);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI recondset_MoveFirst(_Recordset *iface)
+{
+    recordset *This = impl_from_Recordset(iface);
+    FIXME("(%p)\n", This);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI recondset_MoveLast(_Recordset *iface)
+{
+    recordset *This = impl_from_Recordset(iface);
+    FIXME("(%p)\n", This);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI recondset_Open(_Recordset *iface, VARIANT source, VARIANT activeconnection,
+        CursorTypeEnum cursortype, LockTypeEnum locktype, LONG options)
+{
+    recordset *This = impl_from_Recordset(iface);
+    FIXME("(%p)(%d %d %x)\n", This, cursortype, locktype, options);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI recondset_Requery(_Recordset *iface, LONG options)
+{
+    recordset *This = impl_from_Recordset(iface);
+    FIXME("(%p)(%x)\n", This, options);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI recondset__xResync(_Recordset *iface, AffectEnum AffectRecords)
+{
+    recordset *This = impl_from_Recordset(iface);
+    FIXME("(%p)(%d)\n", This, AffectRecords);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI recondset_Update(_Recordset *iface, VARIANT Fields, VARIANT Values)
+{
+    recordset *This = impl_from_Recordset(iface);
+    FIXME("(%p)\n", This);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI recondset_get_AbsolutePage(_Recordset *iface, PositionEnum_Param *pos)
+{
+    recordset *This = impl_from_Recordset(iface);
+    FIXME("(%p)(%p)\n", This, pos);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI recondset_put_AbsolutePage(_Recordset *iface, PositionEnum_Param pos)
+{
+    recordset *This = impl_from_Recordset(iface);
+    FIXME("(%p)(%d)\n", This, pos);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI recondset_get_EditMode(_Recordset *iface, EditModeEnum *mode)
+{
+    recordset *This = impl_from_Recordset(iface);
+    FIXME("(%p)(%p)\n", This, mode);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI recondset_get_Filter(_Recordset *iface, VARIANT *criteria)
+{
+    recordset *This = impl_from_Recordset(iface);
+    FIXME("(%p)(%p)\n", This, criteria);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI recondset_put_Filter(_Recordset *iface, VARIANT criteria)
+{
+    recordset *This = impl_from_Recordset(iface);
+    FIXME("(%p)()\n", This);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI recondset_get_PageCount(_Recordset *iface, LONG *cnt)
+{
+    recordset *This = impl_from_Recordset(iface);
+    FIXME("(%p)(%p)\n", This, cnt);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI recondset_get_PageSize(_Recordset *iface, LONG *size)
+{
+    recordset *This = impl_from_Recordset(iface);
+    FIXME("(%p)(%p)\n", This, size);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI recondset_put_PageSize(_Recordset *iface, LONG size)
+{
+    recordset *This = impl_from_Recordset(iface);
+    FIXME("(%p)(%d)\n", This, size);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI recondset_get_Sort(_Recordset *iface, BSTR *criteria)
+{
+    recordset *This = impl_from_Recordset(iface);
+    FIXME("(%p)(%p)\n", This, criteria);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI recondset_put_Sort(_Recordset *iface, BSTR criteria)
+{
+    recordset *This = impl_from_Recordset(iface);
+    FIXME("(%p)(%s)\n", This, debugstr_w(criteria));
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI recondset_get_Status(_Recordset *iface, LONG *status)
+{
+    recordset *This = impl_from_Recordset(iface);
+    FIXME("(%p)(%p)\n", This, status);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI recondset_get_State(_Recordset *iface, LONG *state)
+{
+    recordset *This = impl_from_Recordset(iface);
+    FIXME("(%p)(%p)\n", This, state);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI recondset__xClone(_Recordset *iface, _Recordset **clone)
+{
+    recordset *This = impl_from_Recordset(iface);
+    FIXME("(%p)(%p)\n", This, clone);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI recondset_UpdateBatch(_Recordset *iface, AffectEnum affectrecords)
+{
+    recordset *This = impl_from_Recordset(iface);
+    FIXME("(%p)(%d)\n", This, affectrecords);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI recondset_CancelBatch(_Recordset *iface, AffectEnum affectrecords)
+{
+    recordset *This = impl_from_Recordset(iface);
+    FIXME("(%p)(%d)\n", This, affectrecords);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI recondset_get_CursorLocation(_Recordset *iface, CursorLocationEnum *location)
+{
+    recordset *This = impl_from_Recordset(iface);
+    FIXME("(%p)(%p)\n", This, location);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI recondset_put_CursorLocation(_Recordset *iface, CursorLocationEnum location)
+{
+    recordset *This = impl_from_Recordset(iface);
+    FIXME("(%p)(%d)\n", This, location);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI recondset_NextRecordset(_Recordset *iface, VARIANT *recordsaffected, _Recordset **out)
+{
+    recordset *This = impl_from_Recordset(iface);
+    FIXME("(%p)(%p %p)\n", This, recordsaffected, out);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI recondset_Supports(_Recordset *iface, CursorOptionEnum cursoroptions, VARIANT_BOOL *out)
+{
+    recordset *This = impl_from_Recordset(iface);
+    FIXME("(%p)(%d %p)\n", This, cursoroptions, out);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI recondset_get_Collect(_Recordset *iface, VARIANT index, VARIANT *var)
+{
+    recordset *This = impl_from_Recordset(iface);
+    FIXME("(%p)(%p)\n", This, var);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI recondset_put_Collect(_Recordset *iface, VARIANT index, VARIANT var)
+{
+    recordset *This = impl_from_Recordset(iface);
+    FIXME("(%p)()\n", This);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI recondset_get_MarshalOptions(_Recordset *iface, MarshalOptionsEnum *marshal)
+{
+    recordset *This = impl_from_Recordset(iface);
+    FIXME("(%p)(%p)\n", This, marshal);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI recondset_put_MarshalOptions(_Recordset *iface, MarshalOptionsEnum marshal)
+{
+    recordset *This = impl_from_Recordset(iface);
+    FIXME("(%p)(%d)\n", This, marshal);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI recondset_Find(_Recordset *iface, BSTR criteria, LONG skiprecords, SearchDirectionEnum direction,
+        VARIANT start)
+{
+    recordset *This = impl_from_Recordset(iface);
+    FIXME("(%p)(%s %d %d)\n", This, debugstr_w(criteria), skiprecords, direction);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI recondset_Cancel(_Recordset *iface)
+{
+    recordset *This = impl_from_Recordset(iface);
+    FIXME("(%p)\n", This);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI recondset_get_DataSource(_Recordset *iface, IUnknown **datasource)
+{
+    recordset *This = impl_from_Recordset(iface);
+    FIXME("(%p)(%p)\n", This, datasource);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI recondset_putref_DataSource(_Recordset *iface, IUnknown *datasource)
+{
+    recordset *This = impl_from_Recordset(iface);
+    FIXME("(%p)(%p)\n", This, datasource);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI recondset__xSave(_Recordset *iface, BSTR filename, PersistFormatEnum format)
+{
+    recordset *This = impl_from_Recordset(iface);
+    FIXME("(%p)(%s %d)\n", This, debugstr_w(filename), format);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI recondset_get_ActiveCommand(_Recordset *iface, IDispatch **cmd)
+{
+    recordset *This = impl_from_Recordset(iface);
+    FIXME("(%p)(%p)\n", This, cmd);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI recondset_put_StayInSync(_Recordset *iface, VARIANT_BOOL insync)
+{
+    recordset *This = impl_from_Recordset(iface);
+    FIXME("(%p)(%d)\n", This, insync);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI recondset_get_StayInSync(_Recordset *iface, VARIANT_BOOL *insync)
+{
+    recordset *This = impl_from_Recordset(iface);
+    FIXME("(%p)(%p)\n", This, insync);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI recondset_GetString(_Recordset *iface, StringFormatEnum stringformat, LONG row_cnt,
+        BSTR columndelimeter, BSTR rowdelimeter, BSTR nullexpr, BSTR *string)
+{
+    recordset *This = impl_from_Recordset(iface);
+    FIXME("(%p)(%d %d %s %s %s %p)\n", This, stringformat, row_cnt, debugstr_w(columndelimeter),
+	        debugstr_w(rowdelimeter), debugstr_w(nullexpr), string);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI recondset_get_DataMember(_Recordset *iface, BSTR *datamember)
+{
+    recordset *This = impl_from_Recordset(iface);
+    FIXME("(%p)(%p)\n", This, datamember);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI recondset_put_DataMember(_Recordset *iface, BSTR datamember)
+{
+    recordset *This = impl_from_Recordset(iface);
+    FIXME("(%p)(%s)\n", This, debugstr_w(datamember));
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI recondset_CompareBookmarks(_Recordset *iface, VARIANT bookmark1, VARIANT bookmark2,
+        CompareEnum *compare)
+{
+    recordset *This = impl_from_Recordset(iface);
+    FIXME("(%p)(%p)\n", This, compare);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI recondset_Clone(_Recordset *iface, LockTypeEnum locktype, _Recordset **clone)
+{
+    recordset *This = impl_from_Recordset(iface);
+    FIXME("(%p)(%d %p)\n", This, locktype, clone);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI recondset_Resync(_Recordset *iface, AffectEnum affectrecords, ResyncEnum resync)
+{
+    recordset *This = impl_from_Recordset(iface);
+    FIXME("(%p)(%d %d)\n", This, affectrecords, resync);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI recondset_Seek(_Recordset *iface, VARIANT keysvalues, SeekEnum option)
+{
+    recordset *This = impl_from_Recordset(iface);
+    FIXME("(%p)(%d)\n", This, option);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI recondset_put_Index(_Recordset *iface, BSTR index)
+{
+    recordset *This = impl_from_Recordset(iface);
+    FIXME("(%p)(%s)\n", This, debugstr_w(index));
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI recondset_get_Index(_Recordset *iface, BSTR *index)
+{
+    recordset *This = impl_from_Recordset(iface);
+    FIXME("(%p)(%p)\n", This, index);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI recondset_Save(_Recordset *iface, VARIANT destination, PersistFormatEnum format)
+{
+    recordset *This = impl_from_Recordset(iface);
+    FIXME("(%p)(%d)\n", This, format);
+
+    return E_NOTIMPL;
+}
+
+
+////////////////////
+static const struct _RecordsetVtbl recordset_vtbl =
+{
+    recondset_QueryInterface,
+    recondset_AddRef,
+    recondset_Release,
+    recondset_GetTypeInfoCount,
+    recondset_GetTypeInfo,
+    recondset_GetIDsOfNames,
+    recondset_Invoke,
+    recondset_get_Properties,
+    recondset_get_AbsolutePosition,
+    recondset_put_AbsolutePosition,
+    recondset_putref_ActiveConnection,
+    recondset_put_ActiveConnection,
+    recondset_get_ActiveConnection,
+    recondset_get_BOF,
+    recondset_get_Bookmark,
+    recondset_put_Bookmark,
+    recondset_get_CacheSize,
+    recondset_put_CacheSize,
+    recondset_get_CursorType,
+    recondset_put_CursorType,
+    recondset_get_EOF,
+    recondset_get_Fields,
+    recondset_get_LockType,
+    recondset_put_LockType,
+    recondset_get_MaxRecords,
+    recondset_put_MaxRecords,
+    recondset_get_RecordCount,
+    recondset_putref_Source,
+    recondset_put_Source,
+    recondset_get_Source,
+    recondset_AddNew,
+    recondset_CancelUpdate,
+    recondset_Close,
+    recondset_Delete,
+    recondset_GetRows,
+    recondset_Move,
+    recondset_MoveNext,
+    recondset_MovePrevious,
+    recondset_MoveFirst,
+    recondset_MoveLast,
+    recondset_Open,
+    recondset_Requery,
+    recondset__xResync,
+    recondset_Update,
+    recondset_get_AbsolutePage,
+    recondset_put_AbsolutePage,
+    recondset_get_EditMode,
+    recondset_get_Filter,
+    recondset_put_Filter,
+    recondset_get_PageCount,
+    recondset_get_PageSize,
+    recondset_put_PageSize,
+    recondset_get_Sort,
+    recondset_put_Sort,
+    recondset_get_Status,
+    recondset_get_State,
+    recondset__xClone,
+    recondset_UpdateBatch,
+    recondset_CancelBatch,
+    recondset_get_CursorLocation,
+    recondset_put_CursorLocation,
+    recondset_NextRecordset,
+    recondset_Supports,
+    recondset_get_Collect,
+    recondset_put_Collect,
+    recondset_get_MarshalOptions,
+    recondset_put_MarshalOptions,
+    recondset_Find,
+    recondset_Cancel,
+    recondset_get_DataSource,
+    recondset_putref_DataSource,
+    recondset__xSave,
+    recondset_get_ActiveCommand,
+    recondset_put_StayInSync,
+    recondset_get_StayInSync,
+    recondset_GetString,
+    recondset_get_DataMember,
+    recondset_put_DataMember,
+    recondset_CompareBookmarks,
+    recondset_Clone,
+    recondset_Resync,
+    recondset_Seek,
+    recondset_put_Index,
+    recondset_get_Index,
+    recondset_Save
+};
+
+HRESULT Recordset_create(void **out)
+{
+    recordset *This;
+
+    TRACE("(%p)\n", out);
+
+    *out = NULL;
+
+    This = heap_alloc(sizeof(*This));
+    if (!This)
+	    return E_OUTOFMEMORY;
+
+    This->_Recordset_iface.lpVtbl = &recordset_vtbl;
+    This->ref = 1;
+
+    *out = &This->_Recordset_iface;
+
+    return S_OK;
+}
\ No newline at end of file
-- 
1.9.1

